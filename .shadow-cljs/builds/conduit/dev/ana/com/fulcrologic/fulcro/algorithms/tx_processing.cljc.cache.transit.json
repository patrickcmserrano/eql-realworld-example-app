["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing');\n\n\n/**\n * Returns the remotes map from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remotes(app){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app)));\n});\n/**\n * Returns a set of the names of the remotes from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remote_names(app){\nreturn cljs.core.set(cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app)))));\n});\n/**\n * Splits the given send queue into two send queues:\n *   [parallel-items sequential-items].\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel = (function com$fulcrologic$fulcro$algorithms$tx_processing$extract_parallel(sends){\nvar parallel_QMARK_ = (function (p__65906){\nvar map__65909 = p__65906;\nvar map__65909__$1 = (((((!((map__65909 == null))))?(((((map__65909.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65909.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65909):map__65909);\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65909__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nreturn cljs.core.boolean$((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"parallel?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/parallel?\",1623289535).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\n});\nvar map__65904 = cljs.core.group_by(parallel_QMARK_,sends);\nvar map__65904__$1 = (((((!((map__65904 == null))))?(((((map__65904.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65904.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65904):map__65904);\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65904__$1,true);\nvar sequential = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65904__$1,false);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.vec(parallel),cljs.core.vec(sequential)], null);\n});\n/**\n * Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$every_ast_QMARK_(ast_node_or_tree,test){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree))){\nreturn cljs.core.every_QMARK_(test,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree));\n} else {\nreturn (test.cljs$core$IFn$_invoke$arity$1 ? test.cljs$core$IFn$_invoke$arity$1(ast_node_or_tree) : test.call(null,ast_node_or_tree));\n}\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$mutation_ast_QMARK_(ast_node_or_tree){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__65915_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__65915_SHARP_));\n}));\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$query_ast_QMARK_(ast_node_or_tree){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__65919_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__65919_SHARP_));\n}));\n});\n/**\n * Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n *   appear before reads, without changing the relative order in blocks of reads/writes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads = (function com$fulcrologic$fulcro$algorithms$tx_processing$sort_queue_writes_before_reads(send_queue){\nvar vec__65921 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_queue = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65921,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65921,(1),null);\nvar id_sequence = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (n){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(n));\n}),cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),send_queue__$1));\nvar clusters = cljs.core.group_by(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.vec(send_queue__$1));\nvar map__65924 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,id){\nvar vec__65925 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(clusters,id);\nvar seq__65926 = cljs.core.seq(vec__65925);\nvar first__65927 = cljs.core.first(seq__65926);\nvar seq__65926__$1 = cljs.core.next(seq__65926);\nvar map__65928 = first__65927;\nvar map__65928__$1 = (((((!((map__65928 == null))))?(((((map__65928.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65928.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65928):map__65928);\nvar n = map__65928__$1;\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65928__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar _ = seq__65926__$1;\nvar cluster = vec__65925;\nif((ast == null)){\nreturn result;\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.into,cluster);\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.into,cluster);\n} else {\nreturn result;\n\n}\n}\n}\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.PersistentVector.EMPTY], null),id_sequence);\nvar map__65924__$1 = (((((!((map__65924 == null))))?(((((map__65924.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65924.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65924):map__65924);\nvar reads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65924__$1,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361));\nvar writes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65924__$1,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269));\nvar send_queue__$2 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_queue,writes,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([reads], 0)));\nreturn send_queue__$2;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.top_keys = (function com$fulcrologic$fulcro$algorithms$tx_processing$top_keys(p__65937){\nvar map__65938 = p__65937;\nvar map__65938__$1 = (((((!((map__65938 == null))))?(((((map__65938.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65938.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65938):map__65938);\nvar ast = map__65938__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65938__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65938__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65938__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),type)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587)),children);\n} else {\nreturn cljs.core.PersistentHashSet.createAsIfByAssoc([key]);\n}\n});\n/**\n * Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n *   along with the updated send queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.combine_sends = (function com$fulcrologic$fulcro$algorithms$tx_processing$combine_sends(app,remote_name,send_queue){\nvar vec__65944 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_nodes = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65944,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65944,(1),null);\nvar send_queue__$2 = com.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads(cljs.core.vec(send_queue__$1));\nvar id_to_send = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar options = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar vec__65947 = cljs.core.split_with((function (p1__65943_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id_to_send,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(p1__65943_SHARP_));\n}),send_queue__$2);\nvar to_send = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65947,(0),null);\nvar to_defer = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65947,(1),null);\nvar tx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,p__65950){\nvar map__65951 = p__65950;\nvar map__65951__$1 = (((((!((map__65951 == null))))?(((((map__65951.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65951.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65951):map__65951);\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65951__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar tx = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(ast);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,tx);\n}),cljs.core.PersistentVector.EMPTY,to_send);\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar combined_node_id = com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0();\nvar combined_node_idx = (0);\nvar combined_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),combined_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),combined_node_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),(function (p__65956){\nvar map__65957 = p__65956;\nvar map__65957__$1 = (((((!((map__65957 == null))))?(((((map__65957.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65957.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65957):map__65957);\nvar combined_result = map__65957__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65957__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__65959 = cljs.core.seq(to_send);\nvar chunk__65960 = null;\nvar count__65961 = (0);\nvar i__65962 = (0);\nwhile(true){\nif((i__65962 < count__65961)){\nvar map__65974 = chunk__65960.cljs$core$IIndexed$_nth$arity$2(null,i__65962);\nvar map__65974__$1 = (((((!((map__65974 == null))))?(((((map__65974.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65974.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65974):map__65974);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65974__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__66572 = seq__65959;\nvar G__66573 = chunk__65960;\nvar G__66574 = count__65961;\nvar G__66575 = (i__65962 + (1));\nseq__65959 = G__66572;\nchunk__65960 = G__66573;\ncount__65961 = G__66574;\ni__65962 = G__66575;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__65959);\nif(temp__5735__auto__){\nvar seq__65959__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__65959__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__65959__$1);\nvar G__66576 = cljs.core.chunk_rest(seq__65959__$1);\nvar G__66577 = c__4556__auto__;\nvar G__66578 = cljs.core.count(c__4556__auto__);\nvar G__66579 = (0);\nseq__65959 = G__66576;\nchunk__65960 = G__66577;\ncount__65961 = G__66578;\ni__65962 = G__66579;\ncontinue;\n} else {\nvar map__65980 = cljs.core.first(seq__65959__$1);\nvar map__65980__$1 = (((((!((map__65980 == null))))?(((((map__65980.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65980.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65980):map__65980);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65980__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__66580 = cljs.core.next(seq__65959__$1);\nvar G__66581 = null;\nvar G__66582 = (0);\nvar G__66583 = (0);\nseq__65959 = G__66580;\nchunk__65960 = G__66581;\ncount__65961 = G__66582;\ni__65962 = G__66583;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),(function (p__65982){\nvar map__65983 = p__65982;\nvar map__65983__$1 = (((((!((map__65983 == null))))?(((((map__65983.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65983.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65983):map__65983);\nvar combined_result = map__65983__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65983__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__65985_66584 = cljs.core.seq(to_send);\nvar chunk__65986_66585 = null;\nvar count__65987_66586 = (0);\nvar i__65988_66587 = (0);\nwhile(true){\nif((i__65988_66587 < count__65987_66586)){\nvar map__66012_66588 = chunk__65986_66585.cljs$core$IIndexed$_nth$arity$2(null,i__65988_66587);\nvar map__66012_66589__$1 = (((((!((map__66012_66588 == null))))?(((((map__66012_66588.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66012_66588.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66012_66588):map__66012_66588);\nvar ast_66590__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66012_66589__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_66591 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66012_66589__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_66592 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_66590__$1)):body);\nvar result_66593 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_66592);\nif(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{var map__66015_66594 = result_66593;\nvar map__66015_66595__$1 = (((((!((map__66015_66594 == null))))?(((((map__66015_66594.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66015_66594.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66015_66594):map__66015_66594);\nvar status_code_66596 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66015_66595__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_66597__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66015_66595__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_66596)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app,remote_name,combined_node_id,body_66597__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_66596));\n}\n}catch (e66014){var e_66603 = e66014;\n}} else {\n}\n\n(result_handler_66591.cljs$core$IFn$_invoke$arity$1 ? result_handler_66591.cljs$core$IFn$_invoke$arity$1(result_66593) : result_handler_66591.call(null,result_66593));\n\n\nvar G__66604 = seq__65985_66584;\nvar G__66605 = chunk__65986_66585;\nvar G__66606 = count__65987_66586;\nvar G__66607 = (i__65988_66587 + (1));\nseq__65985_66584 = G__66604;\nchunk__65986_66585 = G__66605;\ncount__65987_66586 = G__66606;\ni__65988_66587 = G__66607;\ncontinue;\n} else {\nvar temp__5735__auto___66608 = cljs.core.seq(seq__65985_66584);\nif(temp__5735__auto___66608){\nvar seq__65985_66609__$1 = temp__5735__auto___66608;\nif(cljs.core.chunked_seq_QMARK_(seq__65985_66609__$1)){\nvar c__4556__auto___66610 = cljs.core.chunk_first(seq__65985_66609__$1);\nvar G__66611 = cljs.core.chunk_rest(seq__65985_66609__$1);\nvar G__66612 = c__4556__auto___66610;\nvar G__66613 = cljs.core.count(c__4556__auto___66610);\nvar G__66614 = (0);\nseq__65985_66584 = G__66611;\nchunk__65986_66585 = G__66612;\ncount__65987_66586 = G__66613;\ni__65988_66587 = G__66614;\ncontinue;\n} else {\nvar map__66017_66615 = cljs.core.first(seq__65985_66609__$1);\nvar map__66017_66616__$1 = (((((!((map__66017_66615 == null))))?(((((map__66017_66615.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66017_66615.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66017_66615):map__66017_66615);\nvar ast_66617__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66017_66616__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_66618 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66017_66616__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_66623 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_66617__$1)):body);\nvar result_66624 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_66623);\nif(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{var map__66022_66625 = result_66624;\nvar map__66022_66626__$1 = (((((!((map__66022_66625 == null))))?(((((map__66022_66625.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66022_66625.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66022_66625):map__66022_66625);\nvar status_code_66627 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66022_66626__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_66628__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66022_66626__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_66627)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app,remote_name,combined_node_id,body_66628__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_66627));\n}\n}catch (e66021){var e_66630 = e66021;\n}} else {\n}\n\n(result_handler_66618.cljs$core$IFn$_invoke$arity$1 ? result_handler_66618.cljs$core$IFn$_invoke$arity$1(result_66624) : result_handler_66618.call(null,result_66624));\n\n\nvar G__66632 = cljs.core.next(seq__65985_66609__$1);\nvar G__66633 = null;\nvar G__66634 = (0);\nvar G__66635 = (0);\nseq__65985_66584 = G__66632;\nchunk__65986_66585 = G__66633;\ncount__65987_66586 = G__66634;\ni__65988_66587 = G__66635;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4(app,remote_name,combined_node_id,combined_node_idx) : com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.call(null,app,remote_name,combined_node_id,combined_node_idx));\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),true], null);\nif(cljs.core.seq(to_send)){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),combined_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_nodes,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [combined_node], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([to_defer], 0)))], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),send_queue__$2], null);\n}\n});\n/**\n * Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n *   if the remote itself throws exceptions.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$net_send_BANG_(app,send_node,remote_name){\nvar b2__45408__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes(app),remote_name);\nif(cljs.core.truth_(b2__45408__auto__)){\nvar remote = b2__45408__auto__;\nvar b2__45408__auto____$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(remote,new cljs.core.Keyword(null,\"transmit!\",\"transmit!\",-107149039));\nif(cljs.core.truth_(b2__45408__auto____$1)){\nvar transmit_BANG_ = b2__45408__auto____$1;\ntry{if(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{var tx_66655 = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node));\ncom.fulcrologic.fulcro.inspect.inspect_client.send_started_BANG_(app,remote_name,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),tx_66655);\n}catch (e66032){var e_66656 = e66032;\n}} else {\n}\n\nreturn (transmit_BANG_.cljs$core$IFn$_invoke$arity$2 ? transmit_BANG_.cljs$core$IFn$_invoke$arity$2(remote,send_node) : transmit_BANG_.call(null,remote,send_node));\n}catch (e66025){var e = e66025;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,154,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Send threw an exception for tx:\",com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node))], null);\n}),null)),null,2126128847);\n\ntry{if(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{com.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),\"Transmit Exception\");\n}catch (e66029){var e_66657__$1 = e66029;\n}} else {\n}\n\nvar G__66031 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"client-exception\",\"client-exception\",-1357213384),e], null);\nvar fexpr__66030 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__66030.cljs$core$IFn$_invoke$arity$1 ? fexpr__66030.cljs$core$IFn$_invoke$arity$1(G__66031) : fexpr__66030.call(null,G__66031));\n}catch (e66026){var e__$1 = e66026;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,161,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e__$1,\"Error handler failed to handle exception!\"], null);\n}),null)),null,239595770);\n}}} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n}),null)),null,-1764476519);\n\nvar G__66037 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__66036 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__66036.cljs$core$IFn$_invoke$arity$1 ? fexpr__66036.cljs$core$IFn$_invoke$arity$1(G__66037) : fexpr__66036.call(null,G__66037));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n}),null)),null,-942220519);\n\nvar G__66039 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__66038 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__66038.cljs$core$IFn$_invoke$arity$1 ? fexpr__66038.cljs$core$IFn$_invoke$arity$1(G__66039) : fexpr__66038.call(null,G__66039));\n}\n});\n/**\n * Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_send_queues_BANG_(p__66040){\nvar map__66041 = p__66040;\nvar map__66041__$1 = (((((!((map__66041 == null))))?(((((map__66041.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66041.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66041):map__66041);\nvar app = map__66041__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66041__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar send_queues = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app);\nvar operations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_send_queues,remote){\nvar send_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$3(send_queues,remote,cljs.core.PersistentVector.EMPTY);\nvar vec__66045 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue);\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__66045,(0),null);\nvar serial = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__66045,(1),null);\nvar front = cljs.core.first(serial);\nvar seq__66050_66690 = cljs.core.seq(p);\nvar chunk__66051_66691 = null;\nvar count__66052_66692 = (0);\nvar i__66053_66693 = (0);\nwhile(true){\nif((i__66053_66693 < count__66052_66692)){\nvar item_66698 = chunk__66051_66691.cljs$core$IIndexed$_nth$arity$2(null,i__66053_66693);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__66050_66690,chunk__66051_66691,count__66052_66692,i__66053_66693,item_66698,send_queue,vec__66045,p,serial,front,send_queues,remote_names,operations,map__66041,map__66041__$1,app,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app,item_66698,remote);\n});})(seq__66050_66690,chunk__66051_66691,count__66052_66692,i__66053_66693,item_66698,send_queue,vec__66045,p,serial,front,send_queues,remote_names,operations,map__66041,map__66041__$1,app,runtime_atom))\n);\n\n\nvar G__66703 = seq__66050_66690;\nvar G__66704 = chunk__66051_66691;\nvar G__66705 = count__66052_66692;\nvar G__66706 = (i__66053_66693 + (1));\nseq__66050_66690 = G__66703;\nchunk__66051_66691 = G__66704;\ncount__66052_66692 = G__66705;\ni__66053_66693 = G__66706;\ncontinue;\n} else {\nvar temp__5735__auto___66707 = cljs.core.seq(seq__66050_66690);\nif(temp__5735__auto___66707){\nvar seq__66050_66708__$1 = temp__5735__auto___66707;\nif(cljs.core.chunked_seq_QMARK_(seq__66050_66708__$1)){\nvar c__4556__auto___66709 = cljs.core.chunk_first(seq__66050_66708__$1);\nvar G__66710 = cljs.core.chunk_rest(seq__66050_66708__$1);\nvar G__66711 = c__4556__auto___66709;\nvar G__66712 = cljs.core.count(c__4556__auto___66709);\nvar G__66713 = (0);\nseq__66050_66690 = G__66710;\nchunk__66051_66691 = G__66711;\ncount__66052_66692 = G__66712;\ni__66053_66693 = G__66713;\ncontinue;\n} else {\nvar item_66714 = cljs.core.first(seq__66050_66708__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__66050_66690,chunk__66051_66691,count__66052_66692,i__66053_66693,item_66714,seq__66050_66708__$1,temp__5735__auto___66707,send_queue,vec__66045,p,serial,front,send_queues,remote_names,operations,map__66041,map__66041__$1,app,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app,item_66714,remote);\n});})(seq__66050_66690,chunk__66051_66691,count__66052_66692,i__66053_66693,item_66714,seq__66050_66708__$1,temp__5735__auto___66707,send_queue,vec__66045,p,serial,front,send_queues,remote_names,operations,map__66041,map__66041__$1,app,runtime_atom))\n);\n\n\nvar G__66719 = cljs.core.next(seq__66050_66708__$1);\nvar G__66720 = null;\nvar G__66721 = (0);\nvar G__66722 = (0);\nseq__66050_66690 = G__66719;\nchunk__66051_66691 = G__66720;\ncount__66052_66692 = G__66721;\ni__66053_66693 = G__66722;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517).cljs$core$IFn$_invoke$arity$1(front))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,serial);\n} else {\nvar map__66054 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app,remote,serial);\nvar map__66054__$1 = (((((!((map__66054 == null))))?(((((map__66054.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66054.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66054):map__66054);\nvar send_queue__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66054__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66054__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,(function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app,send_node,remote);\n}));\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,send_queue__$1);\n}\n}),cljs.core.PersistentArrayMap.EMPTY,remote_names);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n\nvar seq__66056_66730 = cljs.core.seq(cljs.core.deref(operations));\nvar chunk__66057_66731 = null;\nvar count__66058_66732 = (0);\nvar i__66059_66733 = (0);\nwhile(true){\nif((i__66059_66733 < count__66058_66732)){\nvar op_66734 = chunk__66057_66731.cljs$core$IIndexed$_nth$arity$2(null,i__66059_66733);\n(op_66734.cljs$core$IFn$_invoke$arity$0 ? op_66734.cljs$core$IFn$_invoke$arity$0() : op_66734.call(null));\n\n\nvar G__66735 = seq__66056_66730;\nvar G__66736 = chunk__66057_66731;\nvar G__66737 = count__66058_66732;\nvar G__66738 = (i__66059_66733 + (1));\nseq__66056_66730 = G__66735;\nchunk__66057_66731 = G__66736;\ncount__66058_66732 = G__66737;\ni__66059_66733 = G__66738;\ncontinue;\n} else {\nvar temp__5735__auto___66739 = cljs.core.seq(seq__66056_66730);\nif(temp__5735__auto___66739){\nvar seq__66056_66740__$1 = temp__5735__auto___66739;\nif(cljs.core.chunked_seq_QMARK_(seq__66056_66740__$1)){\nvar c__4556__auto___66741 = cljs.core.chunk_first(seq__66056_66740__$1);\nvar G__66742 = cljs.core.chunk_rest(seq__66056_66740__$1);\nvar G__66743 = c__4556__auto___66741;\nvar G__66744 = cljs.core.count(c__4556__auto___66741);\nvar G__66745 = (0);\nseq__66056_66730 = G__66742;\nchunk__66057_66731 = G__66743;\ncount__66058_66732 = G__66744;\ni__66059_66733 = G__66745;\ncontinue;\n} else {\nvar op_66746 = cljs.core.first(seq__66056_66740__$1);\n(op_66746.cljs$core$IFn$_invoke$arity$0 ? op_66746.cljs$core$IFn$_invoke$arity$0() : op_66746.call(null));\n\n\nvar G__66749 = cljs.core.next(seq__66056_66740__$1);\nvar G__66750 = null;\nvar G__66751 = (0);\nvar G__66752 = (0);\nseq__66056_66730 = G__66749;\nchunk__66057_66731 = G__66750;\ncount__66058_66732 = G__66751;\ni__66059_66733 = G__66752;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn new_send_queues;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$tx_node(var_args){\nvar G__66061 = arguments.length;\nswitch (G__66061) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1 = (function (tx){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2 = (function (tx,options){\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar ast_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast);\nvar elements = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$algorithms$tx_processing$txfilt_STAR_(n){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(n));\n})),cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$algorithms$tx_processing$__GT_txnode_STAR_(idx,ast_node){\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477),ast_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),cljs.core.PersistentArrayMap.EMPTY], null);\n}))),ast_nodes);\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"created\",\"com.fulcrologic.fulcro.algorithms.tx-processing/created\",859806789),com.fulcrologic.fulcro.algorithms.do_not_use.now(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),tx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),elements], null);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$lang$maxFixedArity = 2);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$build_env(var_args){\nvar G__66063 = arguments.length;\nswitch (G__66063) {\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3 = (function (app,p__66064,addl){\nvar map__66065 = p__66064;\nvar map__66065__$1 = (((((!((map__66065 == null))))?(((((map__66065.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66065.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66065):map__66065);\nvar tx_node = map__66065__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66065__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar map__66067 = options;\nvar map__66067__$1 = (((((!((map__66067 == null))))?(((((map__66067.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66067.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66067):map__66067);\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66067__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66067__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar G__66069 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([addl,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app),new cljs.core.Keyword(null,\"app\",\"app\",-560961707),app], null)], 0));\nvar G__66069__$1 = (cljs.core.truth_(options)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__66069,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options):G__66069);\nvar G__66069__$2 = (cljs.core.truth_(ref)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__66069__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref):G__66069__$1);\nif(cljs.core.truth_(component)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__66069__$2,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\n} else {\nreturn G__66069__$2;\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2 = (function (app,p__66070){\nvar map__66071 = p__66070;\nvar map__66071__$1 = (((((!((map__66071 == null))))?(((((map__66071.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66071.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66071):map__66071);\nvar tx_node = map__66071__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66071__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app,tx_node,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$lang$maxFixedArity = 3);\n\n/**\n * Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n *   of things to do on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements(tx_node,env,dispatch_fn){\nvar do_dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_run_STAR_(env__$1){\ntry{return (dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? dispatch_fn.cljs$core$IFn$_invoke$arity$1(env__$1) : dispatch_fn.call(null,env__$1));\n}catch (e66073){var e = e66073;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,247,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Dispatch for mutation\",(function (){var G__66074 = env__$1;\nvar G__66074__$1 = (((G__66074 == null))?null:new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(G__66074));\nif((G__66074__$1 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(G__66074__$1);\n}\n})(),\"failed with an exception. No dispatch generated.\"], null);\n}),null)),null,1371985815);\n\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}});\nvar dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_dispatch_STAR_(p__66075){\nvar map__66076 = p__66075;\nvar map__66076__$1 = (((((!((map__66076 == null))))?(((((map__66076.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66076.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66076):map__66076);\nvar ele = map__66076__$1;\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66076__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__66078 = original_ast_node;\nvar map__66078__$1 = (((((!((map__66078 == null))))?(((((map__66078.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66078.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66078):map__66078);\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66078__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar env__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node);\nvar G__66080 = ele;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__66080,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),do_dispatch(env__$1));\n} else {\nreturn G__66080;\n}\n});\nvar dispatch_all = (function (eles){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(dispatch,eles);\n});\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),dispatch_all);\n});\n/**\n * Should be called after the application renders to ensure that transactions blocked until the next render become\n * unblocked. Schedules an activation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.application_rendered_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$application_rendered_BANG_(p__66083,options){\nvar map__66084 = p__66083;\nvar map__66084__$1 = (((((!((map__66084 == null))))?(((((map__66084.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66084.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66084):map__66084);\nvar app = map__66084__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66084__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nif(cljs.core.truth_(cljs.core.some((function (p1__66082_SHARP_){\nreturn cljs.core.boolean$(new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(p1__66082_SHARP_)));\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom))))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),(function (queue){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (node){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.dissoc,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030));\n}),queue);\n}));\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app,(0)) : com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.call(null,app,(0)));\n} else {\nreturn null;\n}\n});\n/**\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\n *   a single processing step will run for the active queue.\n * \n *   Activation can be blocked by the tx-node options for things like waiting for the next render frame.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$activate_submissions_BANG_(p__66090){\nvar map__66091 = p__66090;\nvar map__66091__$1 = (((((!((map__66091 == null))))?(((((map__66091.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66091.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66091):map__66091);\nvar app = map__66091__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66091__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__66093 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar map__66093__$1 = (((((!((map__66093 == null))))?(((((map__66093.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66093.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66093):map__66093);\nvar blocked = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66093__$1,true);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66093__$1,false);\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__66088_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__66088_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app,p1__66088_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\n}),ready);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (a){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(a,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),(function (p1__66089_SHARP_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,p1__66089_SHARP_,dispatched_nodes);\n})),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),cljs.core.vec(blocked));\n}));\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1(app) : com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.call(null,app));\n});\n/**\n * Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n * the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_activation_BANG_(var_args){\nvar G__66096 = arguments.length;\nswitch (G__66096) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app,tm){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"activation-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\",-955561668),com.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Schedule a processing of the active queue, which will advance the active transactions by a step.\n * If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_queue_processing_BANG_(var_args){\nvar G__66098 = arguments.length;\nswitch (G__66098) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app,tm){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"queue-processing-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\",-2065549690),com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_sends_BANG_(var_args){\nvar G__66101 = arguments.length;\nswitch (G__66101) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app,tm){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"sends-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\",-844941333),com.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Runs any incomplete and non-blocked optimistic operations on a node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$advance_actions_BANG_(app,p__66110){\nvar map__66111 = p__66110;\nvar map__66111__$1 = (((((!((map__66111 == null))))?(((((map__66111.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66111.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66111):map__66111);\nvar node = map__66111__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66111__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66111__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app);\nvar reduction = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__66115,element){\nvar map__66116 = p__66115;\nvar map__66116__$1 = (((((!((map__66116 == null))))?(((((map__66116.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66116.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66116):map__66116);\nvar acc = map__66116__$1;\nvar done_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66116__$1,new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718));\nvar new_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66116__$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171));\nif(cljs.core.truth_(done_QMARK_)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(acc,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj,element);\n} else {\nvar map__66118 = element;\nvar map__66118__$1 = (((((!((map__66118 == null))))?(((((map__66118.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66118.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66118):map__66118);\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66118__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66118__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66118__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66118__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar map__66119 = dispatch;\nvar map__66119__$1 = (((((!((map__66119 == null))))?(((((map__66119.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66119.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66119):map__66119);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66119__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar remote_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes,cljs.core.set(cljs.core.keys(dispatch)));\nvar exec_QMARK_ = (function (){var and__4115__auto__ = action;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not((function (){var or__4126__auto__ = done_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\n}\n})());\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar fully_complete_QMARK_ = (function (){var and__4115__auto__ = (function (){var or__4126__auto__ = exec_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remote_set,complete_QMARK_));\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar state_before = cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app));\nvar updated_element = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar done_QMARK___$1 = cljs.core.not(fully_complete_QMARK_);\nvar new_acc = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),done_QMARK___$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_element)], null);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{if(cljs.core.truth_(action)){\n(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n} else {\n}\n}catch (e66122){var e_66796 = e66122;\nvar mutation_symbol_66797 = new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node);\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,338,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_66796,\"The `action` section of mutation\",mutation_symbol_66797,\"threw an exception.\"], null);\n}),null)),null,-2123742432);\n}\nif(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{var tx_66799 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app,env,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-before\",\"state-before\",759087843),state_before,new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_66799], null));\n}catch (e66123){var e_66802 = e66123;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),false,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.PersistentVector.EMPTY], null),elements);\nvar new_elements = new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171).cljs$core$IFn$_invoke$arity$1(reduction);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$run_actions_BANG_(app,p__66124){\nvar map__66125 = p__66124;\nvar map__66125__$1 = (((((!((map__66125 == null))))?(((((map__66125.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66125.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66125):map__66125);\nvar node = map__66125__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66125__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66125__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar new_elements = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_elements,element){\nvar map__66127 = element;\nvar map__66127__$1 = (((((!((map__66127 == null))))?(((((map__66127.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66127.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66127):map__66127);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66127__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66127__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66127__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66127__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__66128 = dispatch;\nvar map__66128__$1 = (((((!((map__66128 == null))))?(((((map__66128.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66128.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66128):map__66128);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66128__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar exec_QMARK_ = (function (){var and__4115__auto__ = action;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024))));\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar state_before = cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app));\nvar updated_node = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar new_acc = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_node);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n}catch (e66131){var e_66812 = e66131;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,367,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_66812,\"The `action` section threw an exception for mutation: \",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node)], null);\n}),null)),null,-211086494);\n}\nif(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{var tx_66813 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app,env,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-before\",\"state-before\",759087843),state_before,new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_66813], null));\n}catch (e66132){var e_66814 = e66132;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}),cljs.core.PersistentVector.EMPTY,elements);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$fully_complete_QMARK_(app,p__66133){\nvar map__66134 = p__66133;\nvar map__66134__$1 = (((((!((map__66134 == null))))?(((((map__66134.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66134.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66134):map__66134);\nvar tx_node = map__66134__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66134__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar element_complete_QMARK_ = (function (p__66136){\nvar map__66137 = p__66136;\nvar map__66137__$1 = (((((!((map__66137 == null))))?(((((map__66137.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66137.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66137):map__66137);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66137__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66137__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app);\nvar active_keys = clojure.set.union.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null], null), null),remotes);\nvar desired_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(active_keys,cljs.core.set(cljs.core.keys(dispatch)));\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(desired_set,complete_QMARK_));\n});\nreturn cljs.core.every_QMARK_(element_complete_QMARK_,elements);\n});\n/**\n * Removes the send node (if present) from the send queue on the given remote.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$remove_send_BANG_(p__66139,remote,txn_id,ele_idx){\nvar map__66140 = p__66139;\nvar map__66140__$1 = (((((!((map__66140 == null))))?(((((map__66140.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66140.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66140):map__66140);\nvar app = map__66140__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66140__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__66142 = cljs.core.deref(runtime_atom);\nvar map__66142__$1 = (((((!((map__66142 == null))))?(((((map__66142.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66142.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66142):map__66142);\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66142__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar old_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote);\nvar queue = cljs.core.filterv((function (p__66144){\nvar map__66145 = p__66144;\nvar map__66145__$1 = (((((!((map__66145 == null))))?(((((map__66145.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66145.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66145):map__66145);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66145__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66145__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\n}),old_queue);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),queue);\n});\n/**\n * Record a network result on the given txn/element.\n * If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n * queue so that remaining items can proceed, and schedules send processing.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$record_result_BANG_(var_args){\nvar G__66148 = arguments.length;\nswitch (G__66148) {\ncase 6:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ncase 5:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (p__66149,txn_id,ele_idx,remote,result,result_key){\nvar map__66150 = p__66149;\nvar map__66150__$1 = (((((!((map__66150 == null))))?(((((map__66150.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66150.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66150):map__66150);\nvar app = map__66150__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66150__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar active_queue = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar txn_idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,p__66152){\nvar map__66153 = p__66152;\nvar map__66153__$1 = (((((!((map__66153 == null))))?(((((map__66153.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66153.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66153):map__66153);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66153__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n}),(0),active_queue);\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\nif(not_found_QMARK_){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,413,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue!\"], null);\n}),null)),null,17958529);\n} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app,txn_id,ele_idx,remote,result){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6);\n\n/**\n * Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$compute_desired_ast_node(app,remote,tx_node,tx_element){\nvar map__66155 = tx_element;\nvar map__66155__$1 = (((((!((map__66155 == null))))?(((((map__66155.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66155.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66155):map__66155);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66155__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66155__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar state_before_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66155__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778));\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node,new cljs.core.Keyword(null,\"state-before-action\",\"state-before-action\",104906671),state_before_action], null));\nvar remote_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,remote);\nvar remote_desire = (cljs.core.truth_(remote_fn)?(remote_fn.cljs$core$IFn$_invoke$arity$1 ? remote_fn.cljs$core$IFn$_invoke$arity$1(env) : remote_fn.call(null,env)):null);\nvar desired_ast = ((((remote_desire === false) || ((remote_desire == null))))?null:((remote_desire === true)?original_ast_node:((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068)))))?new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(remote_desire):((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"type\",\"type\",1174270348)))))?remote_desire:(function (){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,434,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote dispatch for\",remote,\"returned an invalid value.\",remote_desire], null);\n}),null)),null,339988493);\n\nreturn remote_desire;\n})()\n\n))));\nvar query_transform = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"global-eql-transform\",\"global-eql-transform\",145441548));\nvar ast = (cljs.core.truth_((function (){var and__4115__auto__ = desired_ast;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn query_transform;\n} else {\nreturn and__4115__auto__;\n}\n})())?(query_transform.cljs$core$IFn$_invoke$arity$1 ? query_transform.cljs$core$IFn$_invoke$arity$1(desired_ast) : query_transform.call(null,desired_ast)):desired_ast);\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,444,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Desired tx from tx:\",edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(desired_ast,true)], null);\n}),null)),null,-1028301967);\n\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,445,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Desired tx at network layer:\",edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(ast,true)], null);\n}),null)),null,-477225811);\n\nvar G__66159 = tx_element;\nvar G__66159__$1 = (cljs.core.truth_(desired_ast)?cljs.core.assoc_in(G__66159,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425),remote], null),desired_ast):G__66159);\nif(cljs.core.truth_(ast)){\nreturn cljs.core.assoc_in(G__66159__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null),ast);\n} else {\nreturn G__66159__$1;\n}\n});\n/**\n * Generate a new send node and add it to the appropriate send queue. Returns the new send node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG_(p__66164,p__66165,ele_idx,remote){\nvar map__66166 = p__66164;\nvar map__66166__$1 = (((((!((map__66166 == null))))?(((((map__66166.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66166.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66166):map__66166);\nvar app = map__66166__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66166__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__66167 = p__66165;\nvar map__66167__$1 = (((((!((map__66167 == null))))?(((((map__66167.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66167.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66167):map__66167);\nvar tx_node = map__66167__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66167__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66167__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar update_handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app,(0));\n});\nvar ast = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null));\nvar handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_result_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app,id,ele_idx,remote,result);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_(app,remote,id,ele_idx);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app,(1));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app,(0));\n});\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\nif(cljs.core.truth_(ast)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([send_node], 0));\n\nreturn send_node;\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,476,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Mutation\",(function (){var G__66174 = tx_node;\nvar G__66174__$1 = (((G__66174 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330).cljs$core$IFn$_invoke$arity$1(G__66174));\nvar G__66174__$2 = (((G__66174__$1 == null))?null:cljs.core.get.cljs$core$IFn$_invoke$arity$2(G__66174__$1,ele_idx));\nvar G__66174__$3 = (((G__66174__$2 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477).cljs$core$IFn$_invoke$arity$1(G__66174__$2));\nif((G__66174__$3 == null)){\nreturn null;\n} else {\nreturn edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(G__66174__$3,true);\n}\n})(),\"returned false or nil. Skipping send.\"], null);\n}),null)),null,-553058247);\n\nhandler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(200),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null));\n\nreturn null;\n}\n});\n/**\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_element_sends_BANG_(app,tx_node,p__66181){\nvar map__66182 = p__66181;\nvar map__66182__$1 = (((((!((map__66182 == null))))?(((((map__66182.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66182.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66182):map__66182);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66182__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66182__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66182__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app));\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,remote){\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\nreturn node;\n} else {\nvar updated_node = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),(function (tx_element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node(app,remote,node,tx_element);\n})),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_(app,updated_node,idx,remote);\n\nreturn updated_node;\n}\n}),tx_node,to_dispatch);\n});\n/**\n * Returns true if the given node has no active network operations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK_(p__66190){\nvar map__66191 = p__66190;\nvar map__66191__$1 = (((((!((map__66191 == null))))?(((((map__66191.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66191.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66191):map__66191);\nvar tx_node = map__66191__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66191__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nreturn cljs.core.every_QMARK_((function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK__$_idle_QMARK__STAR_(p__66199){\nvar map__66200 = p__66199;\nvar map__66200__$1 = (((((!((map__66200 == null))))?(((((map__66200.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66200.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66200):map__66200);\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66200__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66200__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar in_progress = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(started_QMARK_,complete_QMARK_);\nreturn cljs.core.empty_QMARK_(in_progress);\n}),elements);\n});\n/**\n * Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n * is no such element.\n * \n *   remote-names is the set of legal remote names.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.element_with_work = (function com$fulcrologic$fulcro$algorithms$tx_processing$element_with_work(remote_names,p__66202){\nvar map__66203 = p__66202;\nvar map__66203__$1 = (((((!((map__66203 == null))))?(((((map__66203.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66203.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66203):map__66203);\nvar element = map__66203__$1;\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66203__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66203__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar todo = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remote_names,cljs.core.set(cljs.core.keys(dispatch)));\nvar remaining = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(todo,started_QMARK_);\nif(cljs.core.seq(remaining)){\nreturn element;\n} else {\nreturn null;\n}\n});\n/**\n * Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n *   on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n *   tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_next_send_BANG_(app,p__66217){\nvar map__66218 = p__66217;\nvar map__66218__$1 = (((((!((map__66218 == null))))?(((((map__66218.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66218.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66218):map__66218);\nvar tx_node = map__66218__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66218__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_(tx_node)){\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app);\nvar with_work = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.element_with_work,remotes);\nvar element = cljs.core.some(with_work,elements);\nif(cljs.core.truth_(element)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app,tx_node,element);\n} else {\nreturn tx_node;\n}\n} else {\nreturn tx_node;\n}\n});\n/**\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n *   multi-element nodes will only queue one remote operation at a time.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_sends_BANG_(app,p__66226){\nvar map__66227 = p__66226;\nvar map__66227__$1 = (((((!((map__66227 == null))))?(((((map__66227.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66227.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66227):map__66227);\nvar tx_node = map__66227__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66227__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66227__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app,(0));\n\nif(optimistic_QMARK_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app,node,element);\n}),tx_node,elements);\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_(app,tx_node);\n}\n});\n/**\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n *   to it.\n * \n *   Returns the tx-element with the remote marked complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_result_BANG_(app,tx_node,p__66231,remote){\nvar map__66232 = p__66231;\nvar map__66232__$1 = (((((!((map__66232 == null))))?(((((map__66232.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66232.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66232):map__66232);\nvar tx_element = map__66232__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66232__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66232__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar desired_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66232__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425));\nvar transmitted_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66232__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66232__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app,(0));\n\nvar result_66866 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\nvar handler_66867 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\nif(cljs.core.truth_(handler_66867)){\nvar env_66868 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app,tx_node,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"transacted-ast\",\"transacted-ast\",-442737948),original_ast_node,new cljs.core.Keyword(null,\"mutation-ast\",\"mutation-ast\",1077959891),cljs.core.get.cljs$core$IFn$_invoke$arity$2(desired_ast_nodes,remote),new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690),cljs.core.get.cljs$core$IFn$_invoke$arity$2(transmitted_ast_nodes,remote),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_66866], null));\ntry{(handler_66867.cljs$core$IFn$_invoke$arity$1 ? handler_66867.cljs$core$IFn$_invoke$arity$1(env_66868) : handler_66867.call(null,env_66868));\n}catch (e66239){var e_66871 = e66239;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,569,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_66871,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception.\"], null);\n}),null)),null,-257800035);\n}} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\n});\n/**\n * Distribute results and mark the remotes for those elements as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_element_results_BANG_(app,tx_node,p__66249){\nvar map__66250 = p__66249;\nvar map__66250__$1 = (((((!((map__66250 == null))))?(((((map__66250.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66250.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66250):map__66250);\nvar tx_element = map__66250__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66250__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66250__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_element,remote){\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\nreturn new_element;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_(app,tx_node,new_element,remote);\n}\n}),tx_element,cljs.core.keys(results));\n});\n/**\n * Walk all elements of the tx-node and call result dispatch handlers for any results that have\n *   not been distributed.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_results_BANG_(app,p__66252){\nvar map__66253 = p__66252;\nvar map__66253__$1 = (((((!((map__66253 == null))))?(((((map__66253.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66253.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66253):map__66253);\nvar tx_node = map__66253__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66253__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_(app,tx_node,element);\n}),elements));\n});\n/**\n * Report all progress items to any registered progress dispatch and clear them from the tx-node.\n *   Returns the updated tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG_(app,p__66259){\nvar map__66260 = p__66259;\nvar map__66260__$1 = (((((!((map__66260 == null))))?(((((map__66260.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66260.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66260):map__66260);\nvar tx_node = map__66260__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66260__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar get_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG__$_get_env_STAR_(remote,progress){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),remote,new cljs.core.Keyword(null,\"progress\",\"progress\",244323547),progress], null));\n});\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,p__66263){\nvar map__66264 = p__66263;\nvar map__66264__$1 = (((((!((map__66264 == null))))?(((((map__66264.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66264.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66264):map__66264);\nvar element = map__66264__$1;\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66264__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar progress = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66264__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66264__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66264__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar seq__66267_66886 = cljs.core.seq(progress);\nvar chunk__66268_66887 = null;\nvar count__66269_66888 = (0);\nvar i__66270_66889 = (0);\nwhile(true){\nif((i__66270_66889 < count__66269_66888)){\nvar vec__66287_66893 = chunk__66268_66887.cljs$core$IIndexed$_nth$arity$2(null,i__66270_66889);\nvar remote_66894 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__66287_66893,(0),null);\nvar value_66895 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__66287_66893,(1),null);\nvar env_66897 = get_env(remote_66894,value_66895);\nvar action_66898 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_66898)){\ntry{(action_66898.cljs$core$IFn$_invoke$arity$1 ? action_66898.cljs$core$IFn$_invoke$arity$1(env_66897) : action_66898.call(null,env_66897));\n}catch (e66290){var e_66899 = e66290;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,609,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__66267_66886,chunk__66268_66887,count__66269_66888,i__66270_66889,e_66899,env_66897,action_66898,vec__66287_66893,remote_66894,value_66895,map__66264,map__66264__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__66260,map__66260__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_66899,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node)], null);\n});})(seq__66267_66886,chunk__66268_66887,count__66269_66888,i__66270_66889,e_66899,env_66897,action_66898,vec__66287_66893,remote_66894,value_66895,map__66264,map__66264__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__66260,map__66260__$1,tx_node,elements))\n,null)),null,2005981992);\n}} else {\n}\n\n\nvar G__66903 = seq__66267_66886;\nvar G__66904 = chunk__66268_66887;\nvar G__66905 = count__66269_66888;\nvar G__66906 = (i__66270_66889 + (1));\nseq__66267_66886 = G__66903;\nchunk__66268_66887 = G__66904;\ncount__66269_66888 = G__66905;\ni__66270_66889 = G__66906;\ncontinue;\n} else {\nvar temp__5735__auto___66907 = cljs.core.seq(seq__66267_66886);\nif(temp__5735__auto___66907){\nvar seq__66267_66908__$1 = temp__5735__auto___66907;\nif(cljs.core.chunked_seq_QMARK_(seq__66267_66908__$1)){\nvar c__4556__auto___66909 = cljs.core.chunk_first(seq__66267_66908__$1);\nvar G__66910 = cljs.core.chunk_rest(seq__66267_66908__$1);\nvar G__66911 = c__4556__auto___66909;\nvar G__66912 = cljs.core.count(c__4556__auto___66909);\nvar G__66913 = (0);\nseq__66267_66886 = G__66910;\nchunk__66268_66887 = G__66911;\ncount__66269_66888 = G__66912;\ni__66270_66889 = G__66913;\ncontinue;\n} else {\nvar vec__66291_66914 = cljs.core.first(seq__66267_66908__$1);\nvar remote_66915 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__66291_66914,(0),null);\nvar value_66916 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__66291_66914,(1),null);\nvar env_66919 = get_env(remote_66915,value_66916);\nvar action_66920 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_66920)){\ntry{(action_66920.cljs$core$IFn$_invoke$arity$1 ? action_66920.cljs$core$IFn$_invoke$arity$1(env_66919) : action_66920.call(null,env_66919));\n}catch (e66294){var e_66922 = e66294;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,609,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__66267_66886,chunk__66268_66887,count__66269_66888,i__66270_66889,e_66922,env_66919,action_66920,vec__66291_66914,remote_66915,value_66916,seq__66267_66908__$1,temp__5735__auto___66907,map__66264,map__66264__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__66260,map__66260__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_66922,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node)], null);\n});})(seq__66267_66886,chunk__66268_66887,count__66269_66888,i__66270_66889,e_66922,env_66919,action_66920,vec__66291_66914,remote_66915,value_66916,seq__66267_66908__$1,temp__5735__auto___66907,map__66264,map__66264__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__66260,map__66260__$1,tx_node,elements))\n,null)),null,-493488001);\n}} else {\n}\n\n\nvar G__66923 = cljs.core.next(seq__66267_66908__$1);\nvar G__66924 = null;\nvar G__66925 = (0);\nvar G__66926 = (0);\nseq__66267_66886 = G__66923;\nchunk__66268_66887 = G__66924;\ncount__66269_66888 = G__66925;\ni__66270_66889 = G__66926;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),cljs.core.dissoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n}),tx_node,elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_tx_node_BANG_(app,p__66300){\nvar map__66301 = p__66300;\nvar map__66301__$1 = (((((!((map__66301 == null))))?(((((map__66301.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66301.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66301):map__66301);\nvar tx_node = map__66301__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66301__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app,tx_node)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_(app,com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app,com.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_(app,(function (){var G__66304 = tx_node;\nvar G__66304__$1 = ((optimistic_QMARK_)?com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app,G__66304):G__66304);\nif((!(optimistic_QMARK_))){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_(app,G__66304__$1);\n} else {\nreturn G__66304__$1;\n}\n})())));\n}\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes = (function com$fulcrologic$fulcro$algorithms$tx_processing$requested_refreshes(app,queue){\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (outer_acc,tx_node){\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app,tx_node);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,element){\nvar map__66305 = element;\nvar map__66305__$1 = (((((!((map__66305 == null))))?(((((map__66305.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66305.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66305):map__66305);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66305__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar refresh = new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(dispatch);\nif(cljs.core.truth_(refresh)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,cljs.core.set((refresh.cljs$core$IFn$_invoke$arity$1 ? refresh.cljs$core$IFn$_invoke$arity$1(env) : refresh.call(null,env))));\n} else {\nreturn acc;\n}\n}),outer_acc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330).cljs$core$IFn$_invoke$arity$1(tx_node));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$remotes_active_on_node(p__66311,remotes){\nvar map__66312 = p__66311;\nvar map__66312__$1 = (((((!((map__66312 == null))))?(((((map__66312.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66312.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66312):map__66312);\nvar tx_node = map__66312__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66312__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar active_on_element = (function (p__66322){\nvar map__66323 = p__66322;\nvar map__66323__$1 = (((((!((map__66323 == null))))?(((((map__66323.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66323.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66323):map__66323);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66323__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66323__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes__$1 = cljs.core.set(remotes);\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes__$1,cljs.core.set(cljs.core.keys(dispatch))),complete_QMARK_);\n});\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,ele){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(acc,active_on_element(ele));\n}),cljs.core.PersistentHashSet.EMPTY,elements);\n});\n/**\n * Calculate which remotes still have network activity to do on the given active queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.active_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$active_remotes(queue,remotes){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ra,n){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(ra,com.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node(n,remotes));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Run through the active queue and do a processing step.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG_(p__66367){\nvar map__66369 = p__66367;\nvar map__66369__$1 = (((((!((map__66369 == null))))?(((((map__66369.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66369.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66369):map__66369);\nvar app = map__66369__$1;\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66369__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66369__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\nvar temp__5733__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_(app,n);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar new_node = temp__5733__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\n} else {\nreturn new_queue;\n}\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app);\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app,new_queue);\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new_queue);\n\nif(cljs.core.seq(explicit_refresh)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\n} else {\n}\n\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,694,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Scheduling a render\"], null);\n}),null)),null,1887247817);\n\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1(app) : schedule_render_BANG_.call(null,app));\n\nreturn null;\n});\n/**\n * Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n * have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n * are allowed to).\n * \n * NOTE: any *remote* behaviors of `tx` will *still be async*.\n * \n * This function:\n * \n * * Runs the optimistic side of the mutation(s)\n * * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n *   but with the optimistic part already done.\n * * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n * \n * If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n * component so it can refresh immediately and avoid DOM input issues.\n * \n * Returns the new component props or the final state map if no component was used in the transaction.\n * \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$transact_sync_BANG_(app,tx,p__66399){\nvar map__66400 = p__66399;\nvar map__66400__$1 = (((((!((map__66400 == null))))?(((((map__66400.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66400.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66400):map__66400);\nvar options = map__66400__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66400__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar mutation_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(edn_query_language.core.query__GT_ast(tx));\nvar ast_node__GT_operation = cljs.core.zipmap(mutation_nodes,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (ast_node){\nreturn com.fulcrologic.fulcro.mutations.mutate.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),ast_node], null));\n}),mutation_nodes));\nvar map__66405 = cljs.core.group_by((function (p1__66396_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),null], null), null),cljs.core.set(cljs.core.keys((ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1 ? ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1(p1__66396_SHARP_) : ast_node__GT_operation.call(null,p1__66396_SHARP_)))));\n}),mutation_nodes);\nvar map__66405__$1 = (((((!((map__66405 == null))))?(((((map__66405.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66405.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66405):map__66405);\nvar optimistic = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66405__$1,true);\nvar mixed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66405__$1,false);\nvar optimistic_tx_node = ((cljs.core.seq(optimistic))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),optimistic], null)),options);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app,node),com.fulcrologic.fulcro.mutations.mutate);\n})():null);\nvar mixed_tx_node = ((cljs.core.seq(mixed))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),mixed], null)),options);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app,node),com.fulcrologic.fulcro.mutations.mutate);\n})():null);\nvar resulting_node_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nif(cljs.core.truth_(optimistic_tx_node)){\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app,optimistic_tx_node);\n} else {\n}\n\nif(cljs.core.truth_(mixed_tx_node)){\nvar node_66946 = com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app,mixed_tx_node);\nvar runtime_atom_66947 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app);\ncljs.core.reset_BANG_(resulting_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node_66946));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom_66947,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),cljs.core.conj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([node_66946], 0));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app,(20));\n} else {\n}\n\nif(cljs.core.truth_((function (){var and__4115__auto__ = component;\nif(cljs.core.truth_(and__4115__auto__)){\nvar and__4115__auto____$1 = (com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1(component) : com.fulcrologic.fulcro.components.component_QMARK_.call(null,component));\nif(cljs.core.truth_(and__4115__auto____$1)){\nreturn com.fulcrologic.fulcro.components.has_ident_QMARK_(component);\n} else {\nreturn and__4115__auto____$1;\n}\n} else {\nreturn and__4115__auto__;\n}\n})())){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app),cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"basis-t\",\"com.fulcrologic.fulcro.application/basis-t\",-1038783437),cljs.core.inc);\n\nvar _STAR_denormalize_time_STAR__orig_val__66447_66949 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\nvar _STAR_denormalize_time_STAR__temp_val__66448_66950 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"basis-t\",\"com.fulcrologic.fulcro.application/basis-t\",-1038783437).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app)));\n(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__66448_66950);\n\ntry{var state_map_66952 = (function (){var G__66449 = app;\nvar G__66449__$1 = (((G__66449 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__66449));\nif((G__66449__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__66449__$1);\n}\n})();\nvar ident_66953 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component);\nvar query_66954 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(component,state_map_66952);\nvar ui_props_66955 = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query_66954,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map_66952,ident_66953),state_map_66952);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(component,ui_props_66955);\n}finally {(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__66447_66949);\n}} else {\nif(cljs.core.truth_(goog.DEBUG)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,747,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen.\"], null);\n}),null)),null,-1559148229);\n} else {\n}\n}\n\nreturn cljs.core.deref(resulting_node_id);\n});\n/**\n * Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n *   that might be used by the transaction processing (or UI refresh).\n * \n *   Some that may be supported (depending on application settings):\n * \n *   - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n *   - `:ref` - ident. The component ident to include in the transaction env.\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\n *   - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n *  The ident-optimized render treats these as \"extras\".\n *   - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n *  components using these are the *only* things that will be refreshed in the UI.\n *  This can be used to avoid the overhead of looking for stale data when you know exactly what\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n * \n *   WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n *         rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n *         force a normal refresh via `app/render!`.\n * \n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n * \n *   NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n *   algorithm will influence their necessity.\n * \n *   Returns the transaction ID of the submitted transaction.\n *   \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$default_tx_BANG_(var_args){\nvar G__66485 = arguments.length;\nswitch (G__66485) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app,tx){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app,tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__66492,tx,p__66493){\nvar map__66494 = p__66492;\nvar map__66494__$1 = (((((!((map__66494 == null))))?(((((map__66494.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66494.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66494):map__66494);\nvar app = map__66494__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66494__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__66495 = p__66493;\nvar map__66495__$1 = (((((!((map__66495 == null))))?(((((map__66495.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66495.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66495):map__66495);\nvar options = map__66495__$1;\nvar synchronous_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66495__$1,new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nif(cljs.core.truth_(synchronous_QMARK_)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_(app,tx,options);\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1(app);\n\nvar map__66498 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),true], null),options], 0));\nvar map__66498__$1 = (((((!((map__66498 == null))))?(((((map__66498.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66498.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66498):map__66498);\nvar options__$1 = map__66498__$1;\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66498__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66498__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66498__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__66467_SHARP_){\nreturn (((p1__66467_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__66467_SHARP_)));\n}),tx));\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar refresh__$1 = (function (){var G__66504 = cljs.core.set(refresh);\nvar G__66504__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__66504,follow_on_reads):G__66504);\nif(cljs.core.truth_(ref)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__66504__$1,ref);\n} else {\nreturn G__66504__$1;\n}\n})();\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (s){\nvar G__66507 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(s,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),(function (v,n){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(v),n);\n}),node);\nvar G__66507__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__66507,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__66507);\nif(cljs.core.seq(only_refresh)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__66507__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\n} else {\nreturn G__66507__$1;\n}\n}));\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Abort any elements in the given send-queue that have the given abort id.\n * \n *   Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n *   virtual result will still be sent for that node.\n * \n *   Returns a new send-queue that no longer contains the aborted nodes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_elements_BANG_(p__66510,send_queue,abort_id){\nvar map__66511 = p__66510;\nvar map__66511__$1 = (((((!((map__66511 == null))))?(((((map__66511.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66511.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66511):map__66511);\nvar remote = map__66511__$1;\nvar abort_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66511__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nif(cljs.core.truth_(abort_BANG_)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,p__66517){\nvar map__66518 = p__66517;\nvar map__66518__$1 = (((((!((map__66518 == null))))?(((((map__66518.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66518.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66518):map__66518);\nvar send_node = map__66518__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66518__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66518__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66518__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar aid = (function (){var or__4126__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})();\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(aid,abort_id)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,send_node);\n} else {\nif(cljs.core.truth_(active_QMARK_)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,817,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Aborting an ACTIVE network request.\",abort_id], null);\n}),null)),null,1023025892);\n\n(abort_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_BANG_.cljs$core$IFn$_invoke$arity$2(remote,abort_id) : abort_BANG_.call(null,remote,abort_id));\n\nreturn result;\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,821,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Aborting a QUEUED network request.\",abort_id], null);\n}),null)),null,-1970567560);\n\nvar G__66523_66999 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Cancelled\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__66523_66999) : result_handler.call(null,G__66523_66999));\n\nreturn result;\n\n}\n}\n}),cljs.core.PersistentVector.EMPTY,send_queue);\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,827,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot abort network requests. The remote has no abort support!\"], null);\n}),null)),null,-937175618);\n\nreturn send_queue;\n}\n});\n/**\n * Implementation of abort when using this tx processing\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_BANG_(app,abort_id){\nvar map__66529 = com.fulcrologic.fulcro.components.any__GT_app(app);\nvar map__66529__$1 = (((((!((map__66529 == null))))?(((((map__66529.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66529.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66529):map__66529);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66529__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar runtime_state = cljs.core.deref(runtime_atom);\nvar map__66530 = runtime_state;\nvar map__66530__$1 = (((((!((map__66530 == null))))?(((((map__66530.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66530.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66530):map__66530);\nvar remotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66530__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517));\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66530__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar remote_names = cljs.core.keys(send_queues);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,remote_name){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,remote_name,com.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(remotes,remote_name),cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote_name),abort_id));\n}),cljs.core.PersistentArrayMap.EMPTY,remote_names);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","~:file","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",52],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async.interop","~$cljs.core.async.interop","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^K","~$>defn","~$com.fulcrologic.guardrails.core"],"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^[","^?","^@","^N","^N","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^[","~$com.fulcrologic.fulcro.algorithms.denormalize","^15","~$cljs.core","^16","^K","^K","~$goog","^17","~$com.fulcrologic.fulcro.specs","^18","~$inspect","^K","^Z","^Z","~$com.fulcrologic.fulcro.algorithms.tempid","^1:","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^1<","~$sched","^1<","~$enc","~$taoensso.encore","^1;","^1;","~$s","^@","^X","^X","^13","^13","^11","^11","~$futil","~$com.fulcrologic.fulcro.algorithms.do-not-use","^1?","^1?","^@","^@","~$fdn","^15","~$tempid","^1:","^1A","^1A"],"~:seen",["^P",["~:require"]],"~:uses",["^ ","~$schedule!","^1<","^J","^K","^L","^K","^M","^N","~$=>","^N","~$|","^N"],"~:require-macros",["^ ","^?","^@","^N","^N","^10","^11","^12","^13","^16","^16","^K","^K","^19","^K","~$m","^1;","^1>","^1?","^1;","^1;","~$s","^@","^13","^13","^11","^11","^1?","^1?","^@","^@"],"~:form",["~#list",["~$ns","^R","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ",["^1K",["^1E",["^Z","~:as","^Y"],["^?","^1M","~$s"],["^X","^1M","^W"],["^1:","^1M","^1C"],["^15","^1M","^1B"],["^1A","^1M","^1@"],["^1<","^1M","^1=","~:refer",["^1G"]],["^1;","^1M","~$m"],["^13","^1M","^12"],["^18"],["^K","^1M","^19","^1N",["^J","^L"]],"^18",["^N","^1N",["^M","^1H","~$|"]],["^[","^1M","^14"],["^1?","^1M","^1>"],["^11","^1M","^10"]]]]],"~:flags",["^ ","^1E",["^P",[]]],"~:js-deps",["^ "],"~:deps",["^17","^16","^Z","^@","^X","^1:","^15","^1A","^1<","^1;","^13","^18","^K","^N","^[","^1?","^11"]],"^T","^R","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],"~:compiled-at",1599160995838,"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing\n  \"The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. \"\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as futil]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched :refer [schedule!]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.specs]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as inspect :refer [ido ilet]]\n    com.fulcrologic.fulcro.specs\n    [com.fulcrologic.guardrails.core :refer [>defn => |]]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(declare schedule-activation! process-queue! remove-send!)\n\n(>defn app->remotes\n  \"Returns the remotes map from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remotes]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes))\n\n(>defn app->remote-names\n  \"Returns a set of the names of the remotes from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remote-names]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes keys set))\n\n(>defn extract-parallel\n  \"Splits the given send queue into two send queues:\n  [parallel-items sequential-items].\"\n  [sends]\n  [(s/coll-of ::send-node :kind vector?) => (s/cat :p ::send-queue :rest ::send-queue)]\n  (let [parallel? (fn [{:keys [::options]}]\n                    (boolean (or (:parallel? options) (::parallel? options))))\n        {parallel   true\n         sequential false} (group-by parallel? sends)]\n    [(vec parallel) (vec sequential)]))\n\n(>defn every-ast?\n  \"Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\"\n  [ast-node-or-tree test]\n  [::ast fn? => boolean?]\n  (if (= :root (:type ast-node-or-tree))\n    (every? test (:children ast-node-or-tree))\n    (test ast-node-or-tree)))\n\n(>defn mutation-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(= :call (:type %))))\n\n(>defn query-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(not= :call (:type %))))\n\n(>defn sort-queue-writes-before-reads\n  \"Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes.\"\n  [send-queue]\n  [::send-queue => ::send-queue]\n  (let [[active-queue send-queue] (split-with ::active? send-queue)\n        id-sequence (mapv (fn [n] (-> n first ::id)) (partition-by ::id send-queue))\n        clusters    (group-by ::id (vec send-queue))\n        {:keys [reads writes]} (reduce\n                                 (fn [result id]\n                                   (let [[{:keys [::ast] :as n} & _ :as cluster] (get clusters id)]\n                                     (cond\n                                       (nil? ast) result\n                                       (query-ast? ast) (update result :reads into cluster)\n                                       (mutation-ast? ast) (update result :writes into cluster)\n                                       :else result)))\n                                 {:reads [] :writes []}\n                                 id-sequence)\n        send-queue  (into [] (concat active-queue writes reads))]\n    send-queue))\n\n(>defn top-keys\n  [{:keys [type key children] :as ast}]\n  [::ast => (s/coll-of :edn-query-language.ast/key)]\n  (if (= :root type)\n    (into #{} (map :key) children)\n    #{key}))\n\n(>defn combine-sends\n  \"Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue.\"\n  [app remote-name send-queue]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::send-queue => (s/keys :opt [::send-node] :req [::send-queue])]\n  (let [[active-nodes send-queue] (split-with ::active? send-queue)\n        send-queue        (sort-queue-writes-before-reads (vec send-queue))\n        id-to-send        (-> send-queue first ::id)\n        options           (-> send-queue first ::options)\n        [to-send to-defer] (split-with #(= id-to-send (::id %)) send-queue)\n        tx                (reduce\n                            (fn [acc {:keys [::ast]}]\n                              (let [tx (futil/ast->query ast)]\n                                (into acc tx)))\n                            []\n                            to-send)\n        ast               (eql/query->ast tx)\n        combined-node-id  (tempid/uuid)\n        combined-node-idx 0\n        combined-node     {::id             combined-node-id\n                           ::idx            combined-node-idx\n                           ::ast            ast\n                           ::options        options\n                           ::update-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [update-handler]} to-send]\n                                                (when update-handler\n                                                  (update-handler combined-result))))\n                           ::result-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [ast result-handler]} to-send]\n                                                (let [new-body (if (map? body)\n                                                                 (select-keys body (top-keys ast))\n                                                                 body)\n                                                      result   (assoc combined-result :body new-body)]\n                                                  (inspect/ilet [{:keys [status-code body]} result]\n                                                    (if (= 200 status-code)\n                                                      (inspect/send-finished! app remote-name combined-node-id body)\n                                                      (inspect/send-failed! app combined-node-id (str status-code))))\n                                                  (result-handler result)))\n                                              (remove-send! app remote-name combined-node-id combined-node-idx))\n                           ::active?        true}]\n    (if (seq to-send)\n      {::send-node  combined-node\n       ::send-queue (into [] (concat active-nodes [combined-node] to-defer))}\n      {::send-queue send-queue})))\n\n(>defn net-send!\n  \"Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions.\"\n  [app send-node remote-name]\n  [:com.fulcrologic.fulcro.application/app ::send-node :com.fulcrologic.fulcro.application/remote-name => any?]\n  (enc/if-let [remote    (get (app->remotes app) remote-name)\n               transmit! (get remote :transmit!)]\n    (try\n      (inspect/ilet [tx (futil/ast->query (::ast send-node))]\n        (inspect/send-started! app remote-name (::id send-node) tx))\n      (transmit! remote send-node)\n      (catch #?(:cljs :default :clj Exception) e\n        (log/error e \"Send threw an exception for tx:\" (futil/ast->query (::ast send-node)))\n        (try\n          (inspect/ido\n            (inspect/send-failed! app (::id send-node) \"Transmit Exception\"))\n          ((::result-handler send-node) {:status-code      500\n                                         :client-exception e})\n          (catch #?(:cljs :default :clj Exception) e\n            (log/fatal e \"Error handler failed to handle exception!\")))))\n    (do\n      (log/error \"Transmit was not defined on remote\" remote-name)\n      ((::result-handler send-node) {:status-code 500\n                                     :message     \"Transmit missing on remote.\"}))))\n\n(>defn process-send-queues!\n  \"Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => ::send-queues]\n  (let [send-queues     (-> runtime-atom deref ::send-queues)\n        remote-names    (app->remote-names app)\n        operations      (atom [])\n        new-send-queues (reduce\n                          (fn [new-send-queues remote]\n                            (let [send-queue (get send-queues remote [])\n                                  [p serial] (extract-parallel send-queue)\n                                  front      (first serial)]\n                              ;; parallel items are removed from the queues, since they don't block anything\n                              (doseq [item p]\n                                (swap! operations conj #(net-send! app item remote)))\n                              ;; sequential items are kept in queue to prevent out-of-order operation\n                              (if (::active? front)\n                                (assoc new-send-queues remote serial)\n                                (let [{::keys [send-queue send-node]} (combine-sends app remote serial)]\n                                  (when send-node\n                                    (swap! operations conj #(net-send! app send-node remote)))\n                                  (assoc new-send-queues remote send-queue)))))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)\n    ;; Actual net sends are done after we set the queues, in case the remote behave synchronously and immediately gives\n    ;; results (like errors). Otherwise, the queue updates of those handlers would be overwritten by our swap on the\n    ;; prior line\n    (doseq [op @operations]\n      (op))\n    new-send-queues))\n\n(>defn tx-node\n  ([tx]\n   [::tx => ::tx-node]\n   (tx-node tx {}))\n  ([tx options]\n   [::tx ::options => ::tx-node]\n   (let [ast       (eql/query->ast tx)\n         ast-nodes (:children ast)\n         elements  (into []\n                     (comp\n                       (filter (fn txfilt* [n] (= :call (:type n))))\n                       (map-indexed\n                         (fn ->txnode* [idx ast-node]\n                           {::idx               idx\n                            ::original-ast-node ast-node\n                            ::started?          #{}\n                            ::complete?         #{}\n                            ::results           {}\n                            ::dispatch          {}})))\n                     ast-nodes)]\n     {::id       (tempid/uuid)\n      ::created  (futil/now)\n      ::options  options\n      ::tx       tx\n      ::elements elements})))\n\n(>defn build-env\n  ([app {::keys [options] :as tx-node} addl]\n   [:com.fulcrologic.fulcro.application/app ::tx-node map? => map?]\n   (let [{:keys [ref component]} options]\n     (cond-> (merge addl {:state (-> app :com.fulcrologic.fulcro.application/state-atom)\n                          :app   app})\n       options (assoc ::options options)\n       ref (assoc :ref ref)\n       component (assoc :component component))))\n  ([app {:keys [::options] :as tx-node}]\n   [:com.fulcrologic.fulcro.application/app ::tx-node => map?]\n   (build-env app tx-node {})))\n\n(>defn dispatch-elements\n  \"Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node.\"\n  [tx-node env dispatch-fn]\n  [::tx-node map? any? => ::tx-node]\n  (let [do-dispatch  (fn run* [env]\n                       (try\n                         (dispatch-fn env)\n                         (catch #?(:clj Exception :cljs :default) e\n                           (log/error e \"Dispatch for mutation\" (some-> env :ast futil/ast->query) \"failed with an exception. No dispatch generated.\")\n                           {})))\n        dispatch     (fn dispatch* [{:keys [::original-ast-node] :as ele}]\n                       (let [{:keys [type]} original-ast-node\n                             env (assoc env :ast original-ast-node)]\n                         (cond-> ele\n                           (= :call type) (assoc ::dispatch (do-dispatch env)))))\n        dispatch-all (fn [eles] (mapv dispatch eles))]\n    (update tx-node ::elements dispatch-all)))\n\n(defn application-rendered!\n  \"Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app} options]\n  (when (some #(boolean (-> % ::options :after-render?)) (-> runtime-atom deref ::submission-queue))\n    (swap! runtime-atom update ::submission-queue\n      (fn [queue] (mapv (fn [node] (update node ::options dissoc :after-render?)) queue)))\n    (schedule-activation! app 0)))\n\n(>defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [{blocked true ready false} (group-by (comp boolean :after-render? ::options) (::submission-queue @runtime-atom))\n        dispatched-nodes (mapv #(dispatch-elements % (build-env app %) m/mutate) ready)]\n    (swap! runtime-atom (fn [a]\n                          (-> a\n                            (update ::active-queue #(reduce conj % dispatched-nodes))\n                            (assoc ::submission-queue (vec blocked)))))\n    (process-queue! app)))\n\n(>defn schedule-activation!\n  \"Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::activation-scheduled? activate-submissions! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-activation! app 0)))\n\n(>defn schedule-queue-processing!\n  \"Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::queue-processing-scheduled? process-queue! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-queue-processing! app 0)))\n\n(>defn schedule-sends!\n  \"Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::sends-scheduled? process-send-queues! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-sends! app 0)))\n\n(>defn advance-actions!\n  \"Runs any incomplete and non-blocked optimistic operations on a node.\"\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [remotes      (app->remote-names app)\n        reduction    (reduce\n                       (fn [{:keys [done? new-elements] :as acc} element]\n                         (if done?\n                           (update acc :new-elements conj element)\n                           (let [{::keys [complete? dispatch original-ast-node idx]} element\n                                 {:keys [action]} dispatch\n                                 remote-set      (set/intersection remotes (set (keys dispatch)))\n                                 exec?           (and action (not (or done? (complete? :action))))\n                                 fully-complete? (and (or exec? (complete? :action)) (empty? (set/difference remote-set complete?)))\n                                 state-before    (-> app :com.fulcrologic.fulcro.application/state-atom deref)\n                                 updated-element (if exec? (-> element\n                                                             (assoc ::state-before-action state-before)\n                                                             (update ::complete? conj :action)) element)\n                                 done?           (not fully-complete?)\n                                 new-acc         {:done?        done?\n                                                  :new-elements (conj new-elements updated-element)}\n                                 env             (build-env app node {:ast original-ast-node})]\n                             (when exec?\n                               (try\n                                 (when action\n                                   (action env))\n                                 (catch #?(:cljs :default :clj Exception) e\n                                   (let [mutation-symbol (:dispatch-key original-ast-node)]\n                                     (log/error e \"The `action` section of mutation\" mutation-symbol \"threw an exception.\"))))\n                               (ilet [tx (eql/ast->expr original-ast-node true)]\n                                 (inspect/optimistic-action-finished! app env {:tx-id        (str id \"-\" idx)\n                                                                               :state-before state-before\n                                                                               :tx           tx})))\n                             new-acc)))\n                       {:done? false :new-elements []}\n                       elements)\n        new-elements (:new-elements reduction)]\n    (assoc node ::elements new-elements)))\n\n(>defn run-actions!\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [new-elements (reduce\n                       (fn [new-elements element]\n                         (let [{::keys [idx complete? dispatch original-ast-node]} element\n                               {:keys [action]} dispatch\n                               exec?        (and action (not (complete? :action)))\n                               state-before (-> app :com.fulcrologic.fulcro.application/state-atom deref)\n                               updated-node (if exec? (-> element\n                                                        (assoc ::state-before-action state-before)\n                                                        (update ::complete? conj :action)) element)\n                               new-acc      (conj new-elements updated-node)\n                               env          (build-env app node {:ast original-ast-node})]\n                           (when exec?\n                             (try\n                               (action env)\n                               (catch #?(:cljs :default :clj Exception) e\n                                 (log/error e \"The `action` section threw an exception for mutation: \" (:dispatch-key original-ast-node))))\n                             (ilet [tx (eql/ast->expr original-ast-node true)]\n                               (inspect/optimistic-action-finished! app env {:tx-id        (str id \"-\" idx)\n                                                                             :state-before state-before\n                                                                             :tx           tx})))\n                           new-acc))\n                       []\n                       elements)]\n    (assoc node ::elements new-elements)))\n\n(>defn fully-complete?\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => boolean?]\n  (let [element-complete? (fn [{:keys [::dispatch ::complete?]}]\n                            (let [remotes     (app->remote-names app)\n                                  active-keys (set/union #{:action} remotes)\n                                  desired-set (set/intersection active-keys (set (keys dispatch)))]\n                              (empty? (set/difference desired-set complete?))))]\n    (every? element-complete? elements)))\n\n(>defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} remote txn-id ele-idx]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::id ::idx => any?]\n  (let [{:keys [::send-queues]} @runtime-atom\n        old-queue (get send-queues remote)\n        queue     (filterv (fn [{:keys [::id ::idx]}]\n                             (not (and (= txn-id id) (= ele-idx idx)))) old-queue)]\n    (swap! runtime-atom assoc-in [::send-queues remote] queue)))\n\n(>defn record-result!\n  \"Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.\"\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} txn-id ele-idx remote result result-key]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? keyword? => any?]\n   (let [active-queue (::active-queue @runtime-atom)\n         txn-idx      (reduce\n                        (fn [idx {:keys [::id]}]\n                          (if (= id txn-id)\n                            (reduced idx)\n                            (inc idx)))\n                        0\n                        active-queue)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue!\")\n       (swap! runtime-atom assoc-in [::active-queue txn-idx ::elements ele-idx result-key remote] result))))\n  ([app txn-id ele-idx remote result]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? => any?]\n   (record-result! app txn-id ele-idx remote result ::results)))\n\n(>defn compute-desired-ast-node\n  \"Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\"\n  [app remote tx-node tx-element]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::tx-node ::tx-element => ::tx-element]\n  (let [{::keys [dispatch original-ast-node state-before-action]} tx-element\n        env             (build-env app tx-node {:ast                 original-ast-node\n                                                :state-before-action state-before-action})\n        remote-fn       (get dispatch remote)\n        remote-desire   (when remote-fn (remote-fn env))\n        desired-ast     (cond\n                          (or (false? remote-desire) (nil? remote-desire)) nil\n                          (true? remote-desire) original-ast-node\n                          (and (map? remote-desire) (contains? remote-desire :ast)) (:ast remote-desire)\n                          (and (map? remote-desire) (contains? remote-desire :type)) remote-desire\n                          :else (do\n                                  (log/error \"Remote dispatch for\" remote \"returned an invalid value.\" remote-desire)\n                                  remote-desire))\n        ;; The EQL transform from fulcro app config ONLY affects the network layer (the AST we put on the send node).\n        ;; The response gets dispatched on network return, but the original query\n        ;; is needed at the top app layer so that :pre-merge can use the complete query\n        ;; as opposed to the pruned one.\n        query-transform (ah/app-algorithm app :global-eql-transform)\n        ast             (if (and desired-ast query-transform)\n                          (query-transform desired-ast)\n                          desired-ast)]\n    (log/debug \"Desired tx from tx:\" (eql/ast->expr desired-ast true))\n    (log/debug \"Desired tx at network layer:\" (eql/ast->expr ast true))\n    (cond-> tx-element\n      desired-ast (assoc-in [::desired-ast-nodes remote] desired-ast)\n      ast (assoc-in [::transmitted-ast-nodes remote] ast))))\n\n(>defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue. Returns the new send node.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} {::keys [id options] :as tx-node} ele-idx remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::idx :com.fulcrologic.fulcro.application/remote-name\n   => (s/nilable ::send-node)]\n  (let [update-handler (fn progress-handler* [result]\n                         (record-result! app id ele-idx remote result ::progress)\n                         (schedule-queue-processing! app 0))\n        ast            (get-in tx-node [::elements ele-idx ::transmitted-ast-nodes remote])\n        handler        (fn result-handler* [result]\n                         (record-result! app id ele-idx remote result)\n                         (remove-send! app remote id ele-idx)\n                         (schedule-sends! app 1)\n                         (schedule-queue-processing! app 0))\n        send-node      {::id             id\n                        ::idx            ele-idx\n                        ::ast            ast\n                        ::options        options\n                        ::active?        false\n                        ::result-handler handler\n                        ::update-handler update-handler}]\n    (if ast\n      (do\n        (swap! runtime-atom update-in [::send-queues remote] (fnil conj []) send-node)\n        send-node)\n      (do\n        (log/debug \"Mutation\" (some-> tx-node ::elements (get ele-idx) ::original-ast-node (eql/ast->expr true)) \"returned false or nil. Skipping send.\")\n        (handler {:status-code 200 :body {}})\n        nil))))\n\n(>defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {:keys [::idx ::dispatch ::started?]}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-node]\n  (let [remotes     (set/intersection (set (keys dispatch)) (app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::elements idx ::started?] #{}) remote)\n          node\n          (let [updated-node (-> node\n                               (update-in [::elements idx] (fn [tx-element] (compute-desired-ast-node app remote node tx-element)))\n                               (update-in [::elements idx ::started?] conj remote))]\n            (add-send! app updated-node idx remote)\n            updated-node)))\n      tx-node\n      to-dispatch)))\n\n(>defn idle-node?\n  \"Returns true if the given node has no active network operations.\"\n  [{:keys [::elements] :as tx-node}]\n  [::tx-node => boolean?]\n  (every?\n    (fn idle?* [{:keys [::started? ::complete?]}]\n      (let [in-progress (set/difference started? complete?)]\n        (empty? in-progress)))\n    elements))\n\n(>defn element-with-work\n  \"Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names.\"\n  [remote-names {:keys [::dispatch ::started?] :as element}]\n  [:com.fulcrologic.fulcro.application/remote-names ::tx-element => (s/nilable ::tx-element)]\n  (let [todo      (set/intersection remote-names (set (keys dispatch)))\n        remaining (set/difference todo started?)]\n    (when (seq remaining)\n      element)))\n\n(>defn queue-next-send!\n  \"Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (if (idle-node? tx-node)\n    (let [remotes   (app->remote-names app)\n          with-work (partial element-with-work remotes)\n          element   (some with-work elements)]\n      (if element\n        (queue-element-sends! app tx-node element)\n        tx-node))\n    tx-node))\n\n(>defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::options ::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (schedule-sends! app 0)\n    (if optimistic?\n      (reduce\n        (fn [node element]\n          (queue-element-sends! app node element))\n        tx-node\n        elements)\n      (queue-next-send! app tx-node))))\n\n(>defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {::keys [results dispatch desired-ast-nodes transmitted-ast-nodes original-ast-node] :as tx-element} remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element keyword? => ::tx-element]\n  (schedule-queue-processing! app 0)\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (build-env app tx-node {:dispatch        dispatch\n                                        :transacted-ast  original-ast-node\n                                        :mutation-ast    (get desired-ast-nodes remote)\n                                        :transmitted-ast (get transmitted-ast-nodes remote)\n                                        :result          result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception.\"))))))\n  (update tx-element ::complete? conj remote))\n\n(>defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::results ::complete?] :as tx-element}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-element]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(>defn distribute-results!\n  \"Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (assoc tx-node\n    ::elements (mapv\n                 (fn [element] (distribute-element-results! app tx-node element))\n                 elements)))\n\n(>defn update-progress!\n  \"Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [get-env (fn get-env* [remote progress] (build-env app tx-node {:remote remote :progress progress}))]\n    (reduce\n      (fn [node {::keys [idx progress dispatch original-ast-node] :as element}]\n        (doseq [[remote value] progress]\n          (let [env    (get-env remote value)\n                action (get dispatch :progress-action)]\n            (when action\n              (try\n                (action env)\n                (catch #?(:cljs :default :clj Exception) e\n                  (log/error e \"Progress action threw an exception in mutation\" (:dispatch-key original-ast-node)))))))\n        (update-in node [::elements idx] dissoc ::progress))\n      tx-node\n      elements)))\n\n(>defn process-tx-node!\n  [app {:keys [::options] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => (s/nilable ::tx-node)]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (if (fully-complete? app tx-node)\n      nil\n      (-> tx-node\n        (cond->>\n          optimistic? (run-actions! app)\n          (not optimistic?) (advance-actions! app))\n        (->>\n          (queue-sends! app)\n          (update-progress! app)\n          (distribute-results! app))))))\n\n(>defn requested-refreshes [app queue]\n  [:com.fulcrologic.fulcro.application/app (s/coll-of ::tx-node) => set?]\n  \"Returns a set of refreshes that have been requested by active mutations in the queue\"\n  (reduce\n    (fn [outer-acc tx-node]\n      (let [env (build-env app tx-node)]\n        (reduce\n          (fn [acc element]\n            (let [{::keys [dispatch]} element\n                  refresh (:refresh dispatch)]\n              (if refresh\n                (into acc (set (refresh env)))\n                acc)))\n          outer-acc\n          (::elements tx-node))))\n    #{}\n    queue))\n\n(>defn remotes-active-on-node\n  \"Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\"\n  [{::keys [elements] :as tx-node} remotes]\n  [::tx-node :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/remote-names]\n  (let [active-on-element (fn [{::keys [dispatch complete?]}]\n                            (let [remotes (set remotes)]\n                              (-> remotes\n                                (set/intersection (set (keys dispatch)))\n                                (set/difference complete?))))]\n    (reduce\n      (fn [acc ele]\n        (set/union acc (active-on-element ele)))\n      #{}\n      elements)))\n\n(>defn active-remotes\n  \"Calculate which remotes still have network activity to do on the given active queue.\"\n  [queue remotes]\n  [::active-queue :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/active-remotes]\n  (reduce\n    (fn [ra n]\n      (set/union ra (remotes-active-on-node n remotes)))\n    #{}\n    queue))\n\n(>defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           (::active-queue @runtime-atom))\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (app->remote-names app)\n        schedule-render! (ah/app-algorithm app :schedule-render!)\n        explicit-refresh (requested-refreshes app new-queue)\n        remotes-active?  (active-remotes new-queue remotes)]\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (swap! runtime-atom assoc ::active-queue new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (log/debug \"Scheduling a render\")\n    (schedule-render! app)\n    nil))\n\n(defn transact-sync!\n  \"Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   \"\n  [app tx {:keys [component] :as options}]\n  (let [mutation-nodes      (:children (eql/query->ast tx))\n        ast-node->operation (zipmap mutation-nodes (map (fn [ast-node] (m/mutate {:ast ast-node})) mutation-nodes))\n        {optimistic true\n         mixed      false} (group-by #(= #{:action :result-action} (-> (ast-node->operation %) keys set)) mutation-nodes)\n        optimistic-tx-node  (when (seq optimistic)\n                              (let [node (tx-node (eql/ast->query {:type :root :children optimistic}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        mixed-tx-node       (when (seq mixed)\n                              (let [node (tx-node (eql/ast->query {:type :root :children mixed}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        resulting-node-id   (atom nil)]\n    (when optimistic-tx-node (run-actions! app optimistic-tx-node))\n    (when mixed-tx-node\n      (let [node         (run-actions! app mixed-tx-node)\n            runtime-atom (:com.fulcrologic.fulcro.application/runtime-atom app)]\n        (reset! resulting-node-id (::id node))\n        (swap! runtime-atom update ::active-queue conj node)\n        (schedule-queue-processing! app 20)))\n    (if (and component (comp/component? component) (comp/has-ident? component))\n      (do\n        ;; Tick the clock...can't access app/tick! without a circular ns ref...\n        (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update :com.fulcrologic.fulcro.application/basis-t inc)\n        (binding [fdn/*denormalize-time* (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/basis-t)]\n          (let [state-map (some-> app :com.fulcrologic.fulcro.application/state-atom deref)\n                ident     (comp/get-ident component)\n                query     (comp/get-query component state-map)\n                ui-props  (fdn/db->tree query (get-in state-map ident) state-map)]\n            (comp/tunnel-props! component ui-props))))\n      (when #?(:cljs js/goog.DEBUG :clj true)\n        (log/warn \"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen.\")))\n    @resulting-node-id))\n\n(defn default-tx!\n  \"Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  ([app tx]\n   [:com.fulcrologic.fulcro.application/app ::tx => ::id]\n   (default-tx! app tx {}))\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} tx {:keys [synchronous?] :as options}]\n   [:com.fulcrologic.fulcro.application/app ::tx ::options => ::id]\n   (if synchronous?\n     (transact-sync! app tx options)\n     (do\n       (schedule-activation! app)\n       (let [{:keys [refresh only-refresh ref] :as options} (merge {:optimistic? true} options)\n             follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n             node            (tx-node tx options)\n             accumulate      (fn [r items] (into (set r) items))\n             refresh         (cond-> (set refresh)\n                               (seq follow-on-reads) (into follow-on-reads)\n                               ref (conj ref))]\n         (swap! runtime-atom (fn [s] (cond-> (update s ::submission-queue (fn [v n] (conj (vec v) n)) node)\n                                       ;; refresh sets are cumulative because rendering is debounced\n                                       (seq refresh) (update :com.fulcrologic.fulcro.application/to-refresh accumulate refresh)\n                                       (seq only-refresh) (update :com.fulcrologic.fulcro.application/only-refresh accumulate only-refresh))))\n         (::id node))))))\n\n(defn- abort-elements!\n  \"Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes.\"\n  [{:keys [abort!] :as remote} send-queue abort-id]\n  (if abort!\n    (reduce\n      (fn [result {::keys [active? options result-handler] :as send-node}]\n        (let [aid (or (-> options ::abort-id) (-> options :abort-id))]\n          (cond\n            (not= aid abort-id) (do\n                                  (conj result send-node))\n            active? (do\n                      (log/debug \"Aborting an ACTIVE network request.\" abort-id)\n                      (abort! remote abort-id)\n                      result)\n            :otherwise (do\n                         (log/debug \"Aborting a QUEUED network request.\" abort-id)\n                         (result-handler {:status-text \"Cancelled\" ::aborted? true})\n                         result))))\n      []\n      send-queue)\n    (do\n      (log/error \"Cannot abort network requests. The remote has no abort support!\")\n      send-queue)))\n\n(defn abort!\n  \"Implementation of abort when using this tx processing\"\n  [app abort-id]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} (comp/any->app app)\n        runtime-state   @runtime-atom\n        {:com.fulcrologic.fulcro.application/keys [remotes]\n         ::keys                                   [send-queues]} runtime-state\n        remote-names    (keys send-queues)\n        new-send-queues (reduce\n                          (fn [result remote-name]\n                            (assoc result remote-name (abort-elements!\n                                                        (get remotes remote-name)\n                                                        (get send-queues remote-name) abort-id)))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)))\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","app","cljs.core/deref","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","cljs.core/keys","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","sends","map__65904","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","parallel?","p__65906","map__65909","options","cljs.core/boolean","or__4126__auto__","parallel","sequential","cljs.core/group-by","cljs.core/vec","com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","ast-node-or-tree","test","cljs.core._EQ_","cljs.core/every?","com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","p1__65915#","com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","p1__65919#","cljs.core.not_EQ_","com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","send-queue","vec__65921","cljs.core.nth","map__65924","active-queue","cljs.core/split-with","id-sequence","cljs.core.mapv","n","cljs.core/first","cljs.core.partition_by","clusters","reads","writes","cljs.core.reduce","result","id","vec__65925","seq__65926","cljs.core/seq","first__65927","cljs.core/next","map__65928","ast","_","cluster","cljs.core.update","cljs.core/into","cljs.core.into","cljs.core.concat","p__65937","map__65938","com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","type","key","children","cljs.core.map","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","remote-name","vec__65944","vec__65947","active-nodes","id-to-send","to-send","to-defer","p1__65943#","tx","p__65950","map__65951","acc","com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","edn-query-language.core/query->ast","combined-node-id","com.fulcrologic.fulcro.algorithms.tempid.uuid","combined-node-idx","combined-node","p__65956","map__65957","body","combined-result","seq__65959","chunk__65960","count__65961","i__65962","map__65974","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__65980","update-handler","p__65982","map__65983","seq__65985","chunk__65986","count__65987","i__65988","map__66012","map__66017","result-handler","new-body","cljs.core/map?","cljs.core/select-keys","cljs.core.assoc","and__4115__auto__","js/goog.DEBUG","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","map__66015","e","e66014","map__66022","e66021","status-code","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","send-node","b2__45408__auto__","remote","transmit!","e66025","e66032","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","e66026","e66029","G__66031","fexpr__66030","G__66037","fexpr__66036","G__66039","fexpr__66038","p__66040","map__66041","com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","runtime-atom","send-queues","remote-names","operations","cljs.core.atom","new-send-queues","vec__66045","p","serial","front","seq__66050","chunk__66051","count__66052","i__66053","item","cljs.core.swap_BANG_","cljs.core/conj","map__66054","cljs.core/assoc","seq__66056","chunk__66057","count__66058","i__66059","op","var_args","G__66061","com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","js/Error","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node","ast-nodes","elements","cljs.core.comp","cljs.core.filter","cljs.core.map_indexed","idx","ast-node","com.fulcrologic.fulcro.algorithms.do-not-use/now","G__66063","com.fulcrologic.fulcro.algorithms.tx-processing/build-env","p__66064","map__66065","p__66070","map__66071","tx-node","addl","map__66067","ref","component","G__66069","cljs.core.merge","com.fulcrologic.fulcro.algorithms.tx_processing.build_env","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","env","dispatch-fn","do-dispatch","e66073","G__66074","dispatch","p__66075","map__66076","original-ast-node","ele","map__66078","G__66080","dispatch-all","eles","p__66083","map__66084","com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","p1__66082#","cljs.core/some","cljs.core/update","queue","node","cljs.core/dissoc","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","p__66090","map__66091","com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","map__66093","blocked","ready","dispatched-nodes","p1__66088#","com.fulcrologic.fulcro.mutations/mutate","a","p1__66089#","com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","G__66096","tm","com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_","G__66098","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_","G__66101","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_","p__66110","map__66111","com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","remotes","reduction","p__66115","map__66116","done?","new-elements","element","map__66118","map__66119","complete?","action","remote-set","clojure.set.intersection","exec?","cljs.core/not","fully-complete?","cljs.core/empty?","clojure.set.difference","state-before","updated-element","new-acc","cljs.core.conj","e66122","mutation-symbol","e66123","edn_query_language.core.ast__GT_expr","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","p__66124","map__66125","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","map__66127","map__66128","updated-node","e66131","e66132","p__66133","map__66134","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","element-complete?","p__66136","map__66137","active-keys","clojure.set.union","desired-set","p__66139","map__66140","txn-id","ele-idx","map__66142","old-queue","cljs.core/filterv","p__66144","map__66145","cljs.core/assoc-in","G__66148","com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","p__66149","map__66150","result-key","txn-idx","p__66152","map__66153","cljs.core/reduced","not-found?","com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_","com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","tx-element","map__66155","state-before-action","remote-fn","remote-desire","desired-ast","cljs.core/contains?","query-transform","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","G__66159","p__66164","p__66165","map__66166","map__66167","com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","cljs.core.get_in","handler","cljs.core/update-in","cljs.core.fnil","G__66174","p__66181","map__66182","started?","com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","to-dispatch","cljs.core.update_in","p__66190","map__66191","com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","p__66199","map__66200","in-progress","p__66202","map__66203","com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","todo","remaining","p__66217","map__66218","com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","with-work","cljs.core.partial","p__66226","map__66227","com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","optimistic?","p__66231","map__66232","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","results","desired-ast-nodes","transmitted-ast-nodes","e66239","p__66249","map__66250","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","new-element","p__66252","map__66253","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","p__66259","map__66260","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","get-env","progress","p__66263","map__66264","seq__66267","chunk__66268","count__66269","i__66270","vec__66287","vec__66291","value","e66290","e66294","p__66300","map__66301","com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","G__66304","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","outer-acc","map__66305","refresh","p__66311","map__66312","com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","active-on-element","p__66322","map__66323","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","ra","p__66367","map__66369","state-atom","new-queue","temp__5733__auto__","new-node","accumulate","r","items","schedule-render!","explicit-refresh","remotes-active?","p__66399","map__66400","com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","map__66405","mutation-nodes","ast-node->operation","cljs.core/zipmap","optimistic","mixed","p1__66396#","optimistic-tx-node","edn-query-language.core/ast->query","mixed-tx-node","resulting-node-id","cljs.core/reset!","com.fulcrologic.fulcro.components/component?","com.fulcrologic.fulcro.components/has-ident?","cljs.core/inc","*denormalize-time*-orig-val__66447","*denormalize-time*-temp-val__66448","com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","state-map","G__66449","ident","com.fulcrologic.fulcro.components.get_ident","query","com.fulcrologic.fulcro.components.get_query","ui-props","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","com.fulcrologic.fulcro.components/tunnel-props!","G__66485","com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","p__66492","p__66493","map__66494","map__66495","com.fulcrologic.guardrails.core/=>","com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_","synchronous?","map__66498","only-refresh","follow-on-reads","p1__66467#","cljs.core/Keyword","edn-query-language.core/ident?","G__66504","s","G__66507","v","p__66510","map__66511","com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","abort!","abort-id","p__66517","map__66518","active?","aid","G__66523","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","map__66529","map__66530","com.fulcrologic.fulcro.components/any->app","runtime-state"]],"~:used-vars",["^P",["~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","~$com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","~$com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","~$com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","~$com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","~$com.fulcrologic.guardrails.core/=>","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/has-ident?","~$com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","~$cljs.core/reduce","~$cljs.core/seq","~$com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","~$cljs.core/mapv","~$cljs.core/not=","~$cljs.core/dissoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","~$cljs.core/concat","~$cljs.core/set","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","~$cljs.core/empty?","~$cljs.core/fnil","~$com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/reset!","~$com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","~$cljs.core/conj","~$com.fulcrologic.fulcro.algorithms.tempid/uuid","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","~$taoensso.timbre/*config*","~$cljs.core/update","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","~$cljs.core/map","~$com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","~$edn-query-language.core/ast->expr","~$cljs.core/get-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","~$com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","~$com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","~$com.fulcrologic.fulcro.algorithms.do-not-use/now","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","~$com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","~$com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","~$com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","~$com.fulcrologic.fulcro.components/tunnel-props!","~$com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","~$js/goog.DEBUG","~$cljs.core/next","~$cljs.core/vec","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~$cljs.core/assoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","~$clojure.set/union","~$cljs.core/assoc-in","~$com.fulcrologic.fulcro.algorithms.scheduling/schedule!","~$com.fulcrologic.fulcro.inspect.inspect-client/send-started!","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","~$com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","~$cljs.core/every?","~$cljs.core/update-in","~$com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","~$js/Error","~$cljs.core/boolean","~$cljs.core/inc","~$cljs.core/some","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends"]]],"~:cache-keys",["~#cmap",[["^1S","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^17","^16","^1A","^[","^11","^13"]]],["^1S","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.dom.HtmlElement"]]],["^1S","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","cljs/core/async/impl/ioc_helpers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$cljs.core.async.impl.protocols"]]],["^1S","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.labs.userAgent.util","~$goog.string"]]],["^1S","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16"]]],["^1S","goog/crypt/crypt.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.array","~$goog.asserts"]]],["^1S","cljs/core/async.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4A","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","^4D"]]],["^1S","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.Promise","~$goog.events.EventTarget"]]],["^1S","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^11"]]],["^1S","cljs/spec/gen/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$goog.Uri"]]],["^1S","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$clojure.string","^4C"]]],["^1S","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4E"]]],["^1S","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4C"]]],["^1S","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1S","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4B","~$goog.object","~$goog.string.internal"]]],["^1S","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4R"]]],["^1S","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1S","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^11","^4N","^[","^4Q","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1S","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$expound.paths","^@"]]],["^1S","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4B","~$goog.reflect","^4C"]]],["^1S","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1S","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1S","com/cognitect/transit/impl/reader.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1S","taoensso/encore.cljs"],["30c096c80ac45227d869087a80755500fca98346","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4N","^Z","~$cljs.reader","~$cljs.tools.reader.edn","^4Q","^4C","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1S","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","~$goog.async.FreeList"]]],["^1S","com/fulcrologic/fulcro/dom/events.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16"]]],["^1S","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^4O","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1S","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4P"]]],["^1S","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^4C","^5A"]]],["^1S","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.structs.Heap"]]],["^1S","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.Timer","^4D","^4E","^5J","^4L","~$goog.json.hybrid","~$goog.log","^5G","^5F","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^4Q","^4C","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^4P"]]],["^1S","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","com/fulcrologic/fulcro/algorithms/transit.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$cognitect.transit","^1:"]]],["^1S","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16"]]],["^1S","com/cognitect/transit/util.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4Q"]]],["^1S","cljs/pprint.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4N","^4C","^5A"]]],["^1S","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^@","^Z","^N","^11","^["]]],["^1S","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^5O","^5P","^5Q","^5N","^4D","^4C","^5A"]]],["^1S","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$expound.problems","^@","^4N","^Z","~$clojure.walk","~$expound.printer","~$expound.util","~$expound.ansi","^D"]]],["^1S","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1S","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.Disposable","^4E","^5B","~$goog.events.Event","^5L","^5M","^4Q"]]],["^1S","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4N","^11","^@","~$expound.alpha"]]],["^1S","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.disposable.IDisposable"]]],["^1S","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4N"]]],["^1S","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^4Y","node_modules/react/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^4Z","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1S","shadow/js.js"],["bc0862a18183110802758387126e17faaedc1895","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E"]]],["^1S","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^5Y","~$goog.structs.Collection","^5Z"]]],"~:SHADOW-TIMESTAMP",[1598567487000,1598567487000,1592012038000],["^4Y","node_modules/react/cjs/react.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","ea9e9a66370bbe35b404f4de02d009d42a753e6d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^4Z","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1S","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","^56"]]],["^1S","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.events.ListenableKey"]]],["^1S","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","~$goog.html.trustedtypes","^4U","^4V","^4W","^4X"]]],["^1S","cljs/core/async/impl/channels.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4A","^4I","^4G"]]],["^1S","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","~$goog.events.Listener","^4Q"]]],["^1S","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$taoensso.truss.impl"]]],["^1S","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","com/fulcrologic/fulcro/algorithms/merge.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$com.fulcrologic.fulcro.algorithms.data-targeting","^13","^X","~$com.fulcrologic.fulcro.algorithms.normalize","^15","^1A","^[","^11","^1:"]]],["^1S","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^@"]]],["^1S","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","cljs/core/async/impl/dispatch.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4G","^5:"]]],["^1S","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4E","~$goog.html.SafeUrl","^4W","^4X","^4R"]]],["^1S","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^6H","^4T","~$goog.html.uncheckedconversions","^4W","^4R"]]],["^1S","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^@","^64"]]],["^1S","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^Z"]]],["^1S","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16"]]],["^1S","goog/useragent/product.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^53","^55","^4P"]]],["^1S","cljs/core/async/impl/protocols.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16"]]],["^1S","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1S","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^5C","~$goog.structs.PriorityPool"]]],["^1S","com/cognitect/transit/delimiters.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4E","~$goog.dom.TagName","~$goog.dom.tags","^6L","^6M","~$goog.html.SafeStyleSheet","^6H","^4T","^6C","^4U","^4V","^53","^4Q","^4W","^4X","^4R"]]],["^1S","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4Q"]]],["^1S","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D"]]],["^1S","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4B","^4C"]]],["^1S","com/fulcrologic/fulcro/inspect/transit.cljs"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^60","~$com.cognitect.transit.types","~$com.fulcrologic.fulcro.algorithms.transit","^11"]]],["^1S","com/cognitect/transit/impl/decoder.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^5=","^6U"]]],["^1S","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4N","^1?"]]],["^1S","cljs/reader.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4Q","^5R","^5?","^5A"]]],["^1S","com/fulcrologic/fulcro/mutations.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^13","~$com.fulcrologic.fulcro.dom.events","^N","^[","^11","^1?","^@","^6F","~$com.fulcrologic.fulcro.algorithms.merge","^X","^1:","^4N"]]],["^1S","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4E","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^6R","~$goog.dom.safe","^6K","^6N","~$goog.math.Coordinate","~$goog.math.Size","^4Q","^4C","~$goog.string.Unicode","^4P"]]],["^1S","com/fulcrologic/fulcro/components.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4Q","~$cljsjs.react","^[","^@","^11","^62","^4N","^1A","^15","^X","^N","^Z"]]],["^1S","com/fulcrologic/fulcro/specs.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^@","^N","^1A","^["]]],["^1S","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.debug.Error","^70"]]],["^1S","cljs/core/async/impl/buffers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4A"]]],["^1S","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","~$goog.debug.LogRecord"]]],["^1S","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4E","^4C","^5Y","^5Z","^5[","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1S","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^4Y","node_modules/object-assign/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","519ffd5a4c91b67302cc9947b794966d629860cd","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^4Z"]]],["^1S","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.Thenable","^4E","^5I","~$goog.async.run","^5;","^76","~$goog.promise.Resolver"]]],["^1S","cljs/core/async/impl/timers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4A","^4F","^4I"]]],["^1S","cljs/spec/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4Q","^62","^D","^4N"]]],["^1S","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",[]]],["^1S","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","~$goog.json"]]],["^1S","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4Q"]]],["^1S","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^5O","^4N","~$cljs.tools.reader.impl.inspect"]]],["^1S","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^N","^B","^11"]]],["^1S","cljsjs/react.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$module$node_modules$react$index"]]],["^1S","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4C","^5A"]]],["^1S","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^11","^62"]]],["^1S","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^68","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1S","com/fulcrologic/fulcro/inspect/diff.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^@"]]],["^4Y","node_modules/react/cjs/react.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","32f2924b22daf411bb2b61bc45a3540aca73e0b2","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^4Z","^6@"]]],["^1S","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","com/cognitect/transit/handlers.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^6W","^6U","~$goog.math.Long"]]],["^1S","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4Q","~$goog.structs.Node"]]],["^1S","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E"]]],["^1S","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^71","^6N","^4W","^4R"]]],["^1S","com/cognitect/transit/types.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^6W","~$com.cognitect.transit.eq","^7B"]]],["^1S","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4R"]]],["^1S","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4N","^@","^H","^Z","^64","^65","^52","^62","^5@","^4C"]]],["^1S","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^Z","^@","^X","^1:","^15","^1A","^1<","^1;","^13","^18","^K","^N","^[","^1?","^11"]]],["^1S","com/cognitect/transit/eq.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^6W"]]],["^1S","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","~$goog.debug.errorcontext","^4P"]]],["^1S","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","~$goog.math"]]],["^1S","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^5P","^4C","^5A"]]],["^1S","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4E","^6J","^7F"]]],["^1S","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^5J","~$goog.dom","^6R","^71","^6J","^6K","^4T","^53","^54","^4W"]]],["^1S","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","^6K","^6L","^6M","^6T","^6H","^4T","^4W","^4R"]]],["^1S","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4E","~$goog.debug","~$goog.debug.LogBuffer","^77"]]],["^1S","com/cognitect/transit/caching.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^6X"]]],["^4Y","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^4Z"]]],["^1S","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^68","~$goog.events.EventId"]]],["^1S","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^5N","^5O","^5P"]]],["^1S","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^7B","~$goog.math.Integer","^4C","^4Q","^4D","^4M","^5A"]]],["^1S","com/cognitect/transit.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^6W","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^6U","^7D","^5<","^5="]]],["^1S","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","^6C","^4W","^4X"]]],["^1S","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^7H","~$goog.debug.LogManager","^77","~$goog.debug.Logger"]]],["^1S","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4E","^6M","^4Q","^4W","^4X","^4R"]]],["^1S","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^7H","^4O","^69","~$goog.events.EventType","^56","^4P"]]],["^1S","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^56"]]],["^1S","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4P"]]],["^1S","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16"]]],["^1S","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4D","^4E","^4C"]]],["^1S","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","^4X"]]],["^1S","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^4N","^1?","~$taoensso.timbre.appenders.core"]]],["^1S","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^7J"]]],["^1S","com/cognitect/transit/impl/writer.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^6W","^5=","~$com.cognitect.transit.handlers","^6U","^6X","^7B"]]],["^1S","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^66"]]],["^1S","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^["]]],["^1S","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","~$goog.net.WrapperXmlHttpFactory","^67"]]],["^1S","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","^[","^X","^4Q","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^B","^1?","^11"]]],["^1S","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17"]]],["^1S","cognitect/transit.cljs"],["ad84ab433eb8b60faeacb580428cb748997b0ff3","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^16","~$com.cognitect.transit","^6U","^7D","^7B"]]],["^1S","goog/crypt/base64.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4<",["^ ","^4=",null,"^4>",["^P",[]],"^4?",["^17","^4E","^50","^4C","^4P","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1580742522000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1598567491000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1580245266000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1580246397000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1580742522000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/mutations.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/gen/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/dom/events.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/gen/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/protocols.clj",1598567494000,"jar:file:/home/patro/.m2/repository/com/taoensso/encore/2.117.0/encore-2.117.0.jar!/taoensso/encore.clj",1597755175000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async/impl/ioc_macros.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/dispatch.clj",1598567494000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1580246397000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1580245266000,"jar:file:/home/patro/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1592144842000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/exec/threadpool.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1580246694000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/concurrent.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/components.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1589469725000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/main.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/reader.clj",1592012038000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/pprint.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1580245266000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",52],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",["^ ","^J","^K","^L","^K","^M","^N"],"^O",["^P",[]],"^Q","^R","^U",null,"^V",["^ ","^W","^X","^Y","^Z","^[","^[","^?","^@","^N","^N","^10","^11","^12","^13","^14","^[","^15","^15","^16","^16","^K","^K","^17","^17","^18","^18","^19","^K","^Z","^Z","^1:","^1:","~$m","^1;","^1<","^1<","^1=","^1<","^1>","^1?","^1;","^1;","~$s","^@","^X","^X","^13","^13","^11","^11","^1@","^1A","^1?","^1?","^@","^@","^1B","^15","^1C","^1:","^1A","^1A"],"^1D",["^P",["^1E"]],"~:shadow/js-access-global",["^P",["Error"]],"^1F",["^ ","^1G","^1<","^J","^K","^L","^K","^M","^N","^1H","^N","~$|","^N"],"~:defs",["^ ","~$net-send!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",142,"^9",8,"^:",142,"^;",17,"~:arglists",["^1K",["~$quote",["^1K",[["~$app","~$send-node","~$remote-name"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"^Q","^25","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"~:method-params",["^1K",[["^9O","^9P","^9Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^1K",[null,null]],"^9",1,"~:variadic?",false,"^8",142,"~:ret-tag",["^P",[null,"~$any"]],"^:",142,"~:max-fixed-arity",3,"~:fn-var",true,"^9M",["^1K",["^9N",["^1K",[["^9O","^9P","^9Q"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"~$distribute-element-results!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",572,"^9",8,"^:",572,"^;",35,"^9M",["^1K",["^9N",["^1K",[["^9O","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1M","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^Q","^2>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",35,"^9R",["^1K",[["^9O","^9[","~$p__66249"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",572,"^9V",["^P",[null,"^9W"]],"^:",572,"^9X",3,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O","^9[",["^ ","^:0",["^:1","^:2"],"^1M","^:3"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$update-progress!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",594,"^9",8,"^:",594,"^;",24,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1M","^9["]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"^Q","^28","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^9R",["^1K",[["^9O","~$p__66259"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",594,"^9V",["^P",[null,"^9W"]],"^:",594,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["^:6"],"^1M","^9["]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"~$remotes-active-on-node",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",647,"^9",8,"^:",647,"^;",30,"^9M",["^1K",["^9N",["^1K",[[["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$elements"],"^1M","^9["],"~$remotes"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"^Q","^29","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",30,"^9R",["^1K",[["~$p__66311","^:;"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",647,"^9V",["^P",[null,"^9W"]],"^:",647,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:9",["^::"],"^1M","^9["],"^:;"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"~$app->remote-names",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",32,"^9",8,"^:",32,"^;",25,"^9M",["^1K",["^9N",["^1K",[["^9O"]]]]],"^6","Returns a set of the names of the remotes from an app"],"^Q","^2=","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",25,"^9R",["^1K",[["^9O"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",32,"^9V",["^P",["~$clj","^9W","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]],"^:",32,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O"]]]]],"^6","Returns a set of the names of the remotes from an app"],"~$queue-next-send!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",520,"^9",8,"^:",520,"^;",24,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["^:6"],"^1M","^9["]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"^Q","^2:","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^9R",["^1K",[["^9O","~$p__66217"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",520,"^9V",["^P",[null,"^9W"]],"^:",520,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["^:6"],"^1M","^9["]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"~$active-remotes",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",663,"^9",8,"^:",663,"^;",22,"^9M",["^1K",["^9N",["^1K",[["~$queue","^:;"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"^Q","^3Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^9R",["^1K",[["^:E","^:;"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",663,"^9V",["^P",[null,"^9W"]],"^:",663,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^:E","^:;"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"~$queue-sends!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",535,"^9",8,"^:",535,"^;",20,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","^:6"],"^1M","^9["]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^Q","^2C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^9R",["^1K",[["^9O","~$p__66226"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",535,"^9V",["^P",[null,"^9W"]],"^:",535,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["^:G","^:6"],"^1M","^9["]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$process-queue!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",674,"^9",8,"^:",674,"^;",22,"^9M",["^1K",["^9N",["^1K",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$state-atom","~$runtime-atom"],"^1M","^9O"]]]]]],"^6","Run through the active queue and do a processing step."],"^Q","^3S","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^9R",["^1K",[["~$p__66367"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",674,"^9V","^:A","^:",674,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:J",["^:K","^:L"],"^1M","^9O"]]]]]],"^6","Run through the active queue and do a processing step."],"~$dispatch-elements",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",238,"^9",8,"^:",238,"^;",25,"^9M",["^1K",["^9N",["^1K",[["^9[","~$env","~$dispatch-fn"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"^Q","^26","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",25,"^9R",["^1K",[["^9[","^:O","^:P"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",238,"^9V",["^P",["^:>","^9W"]],"^:",238,"^9X",3,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9[","^:O","^:P"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"~$abort-elements!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",801,"^9",8,"^:",801,"^;",23,"~:private",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:0",["~$abort!"],"^1M","~$remote"],"~$send-queue","~$abort-id"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"^:R",true,"^Q","^2P","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^9R",["^1K",[["~$p__66510","^:U","^:V"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",801,"^9V",["^P",[null,"^9W"]],"^:",801,"^9X",3,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:0",["^:S"],"^1M","^:T"],"^:U","^:V"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"~$remove-send!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",387,"^9",8,"^:",387,"^;",20,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:J",["^:L"],"^1M","^9O"],"^:T","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^Q","^2G","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^9R",["^1K",[["~$p__66139","^:T","^:Y","^:Z"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",387,"^9V",["^P",[null,"^9W"]],"^:",387,"^9X",4,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:J",["^:L"],"^1M","^9O"],"^:T","^:Y","^:Z"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",480,"^9",8,"^:",480,"^;",28,"^9M",["^1K",["^9N",["^1K",[["^9O","^9[",["^ ","^:0",["~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^Q","^3N","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^9R",["^1K",[["^9O","^9[","~$p__66181"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",480,"^9V",["^P",[null,"^9W"]],"^:",480,"^9X",3,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O","^9[",["^ ","^:0",["^;1","^;2","^;3"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$top-keys",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",90,"^9",8,"^:",90,"^;",16,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:0",["~$type","~$key","~$children"],"^1M","~$ast"]]]]]]],"^Q","^24","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^9R",["^1K",[["~$p__65937"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",90,"^9V",["^P",["^:>","^9W","^:?"]],"^:",90,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:0",["^;6","^;7","^;8"],"^1M","^;9"]]]]]]],"~$schedule-activation!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",281,"^9",8,"^:",281,"^;",28,"^9M",["^1K",["^9N",["^1K",[["^9O","~$tm"],["^9O"]]]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.","~:top-fn",["^ ","^9U",false,"~:fixed-arity",2,"^9X",2,"^9R",[["^9O","^;<"],["^9O"]],"^9M",["^1K",[["^9O","^;<"],["^9O"]]],"^9T",["^1K",[null,null]]]],"^Q","^2S","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^;=",["^ ","^9U",false,"^;>",2,"^9X",2,"^9R",[["^9O","^;<"],["^9O"]],"^9M",["^1K",[["^9O","^;<"],["^9O"]]],"^9T",["^1K",[null,null]]],"^9R",[["^9O","^;<"],["^9O"]],"^9S",null,"^;>",2,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"~:methods",[["^ ","^;>",2,"^9U",false,"~:tag",["^P",["~$js","^:A"]]],["^ ","^;>",1,"^9U",false,"^;@",["^P",["^;A","^:A"]]]],"^8",281,"^:",281,"^9X",2,"^9Y",true,"^9M",["^1K",[["^9O","^;<"],["^9O"]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms."],"~$record-result!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",397,"^9",8,"^:",397,"^;",22,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:J",["^:L"],"^1M","^9O"],"^:Y","^:Z","^:T","~$result","~$result-key"],["^9O","^:Y","^:Z","^:T","^;C"]]]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.","^;=",["^ ","^9U",false,"^;>",6,"^9X",6,"^9R",[[["^ ","^:J",["^:L"],"^1M","^9O"],"^:Y","^:Z","^:T","^;C","^;D"],["^9O","^:Y","^:Z","^:T","^;C"]],"^9M",["^1K",[[["^ ","^:J",["^:L"],"^1M","^9O"],"^:Y","^:Z","^:T","^;C","^;D"],["^9O","^:Y","^:Z","^:T","^;C"]]],"^9T",["^1K",[null,null]]]],"^Q","^2Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^;=",["^ ","^9U",false,"^;>",6,"^9X",6,"^9R",[[["^ ","^:J",["^:L"],"^1M","^9O"],"^:Y","^:Z","^:T","^;C","^;D"],["^9O","^:Y","^:Z","^:T","^;C"]],"^9M",["^1K",[[["^ ","^:J",["^:L"],"^1M","^9O"],"^:Y","^:Z","^:T","^;C","^;D"],["^9O","^:Y","^:Z","^:T","^;C"]]],"^9T",["^1K",[null,null]]],"^9R",[[["^ ","^:J",["^:L"],"^1M","^9O"],"^:Y","^:Z","^:T","^;C","^;D"],["^9O","^:Y","^:Z","^:T","^;C"]],"^9S",null,"^;>",6,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^;?",[["^ ","^;>",6,"^9U",false,"^;@",["^P",[null,"^9W","^:A"]]],["^ ","^;>",5,"^9U",false,"^;@",["^P",[null,"^9W","^:A"]]]],"^8",397,"^:",397,"^9X",6,"^9Y",true,"^9M",["^1K",[[["^ ","^:J",["^:L"],"^1M","^9O"],"^:Y","^:Z","^:T","^;C","^;D"],["^9O","^:Y","^:Z","^:T","^;C"]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing."],"~$process-tx-node!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",614,"^9",8,"^:",614,"^;",24,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["^:G"],"^1M","^9["]]]]]]],"^Q","^2A","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^9R",["^1K",[["^9O","~$p__66300"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",614,"^9V",["^P",["^:>","^9W","^:A"]],"^:",614,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["^:G"],"^1M","^9["]]]]]]],"~$add-send!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",450,"^9",8,"^:",450,"^;",17,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:J",["^:L"],"^1M","^9O"],["^ ","^:9",["~$id","~$options"],"^1M","^9["],"^:Z","^:T"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"^Q","^2?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^9R",["^1K",[["~$p__66164","~$p__66165","^:Z","^:T"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",450,"^9V",["^P",["~$cljs.core/IMap","^:A"]],"^:",450,"^9X",4,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:J",["^:L"],"^1M","^9O"],["^ ","^:9",["^;H","^;I"],"^1M","^9["],"^:Z","^:T"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"~$every-ast?",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",49,"^9",8,"^:",49,"^;",18,"^9M",["^1K",["^9N",["^1K",[["~$ast-node-or-tree","~$test"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"^Q","^39","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^9R",["^1K",[["^;N","^;O"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",49,"^9V",["^P",["~$boolean","^9W"]],"^:",49,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^;N","^;O"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"~$query-ast?",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",63,"^9",8,"^:",63,"^;",18,"^9M",["^1K",["^9N",["^1K",[["^;N"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^Q","^3:","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^9R",["^1K",[["^;N"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",63,"^9V",["^P",["^;P","^9W"]],"^:",63,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^;N"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$distribute-results!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",584,"^9",8,"^:",584,"^;",27,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["^:6"],"^1M","^9["]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"^Q","^37","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^9R",["^1K",[["^9O","~$p__66252"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",584,"^9V",["^P",["^:>","^9W"]],"^:",584,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["^:6"],"^1M","^9["]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"~$fully-complete?",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",377,"^9",8,"^:",377,"^;",23,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["^:6"],"^1M","^9["]]]]]]],"^Q","^34","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^9R",["^1K",[["^9O","~$p__66133"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",377,"^9V","^;P","^:",377,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:0",["^:6"],"^1M","^9["]]]]]]],"~$schedule-queue-processing!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",291,"^9",8,"^:",291,"^;",34,"^9M",["^1K",["^9N",["^1K",[["^9O","^;<"],["^9O"]]]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.","^;=",["^ ","^9U",false,"^;>",2,"^9X",2,"^9R",[["^9O","^;<"],["^9O"]],"^9M",["^1K",[["^9O","^;<"],["^9O"]]],"^9T",["^1K",[null,null]]]],"^Q","^3@","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",34,"^;=",["^ ","^9U",false,"^;>",2,"^9X",2,"^9R",[["^9O","^;<"],["^9O"]],"^9M",["^1K",[["^9O","^;<"],["^9O"]]],"^9T",["^1K",[null,null]]],"^9R",[["^9O","^;<"],["^9O"]],"^9S",null,"^;>",2,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^;?",[["^ ","^;>",2,"^9U",false,"^;@",["^P",["^;A","^:A"]]],["^ ","^;>",1,"^9U",false,"^;@",["^P",["^;A","^:A"]]]],"^8",291,"^:",291,"^9X",2,"^9Y",true,"^9M",["^1K",[["^9O","^;<"],["^9O"]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms."],"~$app->remotes",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",26,"^9",8,"^:",26,"^;",20,"^9M",["^1K",["^9N",["^1K",[["^9O"]]]]],"^6","Returns the remotes map from an app"],"^Q","^3<","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^9R",["^1K",[["^9O"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",26,"^9V","^9W","^:",26,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O"]]]]],"^6","Returns the remotes map from an app"],"~$run-actions!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",349,"^9",8,"^:",349,"^;",20,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:9",["^;H","^::"],"^1M","~$node"]]]]]]],"^Q","^3;","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^9R",["^1K",[["^9O","~$p__66124"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",349,"^9V",["^P",["^:>","^9W"]],"^:",349,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:9",["^;H","^::"],"^1M","^;Y"]]]]]]],"~$process-send-queues!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",167,"^9",8,"^:",167,"^;",28,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:J",["^:L"],"^1M","^9O"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"^Q","^2V","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^9R",["^1K",[["~$p__66040"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",167,"^9V",["^P",[null,"^9W"]],"^:",167,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:J",["^:L"],"^1M","^9O"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"~$element-with-work",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",508,"^9",8,"^:",508,"^;",25,"^9M",["^1K",["^9N",["^1K",[["~$remote-names",["^ ","^:0",["^;2","^;3"],"^1M","~$element"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"^Q","^3A","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",25,"^9R",["^1K",[["^<2","~$p__66202"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",508,"^9V",["^P",[null,"^9W","^:A"]],"^:",508,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^<2",["^ ","^:0",["^;2","^;3"],"^1M","^<3"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"~$extract-parallel",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",38,"^9",8,"^:",38,"^;",24,"^9M",["^1K",["^9N",["^1K",[["~$sends"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"^Q","^3G","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^9R",["^1K",[["^<6"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",38,"^9V","~$cljs.core/IVector","^:",38,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^<6"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"~$application-rendered!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",257,"^9",7,"^:",257,"^;",28,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:0",["~:com.fulcrologic.fulcro.application/runtime-atom"],"^1M","^9O"],"^;I"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"^Q","^2L","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^9R",["^1K",[["~$p__66083","^;I"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",257,"^9V",["^P",["^9W","^:A"]],"^:",257,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:0",["^<9"],"^1M","^9O"],"^;I"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"~$build-env",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",225,"^9",8,"^:",225,"^;",17,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:9",["^;I"],"^1M","^9["],"~$addl"],["^9O",["^ ","^:0",["^:G"],"^1M","^9["]]]]]],"^;=",["^ ","^9U",false,"^;>",3,"^9X",3,"^9R",[["^9O",["^ ","^:9",["^;I"],"^1M","^9["],"^<<"],["^9O",["^ ","^:0",["^:G"],"^1M","^9["]]],"^9M",["^1K",[["^9O",["^ ","^:9",["^;I"],"^1M","^9["],"^<<"],["^9O",["^ ","^:0",["^:G"],"^1M","^9["]]]],"^9T",["^1K",[null,null]]]],"^Q","^3O","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^;=",["^ ","^9U",false,"^;>",3,"^9X",3,"^9R",[["^9O",["^ ","^:9",["^;I"],"^1M","^9["],"^<<"],["^9O",["^ ","^:0",["^:G"],"^1M","^9["]]],"^9M",["^1K",[["^9O",["^ ","^:9",["^;I"],"^1M","^9["],"^<<"],["^9O",["^ ","^:0",["^:G"],"^1M","^9["]]]],"^9T",["^1K",[null,null]]],"^9R",[["^9O",["^ ","^:9",["^;I"],"^1M","^9["],"^<<"],["^9O",["^ ","^:0",["^:G"],"^1M","^9["]]],"^9S",null,"^;>",3,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^;?",[["^ ","^;>",3,"^9U",false,"^;@",["^P",["^:>","^9W","^:A"]]],["^ ","^;>",2,"^9U",false,"^;@",["^P",["^:>","^9W","^:A"]]]],"^8",225,"^:",225,"^9X",3,"^9Y",true,"^9M",["^1K",[["^9O",["^ ","^:9",["^;I"],"^1M","^9["],"^<<"],["^9O",["^ ","^:0",["^:G"],"^1M","^9["]]]]],"~$schedule-sends!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",301,"^9",8,"^:",301,"^;",23,"^9M",["^1K",["^9N",["^1K",[["^9O","^;<"],["^9O"]]]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.","^;=",["^ ","^9U",false,"^;>",2,"^9X",2,"^9R",[["^9O","^;<"],["^9O"]],"^9M",["^1K",[["^9O","^;<"],["^9O"]]],"^9T",["^1K",[null,null]]]],"^Q","^2K","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;=",["^ ","^9U",false,"^;>",2,"^9X",2,"^9R",[["^9O","^;<"],["^9O"]],"^9M",["^1K",[["^9O","^;<"],["^9O"]]],"^9T",["^1K",[null,null]]],"^9R",[["^9O","^;<"],["^9O"]],"^9S",null,"^;>",2,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^;?",[["^ ","^;>",2,"^9U",false,"^;@",["^P",["^;A","^:A"]]],["^ ","^;>",1,"^9U",false,"^;@",["^P",["^;A","^:A"]]]],"^8",301,"^:",301,"^9X",2,"^9Y",true,"^9M",["^1K",[["^9O","^;<"],["^9O"]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms."],"~$sort-queue-writes-before-reads",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",69,"^9",8,"^:",69,"^;",38,"^9M",["^1K",["^9N",["^1K",[["^:U"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^Q","^2J","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",38,"^9R",["^1K",[["^:U"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",69,"^9V",["^P",[null,"^:>","^9W"]],"^:",69,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^:U"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^:S",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",830,"^9",7,"^:",830,"^;",13,"^9M",["^1K",["^9N",["^1K",[["^9O","^:V"]]]]],"^6","Implementation of abort when using this tx processing"],"^Q","^3X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",13,"^9R",["^1K",[["^9O","^:V"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",830,"^9V",["^P",[null,"^9W"]],"^:",830,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O","^:V"]]]]],"^6","Implementation of abort when using this tx processing"],"~$compute-desired-ast-node",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",419,"^9",8,"^:",419,"^;",32,"^9M",["^1K",["^9N",["^1K",[["^9O","^:T","^9[","^:3"]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"^Q","^40","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",32,"^9R",["^1K",[["^9O","^:T","^9[","^:3"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",419,"^9V",["^P",[null,"^:>","^9W"]],"^:",419,"^9X",4,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O","^:T","^9[","^:3"]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"~$advance-actions!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",310,"^9",8,"^:",310,"^;",24,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:9",["^;H","^::"],"^1M","^;Y"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"^Q","^3J","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^9R",["^1K",[["^9O","~$p__66110"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",310,"^9V",["^P",["^:>","^9W"]],"^:",310,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O",["^ ","^:9",["^;H","^::"],"^1M","^;Y"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"~$mutation-ast?",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",57,"^9",8,"^:",57,"^;",21,"^9M",["^1K",["^9N",["^1K",[["^;N"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^Q","^3[","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^9R",["^1K",[["^;N"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",57,"^9V",["^P",["^;P","^9W"]],"^:",57,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^;N"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$activate-submissions!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",266,"^9",8,"^:",266,"^;",29,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:0",["^<9"],"^1M","^9O"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"^Q","^3F","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",29,"^9R",["^1K",[["~$p__66090"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",266,"^9V","^9W","^:",266,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:0",["^<9"],"^1M","^9O"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"~$combine-sends",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",97,"^9",8,"^:",97,"^;",21,"^9M",["^1K",["^9N",["^1K",[["^9O","^9Q","^:U"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"^Q","^49","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^9R",["^1K",[["^9O","^9Q","^:U"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",97,"^9V","^;L","^:",97,"^9X",3,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O","^9Q","^:U"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"~$default-tx!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",750,"^9",7,"^:",750,"^;",18,"^9M",["^1K",["^9N",["^1K",[["^9O","~$tx"],[["^ ","^:J",["^:L"],"^1M","^9O"],"^<G",["^ ","^:0",["~$synchronous?"],"^1M","^;I"]]]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^;=",["^ ","^9U",false,"^;>",3,"^9X",3,"^9R",[["^9O","^<G"],[["^ ","^:J",["^:L"],"^1M","^9O"],"^<G",["^ ","^:0",["^<H"],"^1M","^;I"]]],"^9M",["^1K",[["^9O","^<G"],[["^ ","^:J",["^:L"],"^1M","^9O"],"^<G",["^ ","^:0",["^<H"],"^1M","^;I"]]]],"^9T",["^1K",[null,null]]]],"^Q","^3H","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^;=",["^ ","^9U",false,"^;>",3,"^9X",3,"^9R",[["^9O","^<G"],[["^ ","^:J",["^:L"],"^1M","^9O"],"^<G",["^ ","^:0",["^<H"],"^1M","^;I"]]],"^9M",["^1K",[["^9O","^<G"],[["^ ","^:J",["^:L"],"^1M","^9O"],"^<G",["^ ","^:0",["^<H"],"^1M","^;I"]]]],"^9T",["^1K",[null,null]]],"^9R",[["^9O","^<G"],[["^ ","^:J",["^:L"],"^1M","^9O"],"^<G",["^ ","^:0",["^<H"],"^1M","^;I"]]],"^9S",null,"^;>",3,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^;?",[["^ ","^;>",2,"^9U",false,"^;@","^9W"],["^ ","^;>",3,"^9U",false,"^;@","^9W"]],"^8",750,"^:",750,"^9X",3,"^9Y",true,"^9M",["^1K",[["^9O","^<G"],[["^ ","^:J",["^:L"],"^1M","^9O"],"^<G",["^ ","^:0",["^<H"],"^1M","^;I"]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$transact-sync!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",698,"^9",7,"^:",698,"^;",21,"^9M",["^1K",["^9N",["^1K",[["^9O","^<G",["^ ","^:0",["~$component"],"^1M","^;I"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"^Q","^3E","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^9R",["^1K",[["^9O","^<G","~$p__66399"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",698,"^9V","^9W","^:",698,"^9X",3,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O","^<G",["^ ","^:0",["^<J"],"^1M","^;I"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"~$idle-node?",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",498,"^9",8,"^:",498,"^;",18,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:0",["^:6"],"^1M","^9["]]]]]],"^6","Returns true if the given node has no active network operations."],"^Q","^43","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^9R",["^1K",[["~$p__66190"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",498,"^9V","^;P","^:",498,"^9X",1,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[[["^ ","^:0",["^:6"],"^1M","^9["]]]]]],"^6","Returns true if the given node has no active network operations."],"~$requested-refreshes",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",629,"^9",8,"^:",629,"^;",27,"^9M",["^1K",["^9N",["^1K",[["^9O","^:E"]]]]]],"^Q","^23","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^9R",["^1K",[["^9O","^:E"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",629,"^9V",["^P",[null,"^9W"]],"^:",629,"^9X",2,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O","^:E"]]]]]],"~$dispatch-result!",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",550,"^9",8,"^:",550,"^;",24,"^9M",["^1K",["^9N",["^1K",[["^9O","^9[",["^ ","^:9",["~$results","~$dispatch","~$desired-ast-nodes","~$transmitted-ast-nodes","~$original-ast-node"],"^1M","^:3"],"^:T"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^Q","^3D","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^9R",["^1K",[["^9O","^9[","~$p__66231","^:T"]]],"^9S",null,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^8",550,"^9V",["^P",["^:>","^9W"]],"^:",550,"^9X",4,"^9Y",true,"^9M",["^1K",["^9N",["^1K",[["^9O","^9[",["^ ","^:9",["^<P","^<Q","^<R","^<S","^<T"],"^1M","^:3"],"^:T"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^9[",["^ ","^9L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",199,"^9",8,"^:",199,"^;",15,"^9M",["^1K",["^9N",["^1K",[["^<G"],["^<G","^;I"]]]]],"^;=",["^ ","^9U",false,"^;>",2,"^9X",2,"^9R",[["^<G"],["^<G","^;I"]],"^9M",["^1K",[["^<G"],["^<G","^;I"]]],"^9T",["^1K",[null,null]]]],"^Q","^3Q","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",15,"^;=",["^ ","^9U",false,"^;>",2,"^9X",2,"^9R",[["^<G"],["^<G","^;I"]],"^9M",["^1K",[["^<G"],["^<G","^;I"]]],"^9T",["^1K",[null,null]]],"^9R",[["^<G"],["^<G","^;I"]],"^9S",null,"^;>",2,"^9T",["^1K",[null,null]],"^9",1,"^9U",false,"^;?",[["^ ","^;>",1,"^9U",false,"^;@","^9W"],["^ ","^;>",2,"^9U",false,"^;@","^;L"]],"^8",199,"^:",199,"^9X",2,"^9Y",true,"^9M",["^1K",[["^<G"],["^<G","^;I"]]]]],"^1I",["^ ","^?","^@","^N","^N","^10","^11","^12","^13","^16","^16","^K","^K","^19","^K","~$m","^1;","^1>","^1?","^1;","^1;","~$s","^@","^13","^13","^11","^11","^1?","^1?","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1D",["^P",["~:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id","~:remote","~:only-refresh","~:children","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:writes","~:state-before","^:1","~:transacted-ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/created","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:key","~:refresh","~:else","~:com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?","~:call","~:com.fulcrologic.fulcro.algorithms.tx-processing/aborted?","~:ref","~:synchronous?","~:warn","~:transmitted-ast","~:done?","~:status-text","~:com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?","~:ast","~:type","~:global-eql-transform","~:debug","~:state","~:status-code","~:after-render?","~:component","~:schedule-render!","~:com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action","^:6","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:abort!","~:otherwise","~:state-before-action","~:fatal","~:com.fulcrologic.fulcro.application/app","~:dispatch","~:transmit!","~:tx","~:com.fulcrologic.fulcro.application/to-refresh","~:com.fulcrologic.fulcro.application/basis-t","~:mutation-ast","~:root","~:result","^<9","^;2","~:optimistic?","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx","~:progress-action","~:app","^;3","~:dispatch-key","~:com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:client-exception","~:action","~:error","~:tx-id","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queues","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:progress","~:body","~:abort-id","~:com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?","^:G","~:parallel?","~:auto","~:p","~:new-elements","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^:2","^;1","~:message","~:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes","~:com.fulcrologic.fulcro.algorithms.tx-processing/parallel?","~:reads","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes"]],"~:order",["^>G","^<9","^:G","^>C","^>M","^=Z","^=D","^<Z","^=:","^>J","^>7","^=4","^>N","^=0","^=8","^=6","^;1","^=5","^>O","^>@","^=H","^>H","^<[","^=U","^>:","~:p~:ns-specs",["^ ","^<W","~$cljs.core/any?","~:com.fulcrologic.fulcro.algorithms.tx-processing/finished","~$cljs.core/inst?","^<[",["^1K",["~$cljs.spec.alpha/coll-of","^>H","~:kind","~$cljs.core/vector?"]],"^:1",["^1K",["~$cljs.spec.alpha/map-of","~$cljs.core/keyword?","^>S"]],"^=3","^>U","^=4","~:edn-query-language.ast/node","^=5","~$cljs.core/fn?","^=9","~$cljs.core/boolean?","^=B","^?1","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-element",["^1K",["~$cljs.spec.alpha/keys","~:req",["^;1","^>F","^;3","^:2","^:1","^;2"],"~:opt",["^>L","^>P","^>>"]]],"^:6",["^1K",["^>V","^?2","^>W","^>X"]],"~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-node",["^1K",["^?3","^?4",["^>7","^=3","^:G","^>1","^:6"],"^?5",["~:com.fulcrologic.fulcro.algorithms.tx-processing/started","^>T"]]],"^;2","~$cljs.core/map?","^>1","^>X","^;3","~$cljs.core/set?","^>5",["^1K",["^>V","^?6","^>W","^>X"]],"^>6",["^1K",["^>V","^?6","^>W","^>X"]],"^>7","~$cljs.core/uuid?","^?7","^>U","^><",["^1K",["^>Y","~:com.fulcrologic.fulcro.application/remote-name","^<["]],"^>>",["^1K",["^>Y","^>Z","^>S"]],"^>B","^?1","^:G",["^1K",["^?3","^?5",["^<W"],"~:opt-un",["^<W"]]],"^>F","^=4","^>H",["^1K",["^?3","^?4",["^>7","^;1","^=4","^>O","^=5","^>J"],"^?5",["^:G"]]],"^>J","^?1","^:2","^?9","^;1","~$cljs.core/int?","^>L",["^1K",["^>Y","^>Z","^>["]],"^>M","^?1","^>O","^?0","^>P",["^1K",["^>Y","^>Z","^>["]]],"~:ns-spec-vars",["^P",[]],"~:compiler-options",["^4;",[["^??","~:static-fns"],true,["^??","~:shadow-tweaks"],null,["^??","~:source-map-inline"],null,["^??","~:elide-asserts"],false,["^??","~:optimize-constants"],null,["^??","^1V"],null,["^??","~:external-config"],["^ ","~:fulcro",["^ ","~:wrap-inputs?",false]],["^??","~:tooling-config"],null,["^??","~:emit-constants"],null,["^??","~:load-tests"],null,["^??","~:form-size-threshold"],null,["^??","~:data-readers"],null,["^??","~:infer-externs"],"^>D",["^??","^1X"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^??","~:fn-invoke-direct"],null,["^??","~:source-map"],true]]]