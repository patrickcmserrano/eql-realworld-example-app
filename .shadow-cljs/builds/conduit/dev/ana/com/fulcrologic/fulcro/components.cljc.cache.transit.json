["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.components');\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.fulcro !== 'undefined') && (typeof com.fulcrologic.fulcro.components !== 'undefined') && (typeof com.fulcrologic.fulcro.components.component_registry !== 'undefined')){\n} else {\ncom.fulcrologic.fulcro.components.component_registry = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\ncom.fulcrologic.fulcro.components._STAR_query_state_STAR_ = null;\ncom.fulcrologic.fulcro.components._STAR_app_STAR_ = null;\ncom.fulcrologic.fulcro.components._STAR_parent_STAR_ = null;\ncom.fulcrologic.fulcro.components._STAR_depth_STAR_ = null;\ncom.fulcrologic.fulcro.components._STAR_shared_STAR_ = null;\ncom.fulcrologic.fulcro.components._STAR_blindly_render_STAR_ = false;\n/**\n * DEPRECATED: use from com.fulcrologic.fulcro.react.hooks\n * \n *   A simple wrapper around React/useEffect that auto-converts cljs arrays of deps to js.\n */\ncom.fulcrologic.fulcro.components.use_effect = (function com$fulcrologic$fulcro$components$use_effect(var_args){\nvar G__64729 = arguments.length;\nswitch (G__64729) {\ncase 1:\nreturn com.fulcrologic.fulcro.components.use_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.use_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.use_effect.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn React.useEffect(f);\n}));\n\n(com.fulcrologic.fulcro.components.use_effect.cljs$core$IFn$_invoke$arity$2 = (function (f,deps){\nreturn React.useEffect(f,cljs.core.clj__GT_js(deps));\n}));\n\n(com.fulcrologic.fulcro.components.use_effect.cljs$lang$maxFixedArity = 2);\n\n/**\n * DEPRECATED: use from com.fulcrologic.fulcro.react.hooks\n *   A simple wrapper around React/useState. Returns a cljs vector for easy destructuring\n */\ncom.fulcrologic.fulcro.components.use_state = (function com$fulcrologic$fulcro$components$use_state(initial_value){\nreturn cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(React.useState(initial_value));\n});\n/**\n * Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\n *   gobj/getValueByKeys.\n */\ncom.fulcrologic.fulcro.components.isoget_in = (function com$fulcrologic$fulcro$components$isoget_in(var_args){\nvar G__64739 = arguments.length;\nswitch (G__64739) {\ncase 2:\nreturn com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2 = (function (obj,kvs){\nreturn com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$3(obj,kvs,null);\n}));\n\n(com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$3 = (function (obj,kvs,default$){\nvar ks = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (k){\nvar G__64748 = k;\nif((G__64748 == null)){\nreturn null;\n} else {\nreturn cljs.core.name(G__64748);\n}\n}),kvs);\nvar or__4126__auto__ = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(goog.object.getValueByKeys,obj,ks);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn default$;\n}\n}));\n\n(com.fulcrologic.fulcro.components.isoget_in.cljs$lang$maxFixedArity = 3);\n\n/**\n * Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n *   `gobj/get`.\n */\ncom.fulcrologic.fulcro.components.isoget = (function com$fulcrologic$fulcro$components$isoget(var_args){\nvar G__64756 = arguments.length;\nswitch (G__64756) {\ncase 2:\nreturn com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2 = (function (obj,k){\nreturn com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$3(obj,k,null);\n}));\n\n(com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$3 = (function (obj,k,default$){\nvar or__4126__auto__ = goog.object.get(obj,(function (){var G__64763 = k;\nif((G__64763 == null)){\nreturn null;\n} else {\nreturn cljs.core.name(G__64763);\n}\n})());\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn default$;\n}\n}));\n\n(com.fulcrologic.fulcro.components.isoget.cljs$lang$maxFixedArity = 3);\n\n/**\n * Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\n *   that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\n *   Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc.\n */\ncom.fulcrologic.fulcro.components.register_component_BANG_ = (function com$fulcrologic$fulcro$components$register_component_BANG_(k,component_class){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.components.component_registry,cljs.core.assoc,k,component_class);\n\nreturn component_class;\n});\n/**\n * Utility function that will force a lazy sequence of children (recursively) into realized\n *   vectors (React cannot deal with lazy seqs in production mode)\n */\ncom.fulcrologic.fulcro.components.force_children = (function com$fulcrologic$fulcro$components$force_children(x){\nvar G__64767 = x;\nif(cljs.core.seq_QMARK_(x)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components.force_children),G__64767);\n} else {\nreturn G__64767;\n}\n});\n/**\n * Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\n *   is part of props 'tunnelling', an optimization to get updated props to instances without going through the root.\n */\ncom.fulcrologic.fulcro.components.newer_props = (function com$fulcrologic$fulcro$components$newer_props(props_a,props_b){\nif((props_a == null)){\nreturn props_b;\n} else {\nif((props_b == null)){\nreturn props_a;\n} else {\nif(((function (){var or__4126__auto__ = com.fulcrologic.fulcro.algorithms.denormalize.denormalization_time(props_a);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (2);\n}\n})() > (function (){var or__4126__auto__ = com.fulcrologic.fulcro.algorithms.denormalize.denormalization_time(props_b);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (1);\n}\n})())){\nreturn props_a;\n} else {\nreturn props_b;\n\n}\n}\n}\n});\n/**\n * Returns true if the argument is a component. A component is defined as a *mounted component*.\n * This function returns false for component classes, and also returns false for the output of a Fulcro component factory.\n */\ncom.fulcrologic.fulcro.components.component_instance_QMARK_ = (function com$fulcrologic$fulcro$components$component_instance_QMARK_(x){\nif((!((x == null)))){\nreturn goog.object.get(x,\"fulcro$isComponent\") === true;\n} else {\nreturn false;\n}\n});\n/**\n * Returns true if the argument is a component instance.\n * \n * DEPRECATED for terminology clarity. Use `component-instance?` instead.\n */\ncom.fulcrologic.fulcro.components.component_QMARK_ = com.fulcrologic.fulcro.components.component_instance_QMARK_;\n/**\n * Returns true if the argument is a component class.\n */\ncom.fulcrologic.fulcro.components.component_class_QMARK_ = (function com$fulcrologic$fulcro$components$component_class_QMARK_(x){\nreturn cljs.core.boolean$(goog.object.containsKey(x,\"fulcro$class\"));\n});\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"component-class\",\"com.fulcrologic.fulcro.components/component-class\",-316082369),new cljs.core.Symbol(\"com.fulcrologic.fulcro.components\",\"component-class?\",\"com.fulcrologic.fulcro.components/component-class?\",425799109,null),com.fulcrologic.fulcro.components.component_class_QMARK_);\n/**\n * Returns a string version of the given react component's name. Works on component instances and classes.\n */\ncom.fulcrologic.fulcro.components.component_name = (function com$fulcrologic$fulcro$components$component_name(class$){\nreturn com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(class$,new cljs.core.Keyword(null,\"displayName\",\"displayName\",-809144601));\n});\n/**\n * Returns the registry key for the given component class.\n */\ncom.fulcrologic.fulcro.components.class__GT_registry_key = (function com$fulcrologic$fulcro$components$class__GT_registry_key(class$){\nreturn com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(class$,new cljs.core.Keyword(null,\"fulcro$registryKey\",\"fulcro$registryKey\",-155509270));\n});\n/**\n * Look up the given component in Fulcro's global component registry. Will only be able to find components that have\n *   been (transitively) required by your application.\n * \n *   `classname` can be a fully-qualified keyword or symbol.\n */\ncom.fulcrologic.fulcro.components.registry_key__GT_class = (function com$fulcrologic$fulcro$components$registry_key__GT_class(classname){\nif((classname instanceof cljs.core.Keyword)){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(com.fulcrologic.fulcro.components.component_registry),classname);\n} else {\nif((classname instanceof cljs.core.Symbol)){\nvar k = cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(cljs.core.namespace(classname),cljs.core.name(classname));\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(com.fulcrologic.fulcro.components.component_registry),k);\n} else {\nreturn null;\n\n}\n}\n});\n/**\n * Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\n *   necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\n *   is not necessary for \"stateless\" components, though it will work properly for both.\n * \n *   Computed props are \"remembered\" so that a targeted update (which can only happen on a component with a query\n *   and ident) can use new props from the database without \"losing\" the computed props that were originally passed\n *   from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \"lose\n *   track of\" them.\n *   \n */\ncom.fulcrologic.fulcro.components.computed = (function com$fulcrologic$fulcro$components$computed(props,computed_map){\nif((props == null)){\nreturn null;\n} else {\nif(cljs.core.vector_QMARK_(props)){\nvar G__64788 = props;\nif((!(cljs.core.empty_QMARK_(computed_map)))){\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(G__64788,cljs.core.assoc,new cljs.core.Keyword(\"fulcro.client.primitives\",\"computed\",\"fulcro.client.primitives/computed\",201987962),computed_map);\n} else {\nreturn G__64788;\n}\n} else {\nvar G__64790 = props;\nif((!(cljs.core.empty_QMARK_(computed_map)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64790,new cljs.core.Keyword(\"fulcro.client.primitives\",\"computed\",\"fulcro.client.primitives/computed\",201987962),computed_map);\n} else {\nreturn G__64790;\n}\n}\n}\n});\n/**\n * Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil.\n */\ncom.fulcrologic.fulcro.components.get_computed = (function com$fulcrologic$fulcro$components$get_computed(var_args){\nvar G__64795 = arguments.length;\nswitch (G__64795) {\ncase 1:\nreturn com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1 = (function (x){\nreturn com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$2(x,cljs.core.PersistentVector.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$2 = (function (x,k_or_ks){\nif((x == null)){\nreturn null;\n} else {\nvar props = (function (){var G__64797 = x;\nif(com.fulcrologic.fulcro.components.component_instance_QMARK_(x)){\nreturn (com.fulcrologic.fulcro.components.props.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.props.cljs$core$IFn$_invoke$arity$1(G__64797) : com.fulcrologic.fulcro.components.props.call(null,G__64797));\n} else {\nreturn G__64797;\n}\n})();\nvar ks = cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.primitives\",\"computed\",\"fulcro.client.primitives/computed\",201987962)], null),(function (){var G__64798 = k_or_ks;\nif((!(cljs.core.sequential_QMARK_(k_or_ks)))){\nreturn (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[G__64798],null));\n} else {\nreturn G__64798;\n}\n})());\nif(cljs.core.vector_QMARK_(props)){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.meta(props),ks);\n} else {\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(props,ks);\n}\n}\n}));\n\n(com.fulcrologic.fulcro.components.get_computed.cljs$lang$maxFixedArity = 2);\n\n/**\n * Get any data (as a map) that props extensions have associated with the given Fulcro component. Extra props will\n *   be empty unless you've installed props-middleware (on your app) that sets them.\n */\ncom.fulcrologic.fulcro.components.get_extra_props = (function com$fulcrologic$fulcro$components$get_extra_props(this$){\nreturn com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$3(this$,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),new cljs.core.Keyword(null,\"fulcro$extra_props\",\"fulcro$extra_props\",-499585470)], null),cljs.core.PersistentArrayMap.EMPTY);\n});\n/**\n * Return a component's props.\n */\ncom.fulcrologic.fulcro.components.props = (function com$fulcrologic$fulcro$components$props(component){\nvar props_from_parent = com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2(component,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),new cljs.core.Keyword(null,\"fulcro$value\",\"fulcro$value\",818270554)], null));\nvar computed_from_parent = com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1(props_from_parent);\nvar props_from_updates = com.fulcrologic.fulcro.components.computed(com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2(component,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(null,\"fulcro$value\",\"fulcro$value\",818270554)], null)),computed_from_parent);\nreturn com.fulcrologic.fulcro.components.newer_props(props_from_parent,props_from_updates);\n});\n/**\n * Get the sequence of react children of the given component.\n */\ncom.fulcrologic.fulcro.components.children = (function com$fulcrologic$fulcro$components$children(component){\nvar cs = goog.object.getValueByKeys(component,\"props\",\"children\");\nif(((cljs.core.coll_QMARK_(cs)) || (cljs.core.array_QMARK_(cs)))){\nreturn cs;\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cs], null);\n}\n});\n/**\n * Returns the component type, regardless of whether the component has been\n * mounted\n */\ncom.fulcrologic.fulcro.components.react_type = (function com$fulcrologic$fulcro$components$react_type(x){\nvar or__4126__auto__ = goog.object.get(x,\"type\");\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.type(x);\n}\n});\n/**\n * Returns the react type (component class) of the given React element (instance). Is identity if used on a class.\n */\ncom.fulcrologic.fulcro.components.get_class = (function com$fulcrologic$fulcro$components$get_class(instance){\nreturn com.fulcrologic.fulcro.components.react_type(instance);\n});\n/**\n * Returns the map of options that was specified (via `defsc`) for the component class.\n */\ncom.fulcrologic.fulcro.components.component_options = (function com$fulcrologic$fulcro$components$component_options(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___65067 = arguments.length;\nvar i__4737__auto___65068 = (0);\nwhile(true){\nif((i__4737__auto___65068 < len__4736__auto___65067)){\nargs__4742__auto__.push((arguments[i__4737__auto___65068]));\n\nvar G__65069 = (i__4737__auto___65068 + (1));\ni__4737__auto___65068 = G__65069;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic = (function (instance_or_class,ks){\nvar c = com.fulcrologic.fulcro.components.react_type(instance_or_class);\nvar options = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(instance_or_class,new cljs.core.Keyword(null,\"fulcro$options\",\"fulcro$options\",-1332196811));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(c,new cljs.core.Keyword(null,\"fulcro$options\",\"fulcro$options\",-1332196811));\n}\n})();\nif(cljs.core.seq(options)){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(options,cljs.core.vec(ks));\n} else {\nreturn options;\n}\n}));\n\n(com.fulcrologic.fulcro.components.component_options.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.components.component_options.cljs$lang$applyTo = (function (seq64815){\nvar G__64816 = cljs.core.first(seq64815);\nvar seq64815__$1 = cljs.core.next(seq64815);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64816,seq64815__$1);\n}));\n\ncom.fulcrologic.fulcro.components.has_feature_QMARK_ = (function com$fulcrologic$fulcro$components$has_feature_QMARK_(component,option_key){\nreturn cljs.core.contains_QMARK_(com.fulcrologic.fulcro.components.component_options(component),option_key);\n});\ncom.fulcrologic.fulcro.components.has_initial_app_state_QMARK_ = (function com$fulcrologic$fulcro$components$has_initial_app_state_QMARK_(component){\nreturn com.fulcrologic.fulcro.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806));\n});\ncom.fulcrologic.fulcro.components.has_ident_QMARK_ = (function com$fulcrologic$fulcro$components$has_ident_QMARK_(component){\nreturn com.fulcrologic.fulcro.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346));\n});\ncom.fulcrologic.fulcro.components.has_query_QMARK_ = (function com$fulcrologic$fulcro$components$has_query_QMARK_(component){\nreturn com.fulcrologic.fulcro.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\n});\ncom.fulcrologic.fulcro.components.has_pre_merge_QMARK_ = (function com$fulcrologic$fulcro$components$has_pre_merge_QMARK_(component){\nreturn com.fulcrologic.fulcro.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"pre-merge\",\"pre-merge\",-567117148));\n});\ncom.fulcrologic.fulcro.components.ident = (function com$fulcrologic$fulcro$components$ident(this$,props){\nif(com.fulcrologic.fulcro.components.has_feature_QMARK_(this$,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346))){\nvar fexpr__64830 = com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(this$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"ident\",\"ident\",-742346)], 0));\nreturn (fexpr__64830.cljs$core$IFn$_invoke$arity$2 ? fexpr__64830.cljs$core$IFn$_invoke$arity$2(this$,props) : fexpr__64830.call(null,this$,props));\n} else {\nreturn null;\n}\n});\ncom.fulcrologic.fulcro.components.query = (function com$fulcrologic$fulcro$components$query(this$){\nif(com.fulcrologic.fulcro.components.has_feature_QMARK_(this$,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))){\nvar fexpr__64833 = com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(this$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], 0));\nreturn (fexpr__64833.cljs$core$IFn$_invoke$arity$1 ? fexpr__64833.cljs$core$IFn$_invoke$arity$1(this$) : fexpr__64833.call(null,this$));\n} else {\nreturn null;\n}\n});\ncom.fulcrologic.fulcro.components.initial_state = (function com$fulcrologic$fulcro$components$initial_state(clz,params){\nif(com.fulcrologic.fulcro.components.has_feature_QMARK_(clz,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806))){\nvar fexpr__64834 = com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(clz,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806)], 0));\nreturn (fexpr__64834.cljs$core$IFn$_invoke$arity$1 ? fexpr__64834.cljs$core$IFn$_invoke$arity$1(params) : fexpr__64834.call(null,params));\n} else {\nreturn null;\n}\n});\ncom.fulcrologic.fulcro.components.pre_merge = (function com$fulcrologic$fulcro$components$pre_merge(this$,data){\nif(com.fulcrologic.fulcro.components.has_feature_QMARK_(this$,new cljs.core.Keyword(null,\"pre-merge\",\"pre-merge\",-567117148))){\nvar fexpr__64837 = com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(this$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"pre-merge\",\"pre-merge\",-567117148)], 0));\nreturn (fexpr__64837.cljs$core$IFn$_invoke$arity$1 ? fexpr__64837.cljs$core$IFn$_invoke$arity$1(data) : fexpr__64837.call(null,data));\n} else {\nreturn null;\n}\n});\ncom.fulcrologic.fulcro.components.depth = (function com$fulcrologic$fulcro$components$depth(this$){\nreturn com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2(this$,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),new cljs.core.Keyword(null,\"fulcro$depth\",\"fulcro$depth\",1963025807)], null));\n});\n/**\n * GET a RAW react prop. Used internally. Safe in CLJC, but equivalent to `(gobj/getValueByKeys this \"props\" (name k)`.\n */\ncom.fulcrologic.fulcro.components.get_raw_react_prop = (function com$fulcrologic$fulcro$components$get_raw_react_prop(c,k){\nreturn com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2(c,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),k], null));\n});\n/**\n * Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\n *   or an atom holding any of the above.\n */\ncom.fulcrologic.fulcro.components.any__GT_app = (function com$fulcrologic$fulcro$components$any__GT_app(x){\nvar fulcro_app_QMARK_ = (function com$fulcrologic$fulcro$components$any__GT_app_$_fulcro_app_QMARK_(x__$1){\nreturn ((cljs.core.map_QMARK_(x__$1)) && (cljs.core.contains_QMARK_(x__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366))));\n});\nif(com.fulcrologic.fulcro.components.component_instance_QMARK_(x)){\nreturn com.fulcrologic.fulcro.components.get_raw_react_prop(x,new cljs.core.Keyword(null,\"fulcro$app\",\"fulcro$app\",-1270465306));\n} else {\nif(cljs.core.truth_(fulcro_app_QMARK_(x))){\nreturn x;\n} else {\nif((((!((x == null))))?(((((x.cljs$lang$protocol_mask$partition0$ & (32768))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IDeref$))))?true:(((!x.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.IDeref,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IDeref,x))){\nvar G__64846 = cljs.core.deref(x);\nreturn (com.fulcrologic.fulcro.components.any__GT_app.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.any__GT_app.cljs$core$IFn$_invoke$arity$1(G__64846) : com.fulcrologic.fulcro.components.any__GT_app.call(null,G__64846));\n} else {\nreturn null;\n}\n}\n}\n});\n/**\n * Using raw react props/state returns the newest Fulcro props. This is part of \"props tunneling\", where component\n *   local state is leveraged as a communication mechanism of updated props directly to a component that has an ident.\n *   This function will return the correct version of props based on timestamps.\n */\ncom.fulcrologic.fulcro.components.raw__GT_newest_props = (function com$fulcrologic$fulcro$components$raw__GT_newest_props(raw_props,raw_state){\nvar next_props = goog.object.get(raw_props,\"fulcro$value\");\nvar opt_props = goog.object.get(raw_state,\"fulcro$value\");\nreturn com.fulcrologic.fulcro.components.newer_props(next_props,opt_props);\n});\n/**\n * Return the global shared properties of the root. See :shared and\n * :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\n * `app/update-shared!`.\n * \n * This function attempts to rely on the dynamic var *shared* (first), but will make a best-effort of\n * finding shared props when run within a component's render or lifecycle. Passing your app will\n * ensure this returns the current shared props.\n */\ncom.fulcrologic.fulcro.components.shared = (function com$fulcrologic$fulcro$components$shared(var_args){\nvar G__64854 = arguments.length;\nswitch (G__64854) {\ncase 1:\nreturn com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1 = (function (comp_or_app){\nreturn com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$2(comp_or_app,cljs.core.PersistentVector.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$2 = (function (comp_or_app,k_or_ks){\nvar shared = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar G__64857 = com.fulcrologic.fulcro.components.any__GT_app(comp_or_app);\nvar G__64857__$1 = (((G__64857 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__64857));\nvar G__64857__$2 = (((G__64857__$1 == null))?null:cljs.core.deref(G__64857__$1));\nif((G__64857__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"shared-props\",\"com.fulcrologic.fulcro.application/shared-props\",-554105157).cljs$core$IFn$_invoke$arity$1(G__64857__$2);\n}\n}\n})();\nvar ks = (function (){var G__64858 = k_or_ks;\nif((!(cljs.core.sequential_QMARK_(k_or_ks)))){\nreturn (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[G__64858],null));\n} else {\nreturn G__64858;\n}\n})();\nvar G__64861 = shared;\nif((!(cljs.core.empty_QMARK_(ks)))){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(G__64861,ks);\n} else {\nreturn G__64861;\n}\n}));\n\n(com.fulcrologic.fulcro.components.shared.cljs$lang$maxFixedArity = 2);\n\nvar static_wrap_props_state_handler = (function com$fulcrologic$fulcro$components$static_wrap_props_state_handler(handler){\nreturn (function (raw_props,raw_state){\nvar props = com.fulcrologic.fulcro.components.raw__GT_newest_props(raw_props,raw_state);\nvar state = goog.object.get(raw_state,\"fulcro$state\");\nreturn (handler.cljs$core$IFn$_invoke$arity$2 ? handler.cljs$core$IFn$_invoke$arity$2(props,state) : handler.call(null,props,state));\n});\n});\nvar wrap_props_state_handler = (function() {\nvar com$fulcrologic$fulcro$components$wrap_props_state_handler = null;\nvar com$fulcrologic$fulcro$components$wrap_props_state_handler__1 = (function (handler){\nreturn com$fulcrologic$fulcro$components$wrap_props_state_handler.cljs$core$IFn$_invoke$arity$2(handler,true);\n});\nvar com$fulcrologic$fulcro$components$wrap_props_state_handler__2 = (function (handler,check_for_fresh_props_in_state_QMARK_){\nreturn (function (raw_props,raw_state){\nvar this$ = this;\nvar props = (cljs.core.truth_(check_for_fresh_props_in_state_QMARK_)?com.fulcrologic.fulcro.components.raw__GT_newest_props(raw_props,raw_state):goog.object.get(raw_props,\"fulcro$props\"));\nvar state = goog.object.get(raw_state,\"fulcro$state\");\nreturn (handler.cljs$core$IFn$_invoke$arity$3 ? handler.cljs$core$IFn$_invoke$arity$3(this$,props,state) : handler.call(null,this$,props,state));\n});\n});\ncom$fulcrologic$fulcro$components$wrap_props_state_handler = function(handler,check_for_fresh_props_in_state_QMARK_){\nswitch(arguments.length){\ncase 1:\nreturn com$fulcrologic$fulcro$components$wrap_props_state_handler__1.call(this,handler);\ncase 2:\nreturn com$fulcrologic$fulcro$components$wrap_props_state_handler__2.call(this,handler,check_for_fresh_props_in_state_QMARK_);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ncom$fulcrologic$fulcro$components$wrap_props_state_handler.cljs$core$IFn$_invoke$arity$1 = com$fulcrologic$fulcro$components$wrap_props_state_handler__1;\ncom$fulcrologic$fulcro$components$wrap_props_state_handler.cljs$core$IFn$_invoke$arity$2 = com$fulcrologic$fulcro$components$wrap_props_state_handler__2;\nreturn com$fulcrologic$fulcro$components$wrap_props_state_handler;\n})()\n;\nvar component_did_mount = (function com$fulcrologic$fulcro$components$component_did_mount(){\nvar this$ = this;\ngoog.object.set(this$,\"fulcro$mounted\",true);\n\nvar map__64892 = com.fulcrologic.fulcro.components.component_options(this$);\nvar map__64892__$1 = (((((!((map__64892 == null))))?(((((map__64892.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64892.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64892):map__64892);\nvar componentDidMount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64892__$1,new cljs.core.Keyword(null,\"componentDidMount\",\"componentDidMount\",955710936));\nvar app = com.fulcrologic.fulcro.components.any__GT_app(this$);\nvar index_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"index-component!\",\"index-component!\",-1202750708));\n(index_component_BANG_.cljs$core$IFn$_invoke$arity$1 ? index_component_BANG_.cljs$core$IFn$_invoke$arity$1(this$) : index_component_BANG_.call(null,this$));\n\nif(cljs.core.truth_(componentDidMount)){\nreturn (componentDidMount.cljs$core$IFn$_invoke$arity$1 ? componentDidMount.cljs$core$IFn$_invoke$arity$1(this$) : componentDidMount.call(null,this$));\n} else {\nreturn null;\n}\n});\nvar component_did_update = (function com$fulcrologic$fulcro$components$component_did_update(raw_prev_props,raw_prev_state,snapshot){\nvar this$ = this;\nvar map__64894 = com.fulcrologic.fulcro.components.component_options(this$);\nvar map__64894__$1 = (((((!((map__64894 == null))))?(((((map__64894.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64894.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64894):map__64894);\nvar ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64894__$1,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346));\nvar componentDidUpdate = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64894__$1,new cljs.core.Keyword(null,\"componentDidUpdate\",\"componentDidUpdate\",-1983477981));\nvar prev_state = goog.object.get(raw_prev_state,\"fulcro$state\");\nvar prev_props = com.fulcrologic.fulcro.components.raw__GT_newest_props(raw_prev_props,raw_prev_state);\nif(cljs.core.truth_(componentDidUpdate)){\n(componentDidUpdate.cljs$core$IFn$_invoke$arity$4 ? componentDidUpdate.cljs$core$IFn$_invoke$arity$4(this$,prev_props,prev_state,snapshot) : componentDidUpdate.call(null,this$,prev_props,prev_state,snapshot));\n} else {\n}\n\nif(cljs.core.truth_(ident)){\nvar old_ident = (ident.cljs$core$IFn$_invoke$arity$2 ? ident.cljs$core$IFn$_invoke$arity$2(this$,prev_props) : ident.call(null,this$,prev_props));\nvar next_ident = (function (){var G__64896 = this$;\nvar G__64897 = com.fulcrologic.fulcro.components.props(this$);\nreturn (ident.cljs$core$IFn$_invoke$arity$2 ? ident.cljs$core$IFn$_invoke$arity$2(G__64896,G__64897) : ident.call(null,G__64896,G__64897));\n})();\nvar app = com.fulcrologic.fulcro.components.any__GT_app(this$);\nvar drop_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"drop-component!\",\"drop-component!\",183893156));\nvar index_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"index-component!\",\"index-component!\",-1202750708));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(old_ident,next_ident)){\n(drop_component_BANG_.cljs$core$IFn$_invoke$arity$2 ? drop_component_BANG_.cljs$core$IFn$_invoke$arity$2(this$,old_ident) : drop_component_BANG_.call(null,this$,old_ident));\n\nreturn (index_component_BANG_.cljs$core$IFn$_invoke$arity$1 ? index_component_BANG_.cljs$core$IFn$_invoke$arity$1(this$) : index_component_BANG_.call(null,this$));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nvar should_component_update_QMARK_ = (function com$fulcrologic$fulcro$components$should_component_update_QMARK_(raw_next_props,raw_next_state){\nif(cljs.core.truth_(com.fulcrologic.fulcro.components._STAR_blindly_render_STAR_)){\nreturn true;\n} else {\nvar this$ = this;\nvar current_props = com.fulcrologic.fulcro.components.props(this$);\nvar next_props = com.fulcrologic.fulcro.components.raw__GT_newest_props(raw_next_props,raw_next_state);\nvar next_state = goog.object.get(raw_next_state,\"fulcro$state\");\nvar current_state = goog.object.getValueByKeys(this$,\"state\",\"fulcro$state\");\nvar props_changed_QMARK_ = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(current_props,next_props);\nvar state_changed_QMARK_ = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(current_state,next_state);\nvar next_children = goog.object.get(raw_next_props,\"children\");\nvar children_changed_QMARK_ = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(goog.object.getValueByKeys(this$,\"props\",\"children\"),next_children);\nreturn ((props_changed_QMARK_) || (state_changed_QMARK_) || (children_changed_QMARK_));\n}\n});\nvar wrap_props_handler = (function() {\nvar com$fulcrologic$fulcro$components$wrap_props_handler = null;\nvar com$fulcrologic$fulcro$components$wrap_props_handler__1 = (function (handler){\nreturn com$fulcrologic$fulcro$components$wrap_props_handler.cljs$core$IFn$_invoke$arity$2(handler,true);\n});\nvar com$fulcrologic$fulcro$components$wrap_props_handler__2 = (function (handler,check_for_fresh_props_in_state_QMARK_){\nreturn (function (raw_props){\nvar this$ = this;\nvar raw_state = this$.state;\nvar props = (cljs.core.truth_(check_for_fresh_props_in_state_QMARK_)?com.fulcrologic.fulcro.components.raw__GT_newest_props(raw_props,raw_state):goog.object.get(raw_props,\"fulcro$props\"));\nreturn (handler.cljs$core$IFn$_invoke$arity$2 ? handler.cljs$core$IFn$_invoke$arity$2(this$,props) : handler.call(null,this$,props));\n});\n});\ncom$fulcrologic$fulcro$components$wrap_props_handler = function(handler,check_for_fresh_props_in_state_QMARK_){\nswitch(arguments.length){\ncase 1:\nreturn com$fulcrologic$fulcro$components$wrap_props_handler__1.call(this,handler);\ncase 2:\nreturn com$fulcrologic$fulcro$components$wrap_props_handler__2.call(this,handler,check_for_fresh_props_in_state_QMARK_);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ncom$fulcrologic$fulcro$components$wrap_props_handler.cljs$core$IFn$_invoke$arity$1 = com$fulcrologic$fulcro$components$wrap_props_handler__1;\ncom$fulcrologic$fulcro$components$wrap_props_handler.cljs$core$IFn$_invoke$arity$2 = com$fulcrologic$fulcro$components$wrap_props_handler__2;\nreturn com$fulcrologic$fulcro$components$wrap_props_handler;\n})()\n;\nvar wrap_this = (function com$fulcrologic$fulcro$components$wrap_this(handler){\nreturn (function() { \nvar G__65092__delegate = function (args){\nvar this$ = this;\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(handler,this$,args);\n};\nvar G__65092 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__65093__i = 0, G__65093__a = new Array(arguments.length -  0);\nwhile (G__65093__i < G__65093__a.length) {G__65093__a[G__65093__i] = arguments[G__65093__i + 0]; ++G__65093__i;}\n  args = new cljs.core.IndexedSeq(G__65093__a,0,null);\n} \nreturn G__65092__delegate.call(this,args);};\nG__65092.cljs$lang$maxFixedArity = 0;\nG__65092.cljs$lang$applyTo = (function (arglist__65094){\nvar args = cljs.core.seq(arglist__65094);\nreturn G__65092__delegate(args);\n});\nG__65092.cljs$core$IFn$_invoke$arity$variadic = G__65092__delegate;\nreturn G__65092;\n})()\n;\n});\nvar wrap_base_render = (function com$fulcrologic$fulcro$components$wrap_base_render(render){\nreturn (function() { \nvar G__65095__delegate = function (args){\nvar this$ = this;\nvar temp__5733__auto__ = com.fulcrologic.fulcro.components.any__GT_app(this$);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar app = temp__5733__auto__;\nvar _STAR_app_STAR__orig_val__64898 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nvar _STAR_depth_STAR__orig_val__64899 = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\nvar _STAR_shared_STAR__orig_val__64900 = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\nvar _STAR_parent_STAR__orig_val__64901 = com.fulcrologic.fulcro.components._STAR_parent_STAR_;\nvar _STAR_app_STAR__temp_val__64902 = app;\nvar _STAR_depth_STAR__temp_val__64903 = (com.fulcrologic.fulcro.components.depth(this$) + (1));\nvar _STAR_shared_STAR__temp_val__64904 = com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1(this$);\nvar _STAR_parent_STAR__temp_val__64905 = this$;\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__temp_val__64902);\n\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__temp_val__64903);\n\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__temp_val__64904);\n\n(com.fulcrologic.fulcro.components._STAR_parent_STAR_ = _STAR_parent_STAR__temp_val__64905);\n\ntry{return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(render,this$,args);\n}finally {(com.fulcrologic.fulcro.components._STAR_parent_STAR_ = _STAR_parent_STAR__orig_val__64901);\n\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__orig_val__64900);\n\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__orig_val__64899);\n\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__orig_val__64898);\n}} else {\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.components\",null,395,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot find app on component!\"], null);\n}),null)),null,1244761933);\n}\n};\nvar G__65095 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__65096__i = 0, G__65096__a = new Array(arguments.length -  0);\nwhile (G__65096__i < G__65096__a.length) {G__65096__a[G__65096__i] = arguments[G__65096__i + 0]; ++G__65096__i;}\n  args = new cljs.core.IndexedSeq(G__65096__a,0,null);\n} \nreturn G__65095__delegate.call(this,args);};\nG__65095.cljs$lang$maxFixedArity = 0;\nG__65095.cljs$lang$applyTo = (function (arglist__65097){\nvar args = cljs.core.seq(arglist__65097);\nreturn G__65095__delegate(args);\n});\nG__65095.cljs$core$IFn$_invoke$arity$variadic = G__65095__delegate;\nreturn G__65095;\n})()\n;\n});\nvar component_will_unmount = (function com$fulcrologic$fulcro$components$component_will_unmount(){\nvar this$ = this;\nvar map__64906 = com.fulcrologic.fulcro.components.component_options(this$);\nvar map__64906__$1 = (((((!((map__64906 == null))))?(((((map__64906.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64906.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64906):map__64906);\nvar componentWillUnmount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64906__$1,new cljs.core.Keyword(null,\"componentWillUnmount\",\"componentWillUnmount\",1573788814));\nvar app = com.fulcrologic.fulcro.components.any__GT_app(this$);\nvar drop_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"drop-component!\",\"drop-component!\",183893156));\nif(cljs.core.truth_(componentWillUnmount)){\n(componentWillUnmount.cljs$core$IFn$_invoke$arity$1 ? componentWillUnmount.cljs$core$IFn$_invoke$arity$1(this$) : componentWillUnmount.call(null,this$));\n} else {\n}\n\ngoog.object.set(this$,\"fulcro$mounted\",false);\n\nreturn (drop_component_BANG_.cljs$core$IFn$_invoke$arity$1 ? drop_component_BANG_.cljs$core$IFn$_invoke$arity$1(this$) : drop_component_BANG_.call(null,this$));\n});\n/**\n * Configure the given `cls` (a function) to act as a react component within the Fulcro ecosystem.\n * \n *  cls - A js function (in clj, this is ignored)\n *  fqkw - A keyword that shares the exact fully-qualified name of the component class\n *  options - A component options map (no magic) containing things like `:query` and `:ident`.\n * \n * \n *  NOTE: the `options` map expects proper function signatures for:\n * \n *  `:query` - (fn [this] ...)\n *  `:ident` - (fn [this props] ...)\n *  `:initial-state` - (fn [cls params] ...)\n * \n *  Returns (and registers) a new react class.\n *  \n */\ncom.fulcrologic.fulcro.components.configure_component_BANG_ = (function com$fulcrologic$fulcro$components$configure_component_BANG_(cls,fqkw,options){\nvar map__64908 = options;\nvar map__64908__$1 = (((((!((map__64908 == null))))?(((((map__64908.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64908.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64908):map__64908);\nvar initLocalState = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"initLocalState\",\"initLocalState\",-46503876));\nvar componentWillMount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"componentWillMount\",\"componentWillMount\",-285327619));\nvar componentDidCatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"componentDidCatch\",\"componentDidCatch\",821717733));\nvar UNSAFE_componentWillMount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"UNSAFE_componentWillMount\",\"UNSAFE_componentWillMount\",1700079910));\nvar getSnapshotBeforeUpdate = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"getSnapshotBeforeUpdate\",\"getSnapshotBeforeUpdate\",861122184));\nvar UNSAFE_componentWillUpdate = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"UNSAFE_componentWillUpdate\",\"UNSAFE_componentWillUpdate\",-271932214));\nvar getDerivedStateFromProps = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"getDerivedStateFromProps\",\"getDerivedStateFromProps\",-991834739));\nvar getDerivedStateFromError = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"getDerivedStateFromError\",\"getDerivedStateFromError\",166658477));\nvar componentWillReceiveProps = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"componentWillReceiveProps\",\"componentWillReceiveProps\",559988974));\nvar shouldComponentUpdate = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960));\nvar render = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"render\",\"render\",-1408033454));\nvar componentWillUpdate = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"componentWillUpdate\",\"componentWillUpdate\",657390932));\nvar UNSAFE_componentWillReceiveProps = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64908__$1,new cljs.core.Keyword(null,\"UNSAFE_componentWillReceiveProps\",\"UNSAFE_componentWillReceiveProps\",349396983));\nvar name = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"/\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.namespace(fqkw),cljs.core.name(fqkw)], null));\nvar js_instance_props = cljs.core.clj__GT_js((function (){var G__64910 = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"componentDidMount\",\"componentDidMount\",955710936),component_did_mount,new cljs.core.Keyword(null,\"componentWillUnmount\",\"componentWillUnmount\",1573788814),component_will_unmount,new cljs.core.Keyword(null,\"componentDidUpdate\",\"componentDidUpdate\",-1983477981),component_did_update,new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960),(cljs.core.truth_(shouldComponentUpdate)?wrap_props_state_handler(shouldComponentUpdate):should_component_update_QMARK_),new cljs.core.Keyword(null,\"fulcro$isComponent\",\"fulcro$isComponent\",2094954844),true,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),cls,new cljs.core.Keyword(null,\"displayName\",\"displayName\",-809144601),name], null);\nvar G__64910__$1 = (cljs.core.truth_(render)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64910,new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),wrap_base_render(render)):G__64910);\nvar G__64910__$2 = (cljs.core.truth_(getSnapshotBeforeUpdate)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64910__$1,new cljs.core.Keyword(null,\"getSnapshotBeforeUpdate\",\"getSnapshotBeforeUpdate\",861122184),wrap_props_state_handler(getSnapshotBeforeUpdate)):G__64910__$1);\nvar G__64910__$3 = (cljs.core.truth_(componentDidCatch)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64910__$2,new cljs.core.Keyword(null,\"componentDidCatch\",\"componentDidCatch\",821717733),wrap_this(componentDidCatch)):G__64910__$2);\nvar G__64910__$4 = (cljs.core.truth_(UNSAFE_componentWillMount)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64910__$3,new cljs.core.Keyword(null,\"UNSAFE_componentWillMount\",\"UNSAFE_componentWillMount\",1700079910),wrap_this(UNSAFE_componentWillMount)):G__64910__$3);\nvar G__64910__$5 = (cljs.core.truth_(UNSAFE_componentWillUpdate)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64910__$4,new cljs.core.Keyword(null,\"UNSAFE_componentWillUpdate\",\"UNSAFE_componentWillUpdate\",-271932214),wrap_props_state_handler(UNSAFE_componentWillUpdate)):G__64910__$4);\nvar G__64910__$6 = (cljs.core.truth_(UNSAFE_componentWillReceiveProps)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64910__$5,new cljs.core.Keyword(null,\"UNSAFE_componentWillReceiveProps\",\"UNSAFE_componentWillReceiveProps\",349396983),wrap_props_handler(UNSAFE_componentWillReceiveProps)):G__64910__$5);\nvar G__64910__$7 = (cljs.core.truth_(componentWillMount)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64910__$6,new cljs.core.Keyword(null,\"componentWillMount\",\"componentWillMount\",-285327619),wrap_this(componentWillMount)):G__64910__$6);\nvar G__64910__$8 = (cljs.core.truth_(componentWillUpdate)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64910__$7,new cljs.core.Keyword(null,\"componentWillUpdate\",\"componentWillUpdate\",657390932),wrap_this(componentWillUpdate)):G__64910__$7);\nvar G__64910__$9 = (cljs.core.truth_(componentWillReceiveProps)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64910__$8,new cljs.core.Keyword(null,\"componentWillReceiveProps\",\"componentWillReceiveProps\",559988974),wrap_props_handler(componentWillReceiveProps)):G__64910__$8);\nif(cljs.core.truth_(initLocalState)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64910__$9,new cljs.core.Keyword(null,\"initLocalState\",\"initLocalState\",-46503876),wrap_this(initLocalState));\n} else {\nreturn G__64910__$9;\n}\n})());\nvar statics = (function (){var G__64911 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"displayName\",\"displayName\",-809144601),name,new cljs.core.Keyword(null,\"fulcro$class\",\"fulcro$class\",-1213203837),cls,new cljs.core.Keyword(null,\"cljs$lang$type\",\"cljs$lang$type\",2136418717),true,new cljs.core.Keyword(null,\"cljs$lang$ctorStr\",\"cljs$lang$ctorStr\",1406571315),name,new cljs.core.Keyword(null,\"cljs$lang$ctorPrWriter\",\"cljs$lang$ctorPrWriter\",-112192216),(function (_,writer,___$1){\nreturn cljs.core._write(writer,name);\n})], null);\nvar G__64911__$1 = (cljs.core.truth_(getDerivedStateFromError)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64911,new cljs.core.Keyword(null,\"getDerivedStateFromError\",\"getDerivedStateFromError\",166658477),(function (error){\nvar v = (getDerivedStateFromError.cljs$core$IFn$_invoke$arity$1 ? getDerivedStateFromError.cljs$core$IFn$_invoke$arity$1(error) : getDerivedStateFromError.call(null,error));\nif(cljs.core.coll_QMARK_(v)){\nreturn ({\"fulcro$state\": v});\n} else {\nreturn v;\n}\n})):G__64911);\nif(cljs.core.truth_(getDerivedStateFromProps)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64911__$1,new cljs.core.Keyword(null,\"getDerivedStateFromProps\",\"getDerivedStateFromProps\",-991834739),static_wrap_props_state_handler(getDerivedStateFromProps));\n} else {\nreturn G__64911__$1;\n}\n})();\ngoog.object.extend(cls.prototype,React.Component.prototype,js_instance_props,({\"fulcro$options\": options}));\n\ngoog.object.extend(cls,cljs.core.clj__GT_js(statics),({\"fulcro$options\": options}));\n\ngoog.object.set(cls,\"fulcro$registryKey\",fqkw);\n\nreturn com.fulcrologic.fulcro.components.register_component_BANG_(fqkw,cls);\n});\n/**\n * Make a given `cls` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\n *   new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\n *   keyword to name the component in the registry.\n * \n *   component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\n *   function as the faux class in the component registry.\n */\ncom.fulcrologic.fulcro.components.add_hook_options_BANG_ = (function com$fulcrologic$fulcro$components$add_hook_options_BANG_(render_fn,component_options){\nvar k = new cljs.core.Keyword(null,\"componentName\",\"componentName\",-2103437555).cljs$core$IFn$_invoke$arity$1(component_options);\nvar faux_classname = cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4126__auto__ = k;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Missing :componentName for hooks component\",cljs.core.PersistentArrayMap.EMPTY);\n}\n})());\ngoog.object.extend(render_fn,({\"fulcro$options\": component_options, \"displayName\": faux_classname, \"fulcro$class\": render_fn, \"type\": render_fn, \"cljs$lang$type\": true, \"cljs$lang$ctorStr\": faux_classname, \"cljs$lang$ctorPrWriter\": (function (_,writer,___$1){\nreturn cljs.core._write(writer,faux_classname);\n}), \"fulcro$registryKey\": new cljs.core.Keyword(null,\"componentName\",\"componentName\",-2103437555).cljs$core$IFn$_invoke$arity$1(component_options)}));\n\ncom.fulcrologic.fulcro.components.register_component_BANG_(k,render_fn);\n\nreturn render_fn;\n});\n/**\n * Allows you to use a plain function as a Fulcro-managed React hooks component.\n * \n *   * `js-props` - The React js props from the parent.\n *   * `faux-class` - A Fulcro faux class, which is a fn that has had `add-options!` called on it.\n * \n *   Returns a cljs vector containing `this` and fulcro `props`. You should *not* use the returned `this` directly,\n *   as it is a placeholder.\n * \n *   Prefer `defsc` or `configure-hooks-component! over using this directly.`\n *   \n */\ncom.fulcrologic.fulcro.components.use_fulcro = (function com$fulcrologic$fulcro$components$use_fulcro(js_props,faux_class){\nvar app = com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(js_props,new cljs.core.Keyword(null,\"fulcro$app\",\"fulcro$app\",-1270465306));\nvar tunnelled_props_state = React.useState(({}));\nvar js_set_tunnelled_props_BANG_ = (tunnelled_props_state[(1)]);\nvar map__64912 = com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(faux_class,new cljs.core.Keyword(null,\"fulcro$options\",\"fulcro$options\",-1332196811));\nvar map__64912__$1 = (((((!((map__64912 == null))))?(((((map__64912.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64912.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64912):map__64912);\nvar options = map__64912__$1;\nvar ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64912__$1,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346));\nvar faux_component_state = React.useState((function (){\nif(cljs.core.truth_(app)){\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,510,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot create proper fulcro component, as *app* isn't bound.\",\"This happens when something renders a Fulcro component outside of Fulcro's render context.\",\"See `with-parent-context`.\"], null);\n}),null)),null,-501380439);\n}\n\nvar depth = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(js_props,new cljs.core.Keyword(null,\"fulcro$depth\",\"fulcro$depth\",1963025807));\n}\n})();\nvar set_tunnelled_props_BANG_ = (function (updater){\nvar new_props = (updater.cljs$core$IFn$_invoke$arity$1 ? updater.cljs$core$IFn$_invoke$arity$1(null) : updater.call(null,null));\nreturn (js_set_tunnelled_props_BANG_.cljs$core$IFn$_invoke$arity$1 ? js_set_tunnelled_props_BANG_.cljs$core$IFn$_invoke$arity$1(new_props) : js_set_tunnelled_props_BANG_.call(null,new_props));\n});\nreturn ({\"setState\": set_tunnelled_props_BANG_, \"fulcro$isComponent\": true, \"fulcro$class\": faux_class, \"type\": faux_class, \"fulcro$options\": options, \"fulcro$mounted\": false, \"props\": ({\"fulcro$app\": app, \"fulcro$depth\": (depth + (1))})});\n}));\nvar faux_component = (faux_component_state[(0)]);\nvar current_state = (tunnelled_props_state[(0)][\"fulcro$value\"]);\nvar props = com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(js_props,new cljs.core.Keyword(null,\"fulcro$value\",\"fulcro$value\",818270554));\nvar children = com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(js_props,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar current_props = com.fulcrologic.fulcro.components.newer_props(props,current_state);\nvar current_ident = (cljs.core.truth_(ident)?(ident.cljs$core$IFn$_invoke$arity$2 ? ident.cljs$core$IFn$_invoke$arity$2(faux_class,current_props) : ident.call(null,faux_class,current_props)):null);\nvar shared_props = (cljs.core.truth_(app)?com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1(app):null);\nvar G__64914_65119 = goog.object.get(faux_component,\"props\");\ngoog.object.set(G__64914_65119,\"fulcro$shared\",shared_props);\n\ngoog.object.set(G__64914_65119,\"fulcro$value\",current_props);\n\ngoog.object.set(G__64914_65119,\"children\",children);\n\n\nReact.useEffect((function (){\nvar original_ident = current_ident;\nvar index_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"index-component!\",\"index-component!\",-1202750708));\nvar drop_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"drop-component!\",\"drop-component!\",183893156));\ngoog.object.set(faux_component,\"fulcro$mounted\",true);\n\n(index_component_BANG_.cljs$core$IFn$_invoke$arity$1 ? index_component_BANG_.cljs$core$IFn$_invoke$arity$1(faux_component) : index_component_BANG_.call(null,faux_component));\n\nreturn (function (){\ngoog.object.set(faux_component,\"fulcro$mounted\",false);\n\nreturn (drop_component_BANG_.cljs$core$IFn$_invoke$arity$2 ? drop_component_BANG_.cljs$core$IFn$_invoke$arity$2(faux_component,original_ident) : drop_component_BANG_.call(null,faux_component,original_ident));\n});\n}),[cljs.core.second(current_ident)]);\n\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [faux_component,current_props], null);\n});\n/**\n * Returns true if the given component instance is mounted on the DOM.\n */\ncom.fulcrologic.fulcro.components.mounted_QMARK_ = (function com$fulcrologic$fulcro$components$mounted_QMARK_(this$){\nreturn goog.object.get(this$,\"fulcro$mounted\",false);\n});\n/**\n * Set React component-local state.  The `new-state` is actually merged with the existing state (as per React docs),\n *   but is wrapped so that cljs maps are used (instead of js objs).  `callback` is an optional callback that will be\n *   called as per the React docs on setState.\n */\ncom.fulcrologic.fulcro.components.set_state_BANG_ = (function com$fulcrologic$fulcro$components$set_state_BANG_(var_args){\nvar G__64916 = arguments.length;\nswitch (G__64916) {\ncase 3:\nreturn com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (component,new_state,callback){\nif(cljs.core.truth_(com.fulcrologic.fulcro.components.mounted_QMARK_(component))){\nreturn component.setState((function (prev_state,props){\nreturn ({\"fulcro$state\": cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([goog.object.get(prev_state,\"fulcro$state\"),new_state], 0))});\n}),callback);\n} else {\nreturn null;\n}\n}));\n\n(com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component,new_state){\nreturn com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$3(component,new_state,null);\n}));\n\n(com.fulcrologic.fulcro.components.set_state_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Get a component's local state. May provide a single key or a sequential\n * collection of keys for indexed access into the component's local state. NOTE: This is Fulcro's wrapped component\n * local state. The low-level React state is as described in the React docs (e.g. `(.-state this)`).\n */\ncom.fulcrologic.fulcro.components.get_state = (function com$fulcrologic$fulcro$components$get_state(var_args){\nvar G__64918 = arguments.length;\nswitch (G__64918) {\ncase 1:\nreturn com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$1 = (function (component){\nreturn com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$2(component,cljs.core.PersistentVector.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$2 = (function (component,k_or_ks){\nvar cst = goog.object.getValueByKeys(component,\"state\",\"fulcro$state\");\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cst,((cljs.core.sequential_QMARK_(k_or_ks))?k_or_ks:new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k_or_ks], null)));\n}));\n\n(com.fulcrologic.fulcro.components.get_state.cljs$lang$maxFixedArity = 2);\n\nvar update_fn_65126 = (function (component,f,args){\nreturn component.setState((function (prev_state,props){\nreturn ({\"fulcro$state\": cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,goog.object.get(prev_state,\"fulcro$state\"),args)});\n}));\n});\n/**\n * Update a component's local state. Similar to Clojure(Script)'s swap!\n * \n *  This function affects a managed cljs map maintained in React state.  If you want to affect the low-level\n *  js state itself use React's own `.setState` directly on the component.\n */\ncom.fulcrologic.fulcro.components.update_state_BANG_ = (function com$fulcrologic$fulcro$components$update_state_BANG_(var_args){\nvar G__64923 = arguments.length;\nswitch (G__64923) {\ncase 2:\nreturn com.fulcrologic.fulcro.components.update_state_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4757__auto__ = [];\nvar len__4736__auto___65130 = arguments.length;\nvar i__4737__auto___65131 = (0);\nwhile(true){\nif((i__4737__auto___65131 < len__4736__auto___65130)){\nargs_arr__4757__auto__.push((arguments[i__4737__auto___65131]));\n\nvar G__65132 = (i__4737__auto___65131 + (1));\ni__4737__auto___65131 = G__65132;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((2)),(0),null));\nreturn com.fulcrologic.fulcro.components.update_state_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4758__auto__);\n\n}\n});\n\n(com.fulcrologic.fulcro.components.update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component,f){\nreturn update_fn_65126(component,f,cljs.core.PersistentVector.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.components.update_state_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (component,f,args){\nreturn update_fn_65126(component,f,args);\n}));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.components.update_state_BANG_.cljs$lang$applyTo = (function (seq64920){\nvar G__64921 = cljs.core.first(seq64920);\nvar seq64920__$1 = cljs.core.next(seq64920);\nvar G__64922 = cljs.core.first(seq64920__$1);\nvar seq64920__$2 = cljs.core.next(seq64920__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64921,G__64922,seq64920__$2);\n}));\n\n(com.fulcrologic.fulcro.components.update_state_BANG_.cljs$lang$maxFixedArity = (2));\n\n/**\n * Get the declared :initial-state value for a component.\n */\ncom.fulcrologic.fulcro.components.get_initial_state = (function com$fulcrologic$fulcro$components$get_initial_state(var_args){\nvar G__64925 = arguments.length;\nswitch (G__64925) {\ncase 1:\nreturn com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$1 = (function (class$){\nvar G__64926 = com.fulcrologic.fulcro.components.initial_state(class$,cljs.core.PersistentArrayMap.EMPTY);\nif((G__64926 == null)){\nreturn null;\n} else {\nreturn cljs.core.with_meta(G__64926,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"computed\",\"computed\",-1482016762),true], null));\n}\n}));\n\n(com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2 = (function (class$,params){\nvar G__64927 = com.fulcrologic.fulcro.components.initial_state(class$,params);\nif((G__64927 == null)){\nreturn null;\n} else {\nreturn cljs.core.with_meta(G__64927,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"computed\",\"computed\",-1482016762),true], null));\n}\n}));\n\n(com.fulcrologic.fulcro.components.get_initial_state.cljs$lang$maxFixedArity = 2);\n\n/**\n * Returns true if the given initial state was returned from a call to get-initial-state. This is used by internal\n *   algorithms when interpreting initial state shorthand in `defsc`.\n */\ncom.fulcrologic.fulcro.components.computed_initial_state_QMARK_ = (function com$fulcrologic$fulcro$components$computed_initial_state_QMARK_(s){\nif(cljs.core.map_QMARK_(s)){\nvar G__64929 = s;\nvar G__64929__$1 = (((G__64929 == null))?null:cljs.core.meta(G__64929));\nif((G__64929__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"computed\",\"computed\",-1482016762).cljs$core$IFn$_invoke$arity$1(G__64929__$1);\n}\n} else {\nreturn false;\n}\n});\n/**\n * Get the ident for a mounted component OR using a component class.\n * \n *   That arity-2 will return the ident using the supplied props map.\n * \n *   The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\n *   props that were sent to it most recently.\n */\ncom.fulcrologic.fulcro.components.get_ident = (function com$fulcrologic$fulcro$components$get_ident(var_args){\nvar G__64931 = arguments.length;\nswitch (G__64931) {\ncase 1:\nreturn com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1 = (function (x){\nif(com.fulcrologic.fulcro.components.component_instance_QMARK_(x)){\n} else {\nthrow (new Error(\"Assert failed: (component-instance? x)\"));\n}\n\nvar temp__5733__auto__ = com.fulcrologic.fulcro.components.props(x);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar m = temp__5733__auto__;\nreturn com.fulcrologic.fulcro.components.ident(x,m);\n} else {\nif(cljs.core.truth_(goog.DEBUG)){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.components\",null,621,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"get-ident was invoked on \",com.fulcrologic.fulcro.components.component_name(x),\" with nil props (this could mean it wasn't yet mounted): \",x], null);\n}),null)),null,1234729613);\n} else {\nreturn null;\n}\n}\n}));\n\n(com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2 = (function (class$,props){\nvar temp__5733__auto__ = com.fulcrologic.fulcro.components.ident(class$,props);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar id = temp__5733__auto__;\nif(cljs.core.truth_((function (){var and__4115__auto__ = goog.DEBUG;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (!(edn_query_language.core.ident_QMARK_(id)));\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.components\",null,626,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"get-ident returned an invalid ident:\",id,new cljs.core.Keyword(null,\"displayName\",\"displayName\",-809144601).cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components.component_options(class$))], null);\n}),null)),null,608894495);\n} else {\n}\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.merge\",\"not-found\",\"com.fulcrologic.fulcro.algorithms.merge/not-found\",190673437),cljs.core.second(id))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(id),null], null);\n} else {\nreturn id;\n}\n} else {\nif(cljs.core.truth_(goog.DEBUG)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.components\",null,629,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"get-ident called with something that is either not a class or does not implement ident: \",class$], null);\n}),null)),null,106983272);\n\nreturn null;\n} else {\nreturn null;\n}\n}\n}));\n\n(com.fulcrologic.fulcro.components.get_ident.cljs$lang$maxFixedArity = 2);\n\n/**\n * CLJS-only.  When the `component` is mounted this will tunnel `new-props` to that component through React `setState`. If you're in\n *   an event handler, this means the tunnelling will be synchronous, and can be useful when updating props that could affect DOM\n *   inputs. This is typically used internally (see `transact!!`, and should generally not be used in applications unless it is a very advanced\n *   scenario and you've studied how this works. NOTE: You should `tick!` the application clock and bind *denormalize-time*\n *   when generating `new-props` so they are properly time-stamped by `db->tree`, or manually add time to `new-props`\n *   using `fdn/with-time` directly.\n */\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_ = (function com$fulcrologic$fulcro$components$tunnel_props_BANG_(component,new_props){\nif(cljs.core.truth_(com.fulcrologic.fulcro.components.mounted_QMARK_(component))){\nreturn component.setState((function (s){\nreturn ({\"fulcro$value\": new_props});\n}));\n} else {\nreturn null;\n}\n});\n/**\n * Returns true if the given argument is a component factory.\n */\ncom.fulcrologic.fulcro.components.is_factory_QMARK_ = (function com$fulcrologic$fulcro$components$is_factory_QMARK_(class_or_factory){\nreturn ((cljs.core.fn_QMARK_(class_or_factory)) && (cljs.core.contains_QMARK_(cljs.core.meta(class_or_factory),new cljs.core.Keyword(null,\"qualifier\",\"qualifier\",125841738))));\n});\n/**\n * Returns a string ID for the query of the given class with qualifier.\n */\ncom.fulcrologic.fulcro.components.query_id = (function com$fulcrologic$fulcro$components$query_id(class$,qualifier){\nif((class$ == null)){\nif(cljs.core.truth_(goog.DEBUG)){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,655,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Query ID received no class (if you see this warning, it probably means metadata was lost on your query)\",cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"\",cljs.core.PersistentArrayMap.EMPTY)], null);\n}),null)),null,291771340);\n} else {\nreturn null;\n}\n} else {\nvar temp__5735__auto__ = com.fulcrologic.fulcro.components.component_name(class$);\nif(cljs.core.truth_(temp__5735__auto__)){\nvar classname = temp__5735__auto__;\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(classname),(cljs.core.truth_(qualifier)?[\"$\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(qualifier)].join(''):null)].join('');\n} else {\nreturn null;\n}\n}\n});\n/**\n * Takes a state map that may contain normalized queries and a query ID. Returns the stored query or nil.\n */\ncom.fulcrologic.fulcro.components.denormalize_query = (function com$fulcrologic$fulcro$components$denormalize_query(state_map,ID){\nvar get_stored_query = (function (id){\nvar map__64933 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),id], null));\nvar map__64933__$1 = (((((!((map__64933 == null))))?(((((map__64933.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64933.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64933):map__64933);\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64933__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar component_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64933__$1,new cljs.core.Keyword(null,\"component-key\",\"component-key\",1189239034));\nvar component = com.fulcrologic.fulcro.components.registry_key__GT_class(component_key);\nif(cljs.core.truth_(component)){\n} else {\ncljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),id], null));\n}\n\nvar G__64940 = query;\nif((G__64940 == null)){\nreturn null;\n} else {\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(G__64940,cljs.core.assoc,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),id);\n}\n});\nvar temp__5735__auto__ = get_stored_query(ID);\nif(cljs.core.truth_(temp__5735__auto__)){\nvar normalized_query = temp__5735__auto__;\nreturn clojure.walk.prewalk((function (ele){\nvar temp__5733__auto__ = ((typeof ele === 'string')?get_stored_query(ele):false);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar q = temp__5733__auto__;\nreturn q;\n} else {\nreturn ele;\n}\n}),normalized_query);\n} else {\nreturn null;\n}\n});\n/**\n * Get the query id that is cached in the component's props.\n */\ncom.fulcrologic.fulcro.components.get_query_id = (function com$fulcrologic$fulcro$components$get_query_id(component){\nreturn com.fulcrologic.fulcro.components.get_raw_react_prop(component,\"fulcro$queryid\");\n});\ncom.fulcrologic.fulcro.components.get_query_by_id = (function com$fulcrologic$fulcro$components$get_query_by_id(state_map,class$,queryid){\nvar query = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.components.denormalize_query(state_map,queryid);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.components.query(class$);\n}\n})();\nreturn cljs.core.with_meta(query,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"component\",\"component\",1555936782),class$,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),queryid], null));\n});\n/**\n * Get the query for the given class or factory. If called without a state map, then you'll get the declared static\n *   query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\n *   the current dynamically-set query according to that state.\n */\ncom.fulcrologic.fulcro.components.get_query = (function com$fulcrologic$fulcro$components$get_query(var_args){\nvar G__64947 = arguments.length;\nswitch (G__64947) {\ncase 1:\nreturn com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1 = (function (class_or_factory){\nreturn com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(class_or_factory,(function (){var or__4126__auto__ = com.fulcrologic.fulcro.components._STAR_query_state_STAR_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = (function (){var G__64949 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nvar G__64949__$1 = (((G__64949 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__64949));\nif((G__64949__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__64949__$1);\n}\n})();\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n}\n})());\n}));\n\n(com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2 = (function (class_or_factory,state_map){\nif((class_or_factory == null)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"nil passed to get-query\",cljs.core.PersistentArrayMap.EMPTY);\n} else {\n}\n\nvar _STAR_query_state_STAR__orig_val__64950 = com.fulcrologic.fulcro.components._STAR_query_state_STAR_;\nvar _STAR_query_state_STAR__temp_val__64951 = state_map;\n(com.fulcrologic.fulcro.components._STAR_query_state_STAR_ = _STAR_query_state_STAR__temp_val__64951);\n\ntry{var class$ = ((com.fulcrologic.fulcro.components.is_factory_QMARK_(class_or_factory))?new cljs.core.Keyword(null,\"class\",\"class\",-2030961996).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(class_or_factory)):((com.fulcrologic.fulcro.components.component_instance_QMARK_(class_or_factory))?com.fulcrologic.fulcro.components.react_type(class_or_factory):class_or_factory\n));\nvar class$__$1 = (cljs.core.truth_(goog.DEBUG)?com.fulcrologic.fulcro.components.registry_key__GT_class(com.fulcrologic.fulcro.components.class__GT_registry_key(class$)):class$);\nvar qualifier = ((com.fulcrologic.fulcro.components.is_factory_QMARK_(class_or_factory))?new cljs.core.Keyword(null,\"qualifier\",\"qualifier\",125841738).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(class_or_factory)):null);\nvar queryid = ((com.fulcrologic.fulcro.components.component_instance_QMARK_(class_or_factory))?com.fulcrologic.fulcro.components.get_query_id(class_or_factory):com.fulcrologic.fulcro.components.query_id(class$__$1,qualifier));\nif(cljs.core.truth_((function (){var and__4115__auto__ = class$__$1;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.components.has_query_QMARK_(class$__$1);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn com.fulcrologic.fulcro.components.get_query_by_id(state_map,class$__$1,queryid);\n} else {\nreturn null;\n}\n}finally {(com.fulcrologic.fulcro.components._STAR_query_state_STAR_ = _STAR_query_state_STAR__orig_val__64950);\n}}));\n\n(com.fulcrologic.fulcro.components.get_query.cljs$lang$maxFixedArity = 2);\n\n/**\n * Build a component's initial state using the defsc initial-state-data from\n *   options, the children from options, and the params from the invocation of get-initial-state.\n */\ncom.fulcrologic.fulcro.components.make_state_map = (function com$fulcrologic$fulcro$components$make_state_map(initial_state,children_by_query_key,params){\nvar join_keys = cljs.core.set(cljs.core.keys(children_by_query_key));\nvar init_keys = cljs.core.set(cljs.core.keys(initial_state));\nvar is_child_QMARK_ = (function (k){\nreturn cljs.core.contains_QMARK_(join_keys,k);\n});\nvar value_of = (function com$fulcrologic$fulcro$components$make_state_map_$_value_of_STAR_(p__64952){\nvar vec__64953 = p__64952;\nvar isk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64953,(0),null);\nvar isv = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64953,(1),null);\nvar param_name = (function (v){\nif((v instanceof cljs.core.Keyword)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"param\",cljs.core.namespace(v))){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.name(v));\n} else {\nreturn false;\n}\n} else {\nreturn false;\n}\n});\nvar substitute = (function (ele){\nvar temp__5733__auto__ = param_name(ele);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar k = temp__5733__auto__;\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(params,k);\n} else {\nreturn ele;\n}\n});\nvar param_key = param_name(isv);\nvar param_exists_QMARK_ = cljs.core.contains_QMARK_(params,param_key);\nvar param_value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(params,param_key);\nvar child_class = cljs.core.get.cljs$core$IFn$_invoke$arity$2(children_by_query_key,isk);\nif(cljs.core.truth_((function (){var and__4115__auto__ = param_key;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (!(param_exists_QMARK_));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn null;\n} else {\nif(((cljs.core.map_QMARK_(isv)) && (is_child_QMARK_(isk)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(child_class,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(com$fulcrologic$fulcro$components$make_state_map_$_value_of_STAR_,isv)))], null);\n} else {\nif(cljs.core.map_QMARK_(isv)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(com$fulcrologic$fulcro$components$make_state_map_$_value_of_STAR_,isv))], null);\n} else {\nif(((cljs.core.vector_QMARK_(isv)) && (is_child_QMARK_(isk)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (m){\nreturn com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(child_class,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(com$fulcrologic$fulcro$components$make_state_map_$_value_of_STAR_,m)));\n}),isv)], null);\n} else {\nif(((cljs.core.vector_QMARK_(param_value)) && (is_child_QMARK_(isk)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (params__$1){\nif(cljs.core.truth_(com.fulcrologic.fulcro.components.computed_initial_state_QMARK_(params__$1))){\nreturn params__$1;\n} else {\nreturn com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(child_class,params__$1);\n}\n}),param_value)], null);\n} else {\nif(cljs.core.vector_QMARK_(isv)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (ele){\nreturn substitute(ele);\n}),isv)], null);\n} else {\nif(cljs.core.truth_((function (){var and__4115__auto__ = param_key;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn ((is_child_QMARK_(isk)) && (param_exists_QMARK_));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,(cljs.core.truth_(com.fulcrologic.fulcro.components.computed_initial_state_QMARK_(param_value))?param_value:com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(child_class,param_value))], null);\n} else {\nif(cljs.core.truth_(param_key)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,param_value], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,isv], null);\n\n}\n}\n}\n}\n}\n}\n}\n}\n});\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(value_of,initial_state));\n});\n/**\n * Run `real-render`, possibly through :render-middleware configured on your app.\n */\ncom.fulcrologic.fulcro.components.wrapped_render = (function com$fulcrologic$fulcro$components$wrapped_render(this$,real_render){\nvar app = goog.object.getValueByKeys(this$,\"props\",\"fulcro$app\");\nvar render_middleware = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"render-middleware\",\"render-middleware\",1183628797));\nif(cljs.core.truth_(render_middleware)){\nreturn (render_middleware.cljs$core$IFn$_invoke$arity$2 ? render_middleware.cljs$core$IFn$_invoke$arity$2(this$,real_render) : render_middleware.call(null,this$,real_render));\n} else {\nreturn (real_render.cljs$core$IFn$_invoke$arity$0 ? real_render.cljs$core$IFn$_invoke$arity$0() : real_render.call(null));\n}\n});\n/**\n * Configure a function `(f [this fulcro-props] ...)` to work properly as a hook-based react component. This can be\n *   used in leiu of `defsc` to create a component, where `options` is the (non-magic) map of component options\n *   (i.e. :query is a `(fn [this])`, not a vector).\n * \n *   IMPORTANT: Your options must include `:componentName`, a fully-qualified keyword to use in the component registry.\n * \n *   Returns a new function that wraps yours (to properly extract Fulcro props) and installs the proper Fulcro component\n *   options on the low-level function so that it will act properly when used within React as a hook-based component.\n * \n *   (def MyComponent\n *  (configure-hooks-component!\n *    (fn [this props]\n *      (let [[v set-v!] (use-state this 0)\n *        (dom/div ...)))\n *    {:query ... :ident (fn [_ props] ...) :componentName ::MyComponent}))\n * \n *   (def ui-my-component (comp/factory MyComponent {:keyfn :id})\n * \n *   This can be used to easily generate dynamic components at runtime (as can `configure-component!`).\n *   \n */\ncom.fulcrologic.fulcro.components.configure_hooks_component_BANG_ = (function com$fulcrologic$fulcro$components$configure_hooks_component_BANG_(f,options){\nvar cls_atom = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar js_fn = (function (js_props){\nvar vec__64958 = com.fulcrologic.fulcro.components.use_fulcro(js_props,cljs.core.deref(cls_atom));\nvar this$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64958,(0),null);\nvar props = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64958,(1),null);\nreturn com.fulcrologic.fulcro.components.wrapped_render(this$,(function (){\nvar _STAR_app_STAR__orig_val__64961 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nvar _STAR_depth_STAR__orig_val__64962 = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\nvar _STAR_shared_STAR__orig_val__64963 = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\nvar _STAR_parent_STAR__orig_val__64964 = com.fulcrologic.fulcro.components._STAR_parent_STAR_;\nvar _STAR_app_STAR__temp_val__64965 = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.components.any__GT_app(this$);\n}\n})();\nvar _STAR_depth_STAR__temp_val__64966 = (com.fulcrologic.fulcro.components.depth(this$) + (1));\nvar _STAR_shared_STAR__temp_val__64967 = com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components._STAR_app_STAR_);\nvar _STAR_parent_STAR__temp_val__64968 = this$;\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__temp_val__64965);\n\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__temp_val__64966);\n\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__temp_val__64967);\n\n(com.fulcrologic.fulcro.components._STAR_parent_STAR_ = _STAR_parent_STAR__temp_val__64968);\n\ntry{return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(this$,props) : f.call(null,this$,props));\n}finally {(com.fulcrologic.fulcro.components._STAR_parent_STAR_ = _STAR_parent_STAR__orig_val__64964);\n\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__orig_val__64963);\n\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__orig_val__64962);\n\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__orig_val__64961);\n}}));\n});\ncljs.core.reset_BANG_(cls_atom,js_fn);\n\nreturn com.fulcrologic.fulcro.components.add_hook_options_BANG_(js_fn,options);\n});\n/**\n * Create a react element for a Fulcro class.  In CLJ this returns the same thing as a mounted instance, whereas in CLJS it is an\n *   element (which has yet to instantiate an instance).\n */\ncom.fulcrologic.fulcro.components.create_element = (function com$fulcrologic$fulcro$components$create_element(class$,props,children){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(React.createElement,class$,props,com.fulcrologic.fulcro.components.force_children(children));\n});\n/**\n * Create a factory constructor from a component class created with\n * defsc.\n */\ncom.fulcrologic.fulcro.components.factory = (function com$fulcrologic$fulcro$components$factory(var_args){\nvar G__64971 = arguments.length;\nswitch (G__64971) {\ncase 1:\nreturn com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1 = (function (class$){\nreturn com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2(class$,null);\n}));\n\n(com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2 = (function (class$,p__64972){\nvar map__64973 = p__64972;\nvar map__64973__$1 = (((((!((map__64973 == null))))?(((((map__64973.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64973.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64973):map__64973);\nvar opts = map__64973__$1;\nvar keyfn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64973__$1,new cljs.core.Keyword(null,\"keyfn\",\"keyfn\",780060332));\nvar qualifier = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64973__$1,new cljs.core.Keyword(null,\"qualifier\",\"qualifier\",125841738));\nvar qid = com.fulcrologic.fulcro.components.query_id(class$,qualifier);\nreturn cljs.core.with_meta((function() { \nvar com$fulcrologic$fulcro$components$element_factory__delegate = function (props,children){\nvar key = new cljs.core.Keyword(null,\"react-key\",\"react-key\",1337881348).cljs$core$IFn$_invoke$arity$1(props);\nvar key__$1 = (cljs.core.truth_(key)?key:(cljs.core.truth_(keyfn)?(keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(props) : keyfn.call(null,props)):null));\nvar ref = new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967).cljs$core$IFn$_invoke$arity$1(props);\nvar ref__$1 = (function (){var G__64975 = ref;\nif((ref instanceof cljs.core.Keyword)){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__64975);\n} else {\nreturn G__64975;\n}\n})();\nvar props_middleware = (function (){var G__64976 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nif((G__64976 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(G__64976,new cljs.core.Keyword(null,\"props-middleware\",\"props-middleware\",358176739));\n}\n})();\nvar props__$1 = ({\"fulcro$value\": props, \"fulcro$queryid\": qid, \"fulcro$app\": com.fulcrologic.fulcro.components._STAR_app_STAR_, \"fulcro$parent\": com.fulcrologic.fulcro.components._STAR_parent_STAR_, \"fulcro$depth\": com.fulcrologic.fulcro.components._STAR_depth_STAR_});\nvar props__$2 = (cljs.core.truth_(props_middleware)?(props_middleware.cljs$core$IFn$_invoke$arity$2 ? props_middleware.cljs$core$IFn$_invoke$arity$2(class$,props__$1) : props_middleware.call(null,class$,props__$1)):props__$1);\nif(cljs.core.truth_(key__$1)){\ngoog.object.set(props__$2,\"key\",key__$1);\n} else {\n}\n\nif(cljs.core.truth_(ref__$1)){\ngoog.object.set(props__$2,\"ref\",ref__$1);\n} else {\n}\n\nif(cljs.core.truth_(goog.DEBUG)){\nif((com.fulcrologic.fulcro.components._STAR_app_STAR_ == null)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,858,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"A Fulcro component was rendered outside of a parent context. This probably means you are using a library that has you pass rendering code to it as a lambda. Use `with-parent-context` to fix this.\"], null);\n}),null)),null,-1680695801);\n} else {\n}\n\nif(((cljs.core.map_QMARK_(key__$1)) || (cljs.core.vector_QMARK_(key__$1)))){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.components\",null,860,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"React key for \",com.fulcrologic.fulcro.components.component_name(class$),\" is not a simple scalar value. This could cause spurious component remounts.\"], null);\n}),null)),null,-653321845);\n} else {\n}\n\nif(typeof ref__$1 === 'string'){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.components\",null,863,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"String ref on \",com.fulcrologic.fulcro.components.component_name(class$),\" should be a function.\"], null);\n}),null)),null,318785897);\n} else {\n}\n\nif((((props__$2 == null)) || (cljs.core.not(goog.object.containsKey(props__$2,\"fulcro$value\"))))){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,866,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Props middleware seems to have the corrupted props for \",com.fulcrologic.fulcro.components.component_name(class$)], null);\n}),null)),null,439481985);\n} else {\n}\n} else {\n}\n\nreturn com.fulcrologic.fulcro.components.create_element(class$,props__$2,children);\n};\nvar com$fulcrologic$fulcro$components$element_factory = function (props,var_args){\nvar children = null;\nif (arguments.length > 1) {\nvar G__65167__i = 0, G__65167__a = new Array(arguments.length -  1);\nwhile (G__65167__i < G__65167__a.length) {G__65167__a[G__65167__i] = arguments[G__65167__i + 1]; ++G__65167__i;}\n  children = new cljs.core.IndexedSeq(G__65167__a,0,null);\n} \nreturn com$fulcrologic$fulcro$components$element_factory__delegate.call(this,props,children);};\ncom$fulcrologic$fulcro$components$element_factory.cljs$lang$maxFixedArity = 1;\ncom$fulcrologic$fulcro$components$element_factory.cljs$lang$applyTo = (function (arglist__65169){\nvar props = cljs.core.first(arglist__65169);\nvar children = cljs.core.rest(arglist__65169);\nreturn com$fulcrologic$fulcro$components$element_factory__delegate(props,children);\n});\ncom$fulcrologic$fulcro$components$element_factory.cljs$core$IFn$_invoke$arity$variadic = com$fulcrologic$fulcro$components$element_factory__delegate;\nreturn com$fulcrologic$fulcro$components$element_factory;\n})()\n,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),class$,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),qid,new cljs.core.Keyword(null,\"qualifier\",\"qualifier\",125841738),qualifier], null));\n}));\n\n(com.fulcrologic.fulcro.components.factory.cljs$lang$maxFixedArity = 2);\n\n/**\n * Similar to factory, but returns a function with the signature\n *   [props computed & children] instead of default [props & children].\n *   This makes easier to send computed.\n */\ncom.fulcrologic.fulcro.components.computed_factory = (function com$fulcrologic$fulcro$components$computed_factory(var_args){\nvar G__64980 = arguments.length;\nswitch (G__64980) {\ncase 1:\nreturn com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1 = (function (class$){\nreturn com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$2(class$,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$2 = (function (class$,options){\nvar real_factory = com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2(class$,options);\nreturn (function() {\nvar G__65176 = null;\nvar G__65176__1 = (function (props){\nreturn (real_factory.cljs$core$IFn$_invoke$arity$1 ? real_factory.cljs$core$IFn$_invoke$arity$1(props) : real_factory.call(null,props));\n});\nvar G__65176__2 = (function (props,computed_props){\nvar G__64984 = com.fulcrologic.fulcro.components.computed(props,computed_props);\nreturn (real_factory.cljs$core$IFn$_invoke$arity$1 ? real_factory.cljs$core$IFn$_invoke$arity$1(G__64984) : real_factory.call(null,G__64984));\n});\nvar G__65176__3 = (function() { \nvar G__65178__delegate = function (props,computed_props,children){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,com.fulcrologic.fulcro.components.computed(props,computed_props),children);\n};\nvar G__65178 = function (props,computed_props,var_args){\nvar children = null;\nif (arguments.length > 2) {\nvar G__65179__i = 0, G__65179__a = new Array(arguments.length -  2);\nwhile (G__65179__i < G__65179__a.length) {G__65179__a[G__65179__i] = arguments[G__65179__i + 2]; ++G__65179__i;}\n  children = new cljs.core.IndexedSeq(G__65179__a,0,null);\n} \nreturn G__65178__delegate.call(this,props,computed_props,children);};\nG__65178.cljs$lang$maxFixedArity = 2;\nG__65178.cljs$lang$applyTo = (function (arglist__65180){\nvar props = cljs.core.first(arglist__65180);\narglist__65180 = cljs.core.next(arglist__65180);\nvar computed_props = cljs.core.first(arglist__65180);\nvar children = cljs.core.rest(arglist__65180);\nreturn G__65178__delegate(props,computed_props,children);\n});\nG__65178.cljs$core$IFn$_invoke$arity$variadic = G__65178__delegate;\nreturn G__65178;\n})()\n;\nG__65176 = function(props,computed_props,var_args){\nvar children = var_args;\nswitch(arguments.length){\ncase 1:\nreturn G__65176__1.call(this,props);\ncase 2:\nreturn G__65176__2.call(this,props,computed_props);\ndefault:\nvar G__65185 = null;\nif (arguments.length > 2) {\nvar G__65186__i = 0, G__65186__a = new Array(arguments.length -  2);\nwhile (G__65186__i < G__65186__a.length) {G__65186__a[G__65186__i] = arguments[G__65186__i + 2]; ++G__65186__i;}\nG__65185 = new cljs.core.IndexedSeq(G__65186__a,0,null);\n}\nreturn G__65176__3.cljs$core$IFn$_invoke$arity$variadic(props,computed_props, G__65185);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__65176.cljs$lang$maxFixedArity = 2;\nG__65176.cljs$lang$applyTo = G__65176__3.cljs$lang$applyTo;\nG__65176.cljs$core$IFn$_invoke$arity$1 = G__65176__1;\nG__65176.cljs$core$IFn$_invoke$arity$2 = G__65176__2;\nG__65176.cljs$core$IFn$_invoke$arity$variadic = G__65176__3.cljs$core$IFn$_invoke$arity$variadic;\nreturn G__65176;\n})()\n}));\n\n(com.fulcrologic.fulcro.components.computed_factory.cljs$lang$maxFixedArity = 2);\n\n/**\n * Dynamic var that affects the activation of transactions run via `transact!`. Defaults to false. When set to true\n * this option prevents a transaction from running until after the next render is complete. This typically should not be set\n * to true in scenarios where you are unsure if a render will occur, since that could make the transaction appear to\n * \"hang\".\n */\ncom.fulcrologic.fulcro.components._STAR_after_render_STAR_ = false;\n/**\n * Submit a transaction for processing.\n * \n *   The underlying transaction system is pluggable, but the *default* supported options are:\n * \n *   - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n *   - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\n *   - `:component` - React element. Set automatically if you call this function using a component.\n *   - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n *  The ident-optimized render treats these as \"extras\".\n *   - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n *  components using these are the *only* things that will be refreshed in the UI.\n *  This can be used to avoid the overhead of looking for stale data when you know exactly what\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n *   - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\n *  the network portion of the transaction (assuming it has not already completed).\n *   - `:compressible?` - boolean. Check compressible-transact! docs.\n *   - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\n *   a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\n *   event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\n *   will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\n *   be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\n *   your own global render using `app/schedule-render!`.\n *   ` `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\n *   when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\n *   before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\n *   be set to true for any transactions run within mutation action sections. You can affect the default for this value\n *   in a dynamic scope by binding `*after-render*` to true\n * \n *   NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\n *   supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\n *   influence their necessity.\n * \n *   Returns the transaction ID of the submitted transaction.\n *   \n */\ncom.fulcrologic.fulcro.components.transact_BANG_ = (function com$fulcrologic$fulcro$components$transact_BANG_(var_args){\nvar G__64986 = arguments.length;\nswitch (G__64986) {\ncase 3:\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (app_or_component,tx,options){\nvar temp__5735__auto__ = com.fulcrologic.fulcro.components.any__GT_app(app_or_component);\nif(cljs.core.truth_(temp__5735__auto__)){\nvar app = temp__5735__auto__;\nvar tx_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"tx!\",\"tx!\",-1308106263));\nvar options__$1 = (function (){var G__64989 = options;\nvar G__64989__$1 = (((((!(cljs.core.contains_QMARK_(options,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030))))) && (com.fulcrologic.fulcro.components._STAR_after_render_STAR_ === true)))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64989,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),true):G__64989);\nvar G__64989__$2 = (((((new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967).cljs$core$IFn$_invoke$arity$1(options) == null)) && (com.fulcrologic.fulcro.components.has_ident_QMARK_(app_or_component))))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64989__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(app_or_component)):G__64989__$1);\nif((((new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(options) == null)) && (com.fulcrologic.fulcro.components.component_instance_QMARK_(app_or_component)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64989__$2,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),app_or_component);\n} else {\nreturn G__64989__$2;\n}\n})();\nreturn (tx_BANG_.cljs$core$IFn$_invoke$arity$3 ? tx_BANG_.cljs$core$IFn$_invoke$arity$3(app,tx,options__$1) : tx_BANG_.call(null,app,tx,options__$1));\n} else {\nreturn null;\n}\n}));\n\n(com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app_or_comp,tx){\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app_or_comp,tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.components.transact_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\n * \n *   Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\n *   transaction run on the calling thread, and new props are immediately made available to the calling component via\n *   \"props tunneling\" (a behind-the-scenes mechanism using js/setState).\n * \n *   This mode is meant to be used in form input event handlers, since React is designed to only work properly with\n *   raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\n *   unexpectedly.\n * \n *   WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\n *   that has an ident.\n * \n *   If you're using this, you can also set the compiler option:\n * \n *   ```\n *   :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\n *   ```\n * \n *   to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\n * \n *   WARNING: Syncrhonous rendering does *not* refresh the full UI, only the component.\n *   \n */\ncom.fulcrologic.fulcro.components.transact_BANG__BANG_ = (function com$fulcrologic$fulcro$components$transact_BANG__BANG_(var_args){\nvar G__64993 = arguments.length;\nswitch (G__64993) {\ncase 2:\nreturn com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component,tx){\nreturn com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$3(component,tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$3 = (function (component,tx,options){\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(component,tx,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391),true], null)], 0)));\n}));\n\n(com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Part of internal implementation of dynamic queries.\n */\ncom.fulcrologic.fulcro.components.link_element = (function com$fulcrologic$fulcro$components$link_element(element){\nreturn clojure.walk.prewalk((function com$fulcrologic$fulcro$components$link_element_$_link_element_helper(ele){\nvar map__64995 = cljs.core.meta(ele);\nvar map__64995__$1 = (((((!((map__64995 == null))))?(((((map__64995.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64995.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64995):map__64995);\nvar queryid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64995__$1,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056));\nif(cljs.core.truth_(queryid)){\nreturn queryid;\n} else {\nreturn ele;\n}\n}),element);\n});\n/**\n * Part of internal implementation of dynamic queries.\n * \n *   Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\n * \n *   Returns the new state map containing potentially-updated normalized queries.\n */\ncom.fulcrologic.fulcro.components.normalize_query_elements = (function com$fulcrologic$fulcro$components$normalize_query_elements(state_map,query){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$components$normalize_query_elements_$_normalize_query_elements_reducer(state,ele){\ntry{var parameterized_QMARK_ = cljs.core.seq_QMARK_(ele);\nvar raw_element = ((parameterized_QMARK_)?cljs.core.first(ele):ele);\nif(com.fulcrologic.fulcro.algorithms.do_not_use.union_QMARK_(raw_element)){\nvar union_alternates = cljs.core.first(cljs.core.vals(raw_element));\nvar union_meta = cljs.core.meta(union_alternates);\nvar normalized_union_alternates = cljs.core.with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.components.link_element,union_alternates)),union_meta);\nvar union_query_id = new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(union_alternates));\nvar union_component_key = com.fulcrologic.fulcro.components.class__GT_registry_key(new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(union_alternates)));\nif(cljs.core.truth_(union_query_id)){\n} else {\nthrow (new Error([\"Assert failed: \",\"Union query has an ID. Did you use extended get-query?\",\"\\n\",\"union-query-id\"].join('')));\n}\n\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.deep_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),cljs.core.PersistentArrayMap.createAsIfByAssoc([union_query_id,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),normalized_union_alternates,new cljs.core.Keyword(null,\"component-key\",\"component-key\",1189239034),union_component_key,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),union_query_id], null)])], null),cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$components$normalize_query_elements_$_normalize_query_elements_reducer_$_normalize_union_reducer(s,p__64998){\nvar vec__64999 = p__64998;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64999,(0),null);\nvar subquery = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64999,(1),null);\nreturn (com.fulcrologic.fulcro.components.normalize_query.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.normalize_query.cljs$core$IFn$_invoke$arity$2(s,subquery) : com.fulcrologic.fulcro.components.normalize_query.call(null,s,subquery));\n}),state,union_alternates)], 0));\n} else {\nif(((com.fulcrologic.fulcro.algorithms.do_not_use.join_QMARK_(raw_element)) && (com.fulcrologic.fulcro.algorithms.do_not_use.recursion_QMARK_(com.fulcrologic.fulcro.algorithms.do_not_use.join_value(raw_element))))){\nreturn state;\n} else {\nif(com.fulcrologic.fulcro.algorithms.do_not_use.join_QMARK_(raw_element)){\nvar G__65002 = state;\nvar G__65003 = com.fulcrologic.fulcro.algorithms.do_not_use.join_value(raw_element);\nreturn (com.fulcrologic.fulcro.components.normalize_query.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.normalize_query.cljs$core$IFn$_invoke$arity$2(G__65002,G__65003) : com.fulcrologic.fulcro.components.normalize_query.call(null,G__65002,G__65003));\n} else {\nreturn state;\n\n}\n}\n}\n}catch (e64997){var e = e64997;\nif(cljs.core.truth_(goog.DEBUG)){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,1011,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Query normalization failed. Perhaps you tried to set a query with a syntax error?\"], null);\n}),null)),null,-1297464967);\n} else {\nreturn null;\n}\n}}),state_map,query);\n});\n/**\n * Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\n *   with their query ID.\n */\ncom.fulcrologic.fulcro.components.link_query = (function com$fulcrologic$fulcro$components$link_query(query){\nvar metadata = cljs.core.meta(query);\nreturn cljs.core.with_meta(cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.components.link_element,query),metadata);\n});\n/**\n * Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\n *   that already appear in the state will not be added.  Part of dynamic query implementation.\n */\ncom.fulcrologic.fulcro.components.normalize_query = (function com$fulcrologic$fulcro$components$normalize_query(state_map,query){\nvar queryid = (function (){var G__65004 = query;\nvar G__65004__$1 = (((G__65004 == null))?null:cljs.core.meta(G__65004));\nif((G__65004__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056).cljs$core$IFn$_invoke$arity$1(G__65004__$1);\n}\n})();\nvar component_key = com.fulcrologic.fulcro.components.class__GT_registry_key((function (){var G__65005 = query;\nvar G__65005__$1 = (((G__65005 == null))?null:cljs.core.meta(G__65005));\nif((G__65005__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(G__65005__$1);\n}\n})());\nvar query_SINGLEQUOTE_ = cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(query,cljs.core.dissoc,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar new_state = com.fulcrologic.fulcro.components.normalize_query_elements(state_map,query_SINGLEQUOTE_);\nvar new_state__$1 = (((new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452).cljs$core$IFn$_invoke$arity$1(new_state) == null))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_state,new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),cljs.core.PersistentArrayMap.EMPTY):new_state);\nvar top_query = com.fulcrologic.fulcro.components.link_query(query_SINGLEQUOTE_);\nif(cljs.core.truth_((function (){var and__4115__auto__ = queryid;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn component_key;\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.deep_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),cljs.core.PersistentArrayMap.createAsIfByAssoc([queryid,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),top_query,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),queryid,new cljs.core.Keyword(null,\"component-key\",\"component-key\",1189239034),component_key], null)])], null),new_state__$1], 0));\n} else {\nreturn new_state__$1;\n}\n});\n/**\n * Put a query in app state.\n * \n *   NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\n *   up an initial app state.\n */\ncom.fulcrologic.fulcro.components.set_query_STAR_ = (function com$fulcrologic$fulcro$components$set_query_STAR_(state_map,class_or_factory,p__65006){\nvar map__65007 = p__65006;\nvar map__65007__$1 = (((((!((map__65007 == null))))?(((((map__65007.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65007.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65007):map__65007);\nvar args = map__65007__$1;\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65007__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar queryid = (((class_or_factory == null))?null:(cljs.core.truth_((function (){var G__65009 = class_or_factory;\nvar G__65009__$1 = (((G__65009 == null))?null:cljs.core.meta(G__65009));\nif((G__65009__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.contains_QMARK_(G__65009__$1,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056));\n}\n})())?(function (){var G__65010 = class_or_factory;\nvar G__65010__$1 = (((G__65010 == null))?null:cljs.core.meta(G__65010));\nif((G__65010__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056).cljs$core$IFn$_invoke$arity$1(G__65010__$1);\n}\n})():com.fulcrologic.fulcro.components.query_id(class_or_factory,null)\n));\nvar component = (function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"class\",\"class\",-2030961996).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(class_or_factory));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn class_or_factory;\n}\n})();\nvar setq_STAR_ = (function (state){\nreturn com.fulcrologic.fulcro.components.normalize_query(cljs.core.update.cljs$core$IFn$_invoke$arity$4(state,new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),cljs.core.dissoc,queryid),cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(query,cljs.core.assoc,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),queryid,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component));\n});\nif(typeof queryid === 'string'){\nvar G__65011 = state_map;\nif(cljs.core.contains_QMARK_(args,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))){\nreturn setq_STAR_(G__65011);\n} else {\nreturn G__65011;\n}\n} else {\nif(cljs.core.truth_(goog.DEBUG)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,1063,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Set query failed. There was no query ID. Use a class or factory for the second argument.\"], null);\n}),null)),null,527030825);\n} else {\n}\n\nreturn state_map;\n}\n});\n/**\n * Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\n * \n *   * `x` : is anything that any->app accepts.\n *   * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\n *   * `opts` : A map with `query` and optionally `params` (substitutions on queries)\n *   \n */\ncom.fulcrologic.fulcro.components.set_query_BANG_ = (function com$fulcrologic$fulcro$components$set_query_BANG_(x,class_or_factory,p__65012){\nvar map__65013 = p__65012;\nvar map__65013__$1 = (((((!((map__65013 == null))))?(((((map__65013.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65013.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65013):map__65013);\nvar opts = map__65013__$1;\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65013__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65013__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\nvar app = com.fulcrologic.fulcro.components.any__GT_app(x);\nvar state_atom = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app);\nvar queryid = ((typeof class_or_factory === 'string')?class_or_factory:(cljs.core.truth_((function (){var G__65015 = class_or_factory;\nvar G__65015__$1 = (((G__65015 == null))?null:cljs.core.meta(G__65015));\nif((G__65015__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.contains_QMARK_(G__65015__$1,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056));\n}\n})())?(function (){var G__65016 = class_or_factory;\nvar G__65016__$1 = (((G__65016 == null))?null:cljs.core.meta(G__65016));\nif((G__65016__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056).cljs$core$IFn$_invoke$arity$1(G__65016__$1);\n}\n})():com.fulcrologic.fulcro.components.query_id(class_or_factory,null)\n));\nif(cljs.core.truth_(((typeof queryid === 'string')?(function (){var or__4126__auto__ = query;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn params;\n}\n})():false))){\nvar index_root_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"index-root!\",\"index-root!\",-981026266));\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,com.fulcrologic.fulcro.components.set_query_STAR_,class_or_factory,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),queryid,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"params\",\"params\",710516235),params], null));\n\nif(cljs.core.truth_(index_root_BANG_)){\n(index_root_BANG_.cljs$core$IFn$_invoke$arity$1 ? index_root_BANG_.cljs$core$IFn$_invoke$arity$1(app) : index_root_BANG_.call(null,app));\n} else {\n}\n\nif(cljs.core.truth_(schedule_render_BANG_)){\nvar G__65017 = app;\nvar G__65018 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),true], null);\nreturn (schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2(G__65017,G__65018) : schedule_render_BANG_.call(null,G__65017,G__65018));\n} else {\nreturn null;\n}\n} else {\nif(cljs.core.truth_(goog.DEBUG)){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,1087,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Unable to set query. Invalid arguments.\"], null);\n}),null)),null,-356341402);\n} else {\nreturn null;\n}\n}\n});\n/**\n * Get all of the indexes from a component instance or app. See also `ident->any`, `class->any`, etc.\n */\ncom.fulcrologic.fulcro.components.get_indexes = (function com$fulcrologic$fulcro$components$get_indexes(x){\nvar app = com.fulcrologic.fulcro.components.any__GT_app(x);\nvar G__65019 = app;\nvar G__65019__$1 = (((G__65019 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__65019));\nvar G__65019__$2 = (((G__65019__$1 == null))?null:cljs.core.deref(G__65019__$1));\nif((G__65019__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938).cljs$core$IFn$_invoke$arity$1(G__65019__$2);\n}\n});\n/**\n * Return all on-screen component instances that are rendering the data for a given ident. `x` is anything any->app accepts.\n */\ncom.fulcrologic.fulcro.components.ident__GT_components = (function com$fulcrologic$fulcro$components$ident__GT_components(x,ident){\nvar G__65020 = com.fulcrologic.fulcro.components.get_indexes(x);\nvar G__65020__$1 = (((G__65020 == null))?null:new cljs.core.Keyword(null,\"ident->components\",\"ident->components\",-1952169224).cljs$core$IFn$_invoke$arity$1(G__65020));\nif((G__65020__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(G__65020__$1,ident);\n}\n});\n/**\n * Return some (random) on-screen components that uses the given ident. `x` is anything any->app accepts.\n */\ncom.fulcrologic.fulcro.components.ident__GT_any = (function com$fulcrologic$fulcro$components$ident__GT_any(x,ident){\nreturn cljs.core.first(com.fulcrologic.fulcro.components.ident__GT_components(x,ident));\n});\n/**\n * Get all component classes that query for the given prop.\n *   `x` can be anything `any->app` is ok with.\n * \n *   Returns all classes that query for that prop (or ident)\n */\ncom.fulcrologic.fulcro.components.prop__GT_classes = (function com$fulcrologic$fulcro$components$prop__GT_classes(x,prop){\nvar G__65021 = com.fulcrologic.fulcro.components.get_indexes(x);\nvar G__65021__$1 = (((G__65021 == null))?null:new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717).cljs$core$IFn$_invoke$arity$1(G__65021));\nif((G__65021__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(G__65021__$1,prop);\n}\n});\n/**\n * Get all of the on-screen component instances from the indexes that have the type of the component class.\n *   `x` can be anything `any->app` is ok with.\n */\ncom.fulcrologic.fulcro.components.class__GT_all = (function com$fulcrologic$fulcro$components$class__GT_all(x,class$){\nvar k = com.fulcrologic.fulcro.components.class__GT_registry_key(class$);\nvar G__65022 = com.fulcrologic.fulcro.components.get_indexes(x);\nvar G__65022__$1 = (((G__65022 == null))?null:new cljs.core.Keyword(null,\"class->components\",\"class->components\",436435919).cljs$core$IFn$_invoke$arity$1(G__65022));\nif((G__65022__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(G__65022__$1,k);\n}\n});\n/**\n * Get a (random) on-screen component instance from the indexes that has type of the given component class.\n *   `x` can be anything `any->app` is ok with.\n */\ncom.fulcrologic.fulcro.components.class__GT_any = (function com$fulcrologic$fulcro$components$class__GT_any(x,cls){\nreturn cljs.core.first(com.fulcrologic.fulcro.components.class__GT_all(x,cls));\n});\n/**\n * Returns the current value of the state map via a component instance. Note that it is not safe to render\n *   arbitrary data from the state map since Fulcro will have no idea that it should refresh a component that\n *   does so; however, it is sometimes useful to look at the state map for information that doesn't\n *   change over time.\n */\ncom.fulcrologic.fulcro.components.component__GT_state_map = (function com$fulcrologic$fulcro$components$component__GT_state_map(this$){\nvar G__65023 = this$;\nvar G__65023__$1 = (((G__65023 == null))?null:com.fulcrologic.fulcro.components.any__GT_app(G__65023));\nvar G__65023__$2 = (((G__65023__$1 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__65023__$1));\nif((G__65023__$2 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__65023__$2);\n}\n});\n/**\n * Wrap the props middleware such that `f` is called to get extra props that should be placed\n *   in the extra-props arg of the component.\n * \n *   `handler` - (optional) The next item in the props middleware chain.\n *   `f` - A (fn [cls extra-props] new-extra-props)\n * \n *   `f` will be passed the class being rendered and the current map of extra props. It should augment\n *   those and return a new version.\n */\ncom.fulcrologic.fulcro.components.wrap_update_extra_props = (function com$fulcrologic$fulcro$components$wrap_update_extra_props(var_args){\nvar G__65025 = arguments.length;\nswitch (G__65025) {\ncase 1:\nreturn com.fulcrologic.fulcro.components.wrap_update_extra_props.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.components.wrap_update_extra_props.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.wrap_update_extra_props.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn (function (cls,raw_props){\nvar existing = (function (){var or__4126__auto__ = goog.object.get(raw_props,\"fulcro$extra_props\");\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nvar new$ = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(cls,existing) : f.call(null,cls,existing));\ngoog.object.set(raw_props,\"fulcro$extra_props\",new$);\n\nreturn raw_props;\n});\n}));\n\n(com.fulcrologic.fulcro.components.wrap_update_extra_props.cljs$core$IFn$_invoke$arity$2 = (function (handler,f){\nreturn (function (cls,raw_props){\nvar existing = (function (){var or__4126__auto__ = goog.object.get(raw_props,\"fulcro$extra_props\");\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nvar new$ = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(cls,existing) : f.call(null,cls,existing));\ngoog.object.set(raw_props,\"fulcro$extra_props\",new$);\n\nreturn (handler.cljs$core$IFn$_invoke$arity$2 ? handler.cljs$core$IFn$_invoke$arity$2(cls,raw_props) : handler.call(null,cls,raw_props));\n});\n}));\n\n(com.fulcrologic.fulcro.components.wrap_update_extra_props.cljs$lang$maxFixedArity = 2);\n\n/**\n * Wraps children in a React.Fragment. Props are optional, like normal DOM elements.\n */\ncom.fulcrologic.fulcro.components.fragment = (function com$fulcrologic$fulcro$components$fragment(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___65216 = arguments.length;\nvar i__4737__auto___65217 = (0);\nwhile(true){\nif((i__4737__auto___65217 < len__4736__auto___65216)){\nargs__4742__auto__.push((arguments[i__4737__auto___65217]));\n\nvar G__65218 = (i__4737__auto___65217 + (1));\ni__4737__auto___65217 = G__65218;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.components.fragment.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(com.fulcrologic.fulcro.components.fragment.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar vec__65027 = ((cljs.core.map_QMARK_(cljs.core.first(args)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(args),cljs.core.rest(args)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [({}),args], null));\nvar props = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65027,(0),null);\nvar children = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65027,(1),null);\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(React.createElement,React.Fragment,cljs.core.clj__GT_js(props),com.fulcrologic.fulcro.components.force_children(children));\n}));\n\n(com.fulcrologic.fulcro.components.fragment.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.components.fragment.cljs$lang$applyTo = (function (seq65026){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65026));\n}));\n\n/**\n * \n *   DEPRECATED: Generally use `result-action` in mutations to chain sequences instead. This call is equivalent\n *   to `transact!` with an `:optimistic? false` option.\n * \n *   Like `transact!`, but ensures each call completes (in a full-stack, pessimistic manner) before the next call starts\n *   in any way. Note that two calls of this function have no guaranteed relationship to each other. They could end up\n *   intermingled at runtime. The only guarantee is that for *a single call* to `ptransact!`, the calls in the given tx will run\n *   pessimistically (one at a time) in the order given. Follow-on reads in the given transaction will be repeated after each remote\n *   interaction.\n * \n *   `component-or-app` a mounted component or the app\n *   `tx` the tx to run\n *   `ref` the ident (ref context) in which to run the transaction (including all deferrals)\n */\ncom.fulcrologic.fulcro.components.ptransact_BANG_ = (function com$fulcrologic$fulcro$components$ptransact_BANG_(var_args){\nvar G__65036 = arguments.length;\nswitch (G__65036) {\ncase 2:\nreturn com.fulcrologic.fulcro.components.ptransact_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.components.ptransact_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.ptransact_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component_or_app,tx){\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(component_or_app,tx,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),false], null));\n}));\n\n(com.fulcrologic.fulcro.components.ptransact_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (component_or_app,ref,tx){\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(component_or_app,tx,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),false,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref], null));\n}));\n\n(com.fulcrologic.fulcro.components.ptransact_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Identical to `transact!` with `:compressible? true` option. This means that if more than one\n *   adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\n *   is useful for things like form input fields, where storing every keystoke in history is undesirable. This\n *   also compress the transactions in Fulcro Inspect.\n * \n *   NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\n *   automatic network error recovery handling.\n */\ncom.fulcrologic.fulcro.components.compressible_transact_BANG_ = (function com$fulcrologic$fulcro$components$compressible_transact_BANG_(var_args){\nvar G__65038 = arguments.length;\nswitch (G__65038) {\ncase 2:\nreturn com.fulcrologic.fulcro.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app_ish,tx){\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app_ish,tx,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"compressible?\",\"compressible?\",153543246),true], null));\n}));\n\n(com.fulcrologic.fulcro.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (app_ish,ref,tx){\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app_ish,tx,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"compressible?\",\"compressible?\",153543246),true,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref], null));\n}));\n\n(com.fulcrologic.fulcro.components.compressible_transact_BANG_.cljs$lang$maxFixedArity = 3);\n\ncom.fulcrologic.fulcro.components.external_config = (function com$fulcrologic$fulcro$components$external_config(app_ish,k){\nvar G__65052 = app_ish;\nvar G__65052__$1 = (((G__65052 == null))?null:com.fulcrologic.fulcro.components.any__GT_app(G__65052));\nif((G__65052__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(G__65052__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"config\",\"com.fulcrologic.fulcro.application/config\",-1907926684),new cljs.core.Keyword(null,\"external-config\",\"external-config\",-471423941),k], null));\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","com/fulcrologic/fulcro/components.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",38],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async.interop","~$cljs.core.async.interop","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$>def","~$com.fulcrologic.guardrails.core"],"~:excludes",["~#set",[]],"~:macros",["^ ","~$defsc",["^ ","~:doc","Define a stateful component. This macro emits a React UI class with a query,\n   optional ident (if :ident is specified in options), optional initial state, optional css, lifecycle methods,\n   and a render method. It can also cause the class to implement additional protocols that you specify. Destructuring is\n   supported in the argument list.\n\n   The template (data-only) versions do not have any arguments in scope\n   The lambda versions have arguments in scope that make sense for those lambdas, as listed below:\n\n   ```\n   (defsc Component [this {:keys [db/id x] :as props} {:keys [onSelect] :as computed} extended-args]\n     {\n      ;; stateful component options\n      ;; query template is literal. Use the lambda if you have ident-joins or unions.\n      :query [:db/id :x] ; OR (fn [] [:db/id :x]) ; this in scope\n      ;; ident template is table name and ID property name\n      :ident [:table/by-id :id] ; OR (fn [] [:table/by-id id]) ; this and props in scope\n      ;; initial-state template is magic..see dev guide. Lambda version is normal.\n      :initial-state {:x :param/x} ; OR (fn [params] {:x (:x params)}) ; nothing is in scope\n      ;; pre-merge, use a lamba to modify new merged data with component needs\n      :pre-merge (fn [{:keys [data-tree current-normalized state-map query]}] (merge {:ui/default-value :start} data-tree))\n\n      ; React Lifecycle Methods\n      :initLocalState            (fn [this props] ...) ; CAN BE used to call things as you might in a constructor. Return value is initial state.\n      :shouldComponentUpdate     (fn [this next-props next-state] ...)\n\n      :componentDidUpdate        (fn [this prev-props prev-state snapshot] ...) ; snapshot is optional, and is 16+. Is context for 15\n      :componentDidMount         (fn [this] ...)\n      :componentWillUnmount      (fn [this] ...)\n\n      ;; DEPRECATED IN REACT 16 (to be removed in 17):\n      :componentWillReceiveProps        (fn [this next-props] ...)\n      :componentWillUpdate              (fn [this next-props next-state] ...)\n      :componentWillMount               (fn [this] ...)\n\n      ;; Replacements for deprecated methods in React 16.3+\n      :UNSAFE_componentWillReceiveProps (fn [this next-props] ...)\n      :UNSAFE_componentWillUpdate       (fn [this next-props next-state] ...)\n      :UNSAFE_componentWillMount        (fn [this] ...)\n\n      ;; ADDED for React 16:\n      :componentDidCatch         (fn [this error info] ...)\n      :getSnapshotBeforeUpdate   (fn [this prevProps prevState] ...)\n\n      ;; static.\n      :getDerivedStateFromProps  (fn [props state] ...)\n\n      ;; ADDED for React 16.6:\n      ;; NOTE: The state returned from this function can either be:\n      ;; a raw js map, where Fulcro's state is in a sub-key: `#js {\"fulcro$state\" {:fulcro :state}}`.\n      ;; or a clj map. In either case this function will *overwrite* Fulcro's component-local state, which is\n      ;; slighly different behavior than raw React (we have no `this`, so we cannot read Fulcro's state to merge it).\n      :getDerivedStateFromError  (fn [error] ...)\n\n      NOTE: shouldComponentUpdate should generally not be overridden other than to force it false so\n      that other libraries can control the sub-dom. If you do want to implement it, then old props can\n      be obtained from (prim/props this), and old state via (gobj/get (. this -state) \"fulcro$state\").\n\n      ; BODY forms. May be omitted IFF there is an options map, in order to generate a component that is used only for queries/normalization.\n      (dom/div #js {:onClick onSelect} x))\n   ```\n\n   NOTE: The options map is \"open\". That is: you can add whatever extra stuff you want to in order\n   to co-locate data for component-related concerns. This is exactly what component-local css, the\n   dynamic router, and form-state do.  The data that you add is available from `comp/component-options`\n   on the component class and instances (i.e. `this`).\n\n   See the Developer's Guide at book.fulcrologic.com for more details.\n   ","~:arglists",["~#list",[["~$&","~$args"]]],"^7",1530,"^8",4,"^6","com/fulcrologic/fulcro/components.cljc","~:name","~$com.fulcrologic.fulcro.components/defsc","~:ns","~$com.fulcrologic.fulcro.components","~:macro",true],"~$with-parent-context",["^ ","^P",["^Q",[["~$outer-parent","~$&","~$body"]]],"^O","Wraps the given body with the correct internal bindings of the parent so that Fulcro internals\n     will work when that body is embedded in unusual ways (e.g. as the body in a child-as-a-function\n     React pattern).\n\n     ```\n     (defsc X [this props]\n       ...\n       ;; WRONG:\n       (some-react-thing {:child (fn [] (ui-fulcro-thing ...))})\n       ;; CORRECT:\n       (some-react-thing {:child (fn [] (with-parent-context this (ui-fulcro-thing ...)))})\n     ```\n     ","^7",1175,"^8",4,"^6","com/fulcrologic/fulcro/components.cljc","^S","~$com.fulcrologic.fulcro.components/with-parent-context","^U","^V","^W",true]],"^S","^V","~:op","^U","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^17","^>","^?","^J","^J","~$log","~$taoensso.timbre","~$eql","^17","~$com.fulcrologic.fulcro.algorithms.denormalize","^1;","~$cljs.core","^1<","~$gobj","~$goog.object","~$goog","^1?","^1>","^1>","~$cljsjs.react","^1@","^16","^16","~$util","~$com.fulcrologic.fulcro.algorithms.do-not-use","~$s","^?","^14","^14","^19","^19","~$str","~$clojure.string","^1D","^1D","^?","^?","~$fdn","^1;","~$clojure.walk","^1F","^1B","^1B"],"~:seen",["^L",["~:require","~:require-macros"]],"~:uses",["^ ","~$prewalk","^1F","^I","^J"],"^1I",["^ ","^V","^V","^1<","^1<","^>","^?","^J","^J","^18","^19","~$s","^?","^19","^19","^?","^?"],"~:form",["^Q",["~$ns","^V",["^Q",["^1I","^V"]],["^Q",["^1H",["^1>","~:as","^1="],["^1@"],["^17","^1N","^1:"],["^>","^1N","~$s"],["^19","^1N","^18"],["^1F","~:refer",["^1K"]],["^1D","^1N","^1C"],["^1B","^1N","^1A"],["^1;","^1N","^1E"],["^14","^1N","^13"],["^J","^1O",["^I"]],["^16","^1N","^15"]]]]],"~:flags",["^ ","^1I",["^L",[]],"^1H",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^1?","^1<","^1>","^1@","^17","^?","^19","^1F","^1D","^1B","^1;","^14","^J","^16"]],"^U","^V","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/components.cljc"],"~:compiled-at",1599160994949,"~:resource-name","com/fulcrologic/fulcro/components.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.components\n  #?(:cljs (:require-macros com.fulcrologic.fulcro.components))\n  (:require\n    #?@(:clj\n        [[cljs.analyzer :as ana]\n         [cljs.env :as cljs-env]]\n        :cljs\n        [[goog.object :as gobj]\n         [cljsjs.react]])\n    [edn-query-language.core :as eql]\n    [clojure.spec.alpha :as s]\n    [taoensso.timbre :as log]\n    [clojure.walk :refer [prewalk]]\n    [clojure.string :as str]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as util]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.guardrails.core :refer [>def]]\n    [clojure.set :as set])\n  #?(:clj\n     (:import\n       [clojure.lang Associative IDeref APersistentMap])))\n\n(defonce ^:private component-registry (atom {}))\n\n#?(:clj\n   (defn current-config []\n     (let [config (some-> cljs-env/*compiler* deref (get-in [:options :external-config :fulcro]))]\n       config)))\n\n;; Used internally by get-query for resolving dynamic queries (was created to prevent the need for external API change in 3.x)\n(def ^:dynamic *query-state* nil)\n\n;; Bound during Fulcro-driven renders to communicate critical information to components *on their initial render*.\n;; Due to the nature of js and React there is no guarantee that future `render` (or lifecycle calls) will actually be done synchronously,\n;; so these are *copied* into the raw react props of the component for future reference (a mounted component won't change\n;; depth, will know its parent, and the app is a immutable map with atoms). You must ensure these are bound using\n;; `with-parent-context` if you cause an initial mount of a component via things like the child-as-a-function, or HOC patterns.\n;; If a raw js library wants a Fulcro component (class), then you may need to use the multiple-roots renderer so that\n;; it can register on mount with Fulcro.\n(def ^:dynamic *app* nil)\n(def ^:dynamic *parent* nil)\n(def ^:dynamic *depth* nil)\n(def ^:dynamic *shared* nil)\n\n;; Used by default shouldComponentUpdate. If set to `true`, then SCU will return true. This is used by hot code reload\n;; to know when it should re-render even if props have not changed so you can see the effects of rendering code changes.\n;; Also used when you force a root render.\n(def ^:dynamic *blindly-render* false)\n\n(defn ^:deprecated use-effect\n  \"DEPRECATED: use from com.fulcrologic.fulcro.react.hooks\n\n  A simple wrapper around React/useEffect that auto-converts cljs arrays of deps to js.\"\n  ([f] #?(:cljs (js/React.useEffect f)))\n  ;; TODO: optimization: if this were a macro we could convert literal vectors at compile time. See DOM macros.\n  ([f deps] #?(:cljs (js/React.useEffect f (clj->js deps)))))\n\n(defn ^:deprecated use-state\n  \"DEPRECATED: use from com.fulcrologic.fulcro.react.hooks\n  A simple wrapper around React/useState. Returns a cljs vector for easy destructuring\"\n  [initial-value]\n  #?(:cljs (js->clj (js/React.useState initial-value))))\n\n(defn isoget-in\n  \"Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\n  gobj/getValueByKeys.\"\n  ([obj kvs]\n   (isoget-in obj kvs nil))\n  ([obj kvs default]\n   #?(:clj (get-in obj kvs default)\n      :cljs\n           (let [ks (mapv (fn [k] (some-> k name)) kvs)]\n             (or (apply gobj/getValueByKeys obj ks) default)))))\n\n(defn isoget\n  \"Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`.\"\n  ([obj k] (isoget obj k nil))\n  ([obj k default]\n   #?(:clj  (get obj k default)\n      :cljs (or (gobj/get obj (some-> k (name))) default))))\n\n\n(defn register-component!\n  \"Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\n  that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\n  Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc.\"\n  [k component-class]\n  (swap! component-registry assoc k component-class)\n  component-class)\n\n(defn force-children\n  \"Utility function that will force a lazy sequence of children (recursively) into realized\n  vectors (React cannot deal with lazy seqs in production mode)\"\n  [x]\n  (cond->> x\n    (seq? x) (into [] (map force-children))))\n\n(defn newer-props\n  \"Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\n  is part of props 'tunnelling', an optimization to get updated props to instances without going through the root.\"\n  [props-a props-b]\n  (cond\n    (nil? props-a) props-b\n    (nil? props-b) props-a\n    (> (or (fdn/denormalization-time props-a) 2) (or (fdn/denormalization-time props-b) 1)) props-a\n    :else props-b))\n\n(defn component-instance?\n  \"Returns true if the argument is a component. A component is defined as a *mounted component*.\n   This function returns false for component classes, and also returns false for the output of a Fulcro component factory.\"\n  #?(:cljs {:tag boolean})\n  [x]\n  (if-not (nil? x)\n    #?(:clj  (true? (:fulcro$isComponent x))\n       :cljs (true? (gobj/get x \"fulcro$isComponent\")))\n    false))\n\n(def component?\n  \"Returns true if the argument is a component instance.\n\n   DEPRECATED for terminology clarity. Use `component-instance?` instead.\"\n  component-instance?)\n\n(defn component-class?\n  \"Returns true if the argument is a component class.\"\n  #?(:cljs {:tag boolean})\n  [x]\n  #?(:clj  (boolean (and (map? x) (::component-class? x)))\n     :cljs (boolean (gobj/containsKey x \"fulcro$class\"))))\n\n(>def ::component-class component-class?)\n\n(defn component-name\n  \"Returns a string version of the given react component's name. Works on component instances and classes.\"\n  [class]\n  (isoget class :displayName))\n\n(defn class->registry-key\n  \"Returns the registry key for the given component class.\"\n  [class]\n  (isoget class :fulcro$registryKey))\n\n(defn registry-key->class\n  \"Look up the given component in Fulcro's global component registry. Will only be able to find components that have\n  been (transitively) required by your application.\n\n  `classname` can be a fully-qualified keyword or symbol.\"\n  [classname]\n  (cond\n    (keyword? classname) (get @component-registry classname)\n    (symbol? classname) (let [k (keyword (namespace classname) (name classname))]\n                          (get @component-registry k))\n    :otherwise nil))\n\n(declare props)\n\n(defn computed\n  \"Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\n  necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\n  is not necessary for \\\"stateless\\\" components, though it will work properly for both.\n\n  Computed props are \\\"remembered\\\" so that a targeted update (which can only happen on a component with a query\n  and ident) can use new props from the database without \\\"losing\\\" the computed props that were originally passed\n  from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \\\"lose\n  track of\\\" them.\n  \"\n  [props computed-map]\n  (when-not (nil? props)\n    (if (vector? props)\n      (cond-> props\n        (not (empty? computed-map)) (vary-meta assoc :fulcro.client.primitives/computed computed-map))\n      (cond-> props\n        (not (empty? computed-map)) (assoc :fulcro.client.primitives/computed computed-map)))))\n\n(defn get-computed\n  \"Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil.\"\n  ([x]\n   (get-computed x []))\n  ([x k-or-ks]\n   (when-not (nil? x)\n     (let [props (cond-> x (component-instance? x) props)\n           ks    (into [:fulcro.client.primitives/computed]\n                   (cond-> k-or-ks\n                     (not (sequential? k-or-ks)) vector))]\n       (if (vector? props)\n         (-> props meta (get-in ks))\n         (get-in props ks))))))\n\n(defn get-extra-props\n  \"Get any data (as a map) that props extensions have associated with the given Fulcro component. Extra props will\n  be empty unless you've installed props-middleware (on your app) that sets them.\"\n  [this]\n  (isoget-in this [:props :fulcro$extra_props] {}))\n\n(defn props\n  \"Return a component's props.\"\n  [component]\n  (let [props-from-parent    (isoget-in component [:props :fulcro$value])\n        computed-from-parent (get-computed props-from-parent)\n        props-from-updates   (computed (isoget-in component [:state :fulcro$value]) computed-from-parent)]\n    (newer-props props-from-parent props-from-updates)))\n\n(defn children\n  \"Get the sequence of react children of the given component.\"\n  [component]\n  (let [cs #?(:clj (get-in component [:children])\n              :cljs (gobj/getValueByKeys component \"props\" \"children\"))]\n    (if (or (coll? cs) #?(:cljs (array? cs))) cs [cs])))\n\n(defn react-type\n  \"Returns the component type, regardless of whether the component has been\n   mounted\"\n  [x]\n  #?(:clj  (if (component-class? x) x (:fulcro$class x))\n     :cljs (or (gobj/get x \"type\") (type x))))\n\n(defn get-class\n  \"Returns the react type (component class) of the given React element (instance). Is identity if used on a class.\"\n  [instance]\n  (react-type instance))\n\n(defn component-options\n  \"Returns the map of options that was specified (via `defsc`) for the component class.\"\n  ([instance-or-class & ks]\n   (let [c       (react-type instance-or-class)\n         options (or (isoget instance-or-class :fulcro$options) (isoget c :fulcro$options))]\n     (if (seq options)\n       (get-in options (vec ks))\n       options))))\n\n(defn has-feature? #?(:cljs {:tag boolean}) [component option-key] (contains? (component-options component) option-key))\n(defn has-initial-app-state? #?(:cljs {:tag boolean}) [component] (has-feature? component :initial-state))\n(defn has-ident? #?(:cljs {:tag boolean}) [component] (has-feature? component :ident))\n(defn has-query? #?(:cljs {:tag boolean}) [component] (has-feature? component :query))\n(defn has-pre-merge? #?(:cljs {:tag boolean}) [component] (has-feature? component :pre-merge))\n(defn ident [this props] (when (has-feature? this :ident) ((component-options this :ident) this props)))\n(defn query [this] (when (has-feature? this :query) ((component-options this :query) this)))\n(defn initial-state [clz params] (when (has-feature? clz :initial-state) ((component-options clz :initial-state) params)))\n(defn pre-merge [this data] (when (has-feature? this :pre-merge) ((component-options this :pre-merge) data)))\n(defn depth [this] (isoget-in this [:props :fulcro$depth]))\n\n(defn get-raw-react-prop\n  \"GET a RAW react prop. Used internally. Safe in CLJC, but equivalent to `(gobj/getValueByKeys this \\\"props\\\" (name k)`.\"\n  [c k]\n  (isoget-in c [:props k]))\n\n(defn any->app\n  \"Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\n  or an atom holding any of the above.\"\n  [x]\n  (letfn [(fulcro-app? [x] (and (map? x) (contains? x :com.fulcrologic.fulcro.application/state-atom)))]\n    (cond\n      (component-instance? x) (get-raw-react-prop x :fulcro$app)\n      (fulcro-app? x) x\n      #?(:clj  (instance? IDeref x)\n         :cljs (satisfies? IDeref x)) (any->app (deref x)))))\n\n(defn raw->newest-props\n  \"Using raw react props/state returns the newest Fulcro props. This is part of \\\"props tunneling\\\", where component\n  local state is leveraged as a communication mechanism of updated props directly to a component that has an ident.\n  This function will return the correct version of props based on timestamps.\"\n  [raw-props raw-state]\n  #?(:clj  raw-props\n     :cljs (let [next-props (gobj/get raw-props \"fulcro$value\")\n                 opt-props  (gobj/get raw-state \"fulcro$value\")]\n             (newer-props next-props opt-props))))\n\n(defn shared\n  \"Return the global shared properties of the root. See :shared and\n   :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\n   `app/update-shared!`.\n\n   This function attempts to rely on the dynamic var *shared* (first), but will make a best-effort of\n   finding shared props when run within a component's render or lifecycle. Passing your app will\n   ensure this returns the current shared props.\"\n  ([comp-or-app]\n   (shared comp-or-app []))\n  ([comp-or-app k-or-ks]\n   (let [shared (or *shared* (some-> (any->app comp-or-app) :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/shared-props))\n         ks     (cond-> k-or-ks\n                  (not (sequential? k-or-ks)) vector)]\n     (cond-> shared\n       (not (empty? ks)) (get-in ks)))))\n\n(letfn\n  [(wrap-props-state-handler\n     ([handler]\n      (wrap-props-state-handler handler true))\n     ([handler check-for-fresh-props-in-state?]\n      #?(:clj (fn [& args] (apply handler args))\n         :cljs\n              (fn [raw-props raw-state]\n                (this-as this\n                  (let [props (if check-for-fresh-props-in-state?\n                                (raw->newest-props raw-props raw-state)\n                                (gobj/get raw-props \"fulcro$props\"))\n                        state (gobj/get raw-state \"fulcro$state\")]\n                    (handler this props state)))))))\n   (static-wrap-props-state-handler\n     [handler]\n     #?(:clj (fn [& args] (apply handler args))\n        :cljs\n        (fn [raw-props raw-state]\n          (let [props (raw->newest-props raw-props raw-state)\n                state (gobj/get raw-state \"fulcro$state\")]\n            (handler props state)))))\n   (should-component-update?\n     [raw-next-props raw-next-state]\n     #?(:clj true\n        :cljs (if *blindly-render*\n                true\n                (this-as this\n                  (let [current-props     (props this)\n                        next-props        (raw->newest-props raw-next-props raw-next-state)\n                        next-state        (gobj/get raw-next-state \"fulcro$state\")\n                        current-state     (gobj/getValueByKeys this \"state\" \"fulcro$state\")\n                        props-changed?    (not= current-props next-props)\n                        state-changed?    (not= current-state next-state)\n                        next-children     (gobj/get raw-next-props \"children\")\n                        children-changed? (not= (gobj/getValueByKeys this \"props\" \"children\") next-children)]\n                    (or props-changed? state-changed? children-changed?))))))\n   (component-did-update\n     [raw-prev-props raw-prev-state snapshot]\n     #?(:cljs\n        (this-as this\n          (let [{:keys [ident componentDidUpdate]} (component-options this)\n                prev-state (gobj/get raw-prev-state \"fulcro$state\")\n                prev-props (raw->newest-props raw-prev-props raw-prev-state)]\n            (when componentDidUpdate\n              (componentDidUpdate this prev-props prev-state snapshot))\n            (when ident\n              (let [old-ident        (ident this prev-props)\n                    next-ident       (ident this (props this))\n                    app              (any->app this)\n                    drop-component!  (ah/app-algorithm app :drop-component!)\n                    index-component! (ah/app-algorithm app :index-component!)]\n                (when (not= old-ident next-ident)\n                  (drop-component! this old-ident)\n                  (index-component! this))))))))\n   (component-did-mount\n     []\n     #?(:cljs\n        (this-as this\n          (gobj/set this \"fulcro$mounted\" true)\n          (let [{:keys [componentDidMount]} (component-options this)\n                app              (any->app this)\n                index-component! (ah/app-algorithm app :index-component!)]\n            (index-component! this)\n            (when componentDidMount\n              (componentDidMount this))))))\n   (component-will-unmount []\n     #?(:cljs\n        (this-as this\n          (let [{:keys [componentWillUnmount]} (component-options this)\n                app             (any->app this)\n                drop-component! (ah/app-algorithm app :drop-component!)]\n            (when componentWillUnmount\n              (componentWillUnmount this))\n            (gobj/set this \"fulcro$mounted\" false)\n            (drop-component! this)))))\n   (wrap-this\n     [handler]\n     #?(:clj (fn [& args] (apply handler args))\n        :cljs\n        (fn [& args] (this-as this (apply handler this args)))))\n   (wrap-props-handler\n     ([handler]\n      (wrap-props-handler handler true))\n     ([handler check-for-fresh-props-in-state?]\n      #?(:clj #(handler %1)\n         :cljs\n              (fn [raw-props]\n                (this-as this\n                  (let [raw-state (.-state this)\n                        props     (if check-for-fresh-props-in-state?\n                                    (raw->newest-props raw-props raw-state)\n                                    (gobj/get raw-props \"fulcro$props\"))]\n                    (handler this props)))))))\n\n   (wrap-base-render [render]\n     #?(:clj (fn [& args]\n               (binding [*parent* (first args)]\n                 (apply render args)))\n        :cljs\n        (fn [& args]\n          (this-as this\n            (if-let [app (any->app this)]\n              (binding [*app*    app\n                        *depth*  (inc (depth this))\n                        *shared* (shared this)\n                        *parent* this]\n                (apply render this args))\n              (log/fatal \"Cannot find app on component!\"))))))]\n\n  (defn configure-component!\n    \"Configure the given `cls` (a function) to act as a react component within the Fulcro ecosystem.\n\n    cls - A js function (in clj, this is ignored)\n    fqkw - A keyword that shares the exact fully-qualified name of the component class\n    options - A component options map (no magic) containing things like `:query` and `:ident`.\n\n\n    NOTE: the `options` map expects proper function signatures for:\n\n    `:query` - (fn [this] ...)\n    `:ident` - (fn [this props] ...)\n    `:initial-state` - (fn [cls params] ...)\n\n    Returns (and registers) a new react class.\n    \"\n    [cls fqkw options]\n    #?(:clj\n       (let [name   (str/join \"/\" [(namespace fqkw) (name fqkw)])\n             {:keys [render]} options\n             result {::component-class?  true\n                     :fulcro$options     (assoc options :render (wrap-base-render render))\n                     :fulcro$registryKey fqkw\n                     :displayName        name}]\n         (register-component! fqkw result)\n         result)\n       :cljs\n       ;; This user-supplied versions will expect `this` as first arg\n       (let [{:keys [getDerivedStateFromProps shouldComponentUpdate getSnapshotBeforeUpdate render\n                     initLocalState componentDidCatch getDerivedStateFromError\n                     componentWillUpdate componentWillMount componentWillReceiveProps\n                     UNSAFE_componentWillMount UNSAFE_componentWillUpdate UNSAFE_componentWillReceiveProps]} options\n             name              (str/join \"/\" [(namespace fqkw) (name fqkw)])\n             js-instance-props (clj->js\n                                 (-> {:componentDidMount     component-did-mount\n                                      :componentWillUnmount  component-will-unmount\n                                      :componentDidUpdate    component-did-update\n                                      :shouldComponentUpdate (if shouldComponentUpdate\n                                                               (wrap-props-state-handler shouldComponentUpdate)\n                                                               should-component-update?)\n                                      :fulcro$isComponent    true\n                                      :type                  cls\n                                      :displayName           name}\n                                   (cond->\n                                     render (assoc :render (wrap-base-render render))\n                                     getSnapshotBeforeUpdate (assoc :getSnapshotBeforeUpdate (wrap-props-state-handler getSnapshotBeforeUpdate))\n                                     componentDidCatch (assoc :componentDidCatch (wrap-this componentDidCatch))\n                                     UNSAFE_componentWillMount (assoc :UNSAFE_componentWillMount (wrap-this UNSAFE_componentWillMount))\n                                     UNSAFE_componentWillUpdate (assoc :UNSAFE_componentWillUpdate (wrap-props-state-handler UNSAFE_componentWillUpdate))\n                                     UNSAFE_componentWillReceiveProps (assoc :UNSAFE_componentWillReceiveProps (wrap-props-handler UNSAFE_componentWillReceiveProps))\n                                     componentWillMount (assoc :componentWillMount (wrap-this componentWillMount))\n                                     componentWillUpdate (assoc :componentWillUpdate (wrap-this componentWillUpdate))\n                                     componentWillReceiveProps (assoc :componentWillReceiveProps (wrap-props-handler componentWillReceiveProps))\n                                     initLocalState (assoc :initLocalState (wrap-this initLocalState)))))\n             statics           (cond-> {:displayName            name\n                                        :fulcro$class           cls\n                                        :cljs$lang$type         true\n                                        :cljs$lang$ctorStr      name\n                                        :cljs$lang$ctorPrWriter (fn [_ writer _] (cljs.core/-write writer name))}\n                                 getDerivedStateFromError (assoc :getDerivedStateFromError (fn [error]\n                                                                                             (let [v (getDerivedStateFromError error)]\n                                                                                               (if (coll? v)\n                                                                                                 #js {\"fulcro$state\" v}\n                                                                                                 v))))\n                                 getDerivedStateFromProps (assoc :getDerivedStateFromProps (static-wrap-props-state-handler getDerivedStateFromProps)))]\n         (gobj/extend (.-prototype cls) js/React.Component.prototype js-instance-props\n           #js {\"fulcro$options\" options})\n         (gobj/extend cls (clj->js statics) #js {\"fulcro$options\" options})\n         (gobj/set cls \"fulcro$registryKey\" fqkw)           ; done here instead of in extend (clj->js screws it up)\n         (register-component! fqkw cls)))))\n\n(defn add-hook-options!\n  \"Make a given `cls` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\n  new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\n  keyword to name the component in the registry.\n\n  component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\n  function as the faux class in the component registry.\"\n  [render-fn component-options]\n  #?(:cljs\n     (let [k              (:componentName component-options)\n           faux-classname (str (or k (throw (ex-info \"Missing :componentName for hooks component\" {}))))]\n       (gobj/extend render-fn\n         #js {:fulcro$options         component-options\n              :displayName            faux-classname\n              :fulcro$class           render-fn\n              :type                   render-fn\n              :cljs$lang$type         true\n              :cljs$lang$ctorStr      faux-classname\n              :cljs$lang$ctorPrWriter (fn [_ writer _] (cljs.core/-write writer faux-classname))\n              :fulcro$registryKey     (:componentName component-options)})\n       (register-component! k render-fn)\n       render-fn)))\n\n(defn use-fulcro\n  \"Allows you to use a plain function as a Fulcro-managed React hooks component.\n\n  * `js-props` - The React js props from the parent.\n  * `faux-class` - A Fulcro faux class, which is a fn that has had `add-options!` called on it.\n\n  Returns a cljs vector containing `this` and fulcro `props`. You should *not* use the returned `this` directly,\n  as it is a placeholder.\n\n  Prefer `defsc` or `configure-hooks-component! over using this directly.`\n  \"\n  [js-props faux-class]\n  #?(:cljs\n     (let [app                     (isoget js-props :fulcro$app)\n           tunnelled-props-state   (js/React.useState #js {})\n           js-set-tunnelled-props! (aget tunnelled-props-state 1)\n           {:keys [ident] :as options} (isoget faux-class :fulcro$options)\n           faux-component-state    (js/React.useState (fn []\n                                                        (when-not app\n                                                          (log/error \"Cannot create proper fulcro component, as *app* isn't bound.\"\n                                                            \"This happens when something renders a Fulcro component outside of Fulcro's render context.\"\n                                                            \"See `with-parent-context`.\"))\n                                                        (let [depth                (or *depth* (isoget js-props :fulcro$depth))\n                                                              set-tunnelled-props! (fn [updater] (let [new-props (updater nil)] (js-set-tunnelled-props! new-props)))]\n                                                          #js {:setState           set-tunnelled-props!\n                                                               :fulcro$isComponent true\n                                                               :fulcro$class       faux-class\n                                                               :type               faux-class\n                                                               :fulcro$options     options\n                                                               :fulcro$mounted     false\n                                                               :props              #js {:fulcro$app   app\n                                                                                        :fulcro$depth (inc depth)}})))\n           faux-component          (aget faux-component-state 0)\n           current-state           (aget tunnelled-props-state 0 \"fulcro$value\")\n           props                   (isoget js-props :fulcro$value)\n           children                (isoget js-props :children)\n           current-props           (newer-props props current-state)\n           current-ident           (when ident (ident faux-class current-props))\n           shared-props            (when app (shared app))]\n       (doto (gobj/get faux-component \"props\")\n         (gobj/set \"fulcro$shared\" shared-props)\n         (gobj/set \"fulcro$value\" current-props)\n         (gobj/set \"children\" children))\n       (js/React.useEffect\n         (fn []\n           (let [original-ident   current-ident\n                 index-component! (ah/app-algorithm app :index-component!)\n                 drop-component!  (ah/app-algorithm app :drop-component!)]\n             (gobj/set faux-component \"fulcro$mounted\" true)\n             (index-component! faux-component)\n             (fn []\n               (gobj/set faux-component \"fulcro$mounted\" false)\n               (drop-component! faux-component original-ident))))\n         #?(:cljs #js [(second current-ident)]))\n       [faux-component current-props])))\n\n(defn mounted?\n  \"Returns true if the given component instance is mounted on the DOM.\"\n  [this]\n  #?(:clj  false\n     :cljs (gobj/get this \"fulcro$mounted\" false)))\n\n(defn set-state!\n  \"Set React component-local state.  The `new-state` is actually merged with the existing state (as per React docs),\n  but is wrapped so that cljs maps are used (instead of js objs).  `callback` is an optional callback that will be\n  called as per the React docs on setState.\"\n  ([component new-state callback]\n   #?(:clj\n      (when-let [state-atom (:state component)]\n        (swap! state-atom update merge new-state)\n        (callback))\n      :cljs\n      (if (mounted? component)\n        (.setState ^js component\n          (fn [prev-state props]\n            #js {\"fulcro$state\" (merge (gobj/get prev-state \"fulcro$state\") new-state)})\n          callback))))\n  ([component new-state]\n   (set-state! component new-state nil)))\n\n(defn get-state\n  \"Get a component's local state. May provide a single key or a sequential\n   collection of keys for indexed access into the component's local state. NOTE: This is Fulcro's wrapped component\n   local state. The low-level React state is as described in the React docs (e.g. `(.-state this)`).\"\n  ([component]\n   (get-state component []))\n  ([component k-or-ks]\n   (let [cst #?(:clj (some-> component :state deref)\n                :cljs (gobj/getValueByKeys component \"state\" \"fulcro$state\"))]\n     (get-in cst (if (sequential? k-or-ks) k-or-ks [k-or-ks])))))\n\n(let [update-fn (fn [component f args]\n                  #?(:cljs (.setState ^js component\n                             (fn [prev-state props]\n                               #js {\"fulcro$state\" (apply f (gobj/get prev-state \"fulcro$state\") args)}))))]\n  (defn update-state!\n    \"Update a component's local state. Similar to Clojure(Script)'s swap!\n\n    This function affects a managed cljs map maintained in React state.  If you want to affect the low-level\n    js state itself use React's own `.setState` directly on the component.\"\n    ([component f]\n     (update-fn component f []))\n    ([component f & args]\n     (update-fn component f args))))\n\n(defn get-initial-state\n  \"Get the declared :initial-state value for a component.\"\n  ([class]\n   (some-> (initial-state class {}) (with-meta {:computed true})))\n  ([class params]\n   (some-> (initial-state class params) (with-meta {:computed true}))))\n\n(defn computed-initial-state?\n  \"Returns true if the given initial state was returned from a call to get-initial-state. This is used by internal\n  algorithms when interpreting initial state shorthand in `defsc`.\"\n  [s]\n  (and (map? s) (some-> s meta :computed)))\n\n(defn get-ident\n  \"Get the ident for a mounted component OR using a component class.\n\n  That arity-2 will return the ident using the supplied props map.\n\n  The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\n  props that were sent to it most recently.\"\n  ([x]\n   {:pre [(component-instance? x)]}\n   (if-let [m (props x)]\n     (ident x m)\n     (when #?(:clj false :cljs goog.DEBUG)\n       (log/warn \"get-ident was invoked on \" (component-name x) \" with nil props (this could mean it wasn't yet mounted): \" x))))\n  ([class props]\n   (if-let [id (ident class props)]\n     (do\n       (when (and #?(:clj false :cljs goog.DEBUG) (not (eql/ident? id)))\n         (log/warn \"get-ident returned an invalid ident:\" id (:displayName (component-options class))))\n       (if (= :com.fulcrologic.fulcro.algorithms.merge/not-found (second id)) [(first id) nil] id))\n     (when #?(:clj false :cljs goog.DEBUG)\n       (log/warn \"get-ident called with something that is either not a class or does not implement ident: \" class)\n       nil))))\n\n(defn tunnel-props!\n  \"CLJS-only.  When the `component` is mounted this will tunnel `new-props` to that component through React `setState`. If you're in\n  an event handler, this means the tunnelling will be synchronous, and can be useful when updating props that could affect DOM\n  inputs. This is typically used internally (see `transact!!`, and should generally not be used in applications unless it is a very advanced\n  scenario and you've studied how this works. NOTE: You should `tick!` the application clock and bind *denormalize-time*\n  when generating `new-props` so they are properly time-stamped by `db->tree`, or manually add time to `new-props`\n  using `fdn/with-time` directly.\"\n  [component new-props]\n  #?(:cljs\n     (when (mounted? component)\n       (.setState ^js component (fn [s] #js {\"fulcro$value\" new-props})))))\n\n(defn is-factory?\n  \"Returns true if the given argument is a component factory.\"\n  [class-or-factory]\n  (and (fn? class-or-factory)\n    (-> class-or-factory meta (contains? :qualifier))))\n\n(defn query-id\n  \"Returns a string ID for the query of the given class with qualifier.\"\n  [class qualifier]\n  (if (nil? class)\n    (when #?(:clj false :cljs goog.DEBUG)\n      (log/error \"Query ID received no class (if you see this warning, it probably means metadata was lost on your query)\" (ex-info \"\" {})))\n    (when-let [classname (component-name class)]\n      (str classname (when qualifier (str \"$\" qualifier))))))\n\n(defn denormalize-query\n  \"Takes a state map that may contain normalized queries and a query ID. Returns the stored query or nil.\"\n  [state-map ID]\n  (let [get-stored-query (fn [id]\n                           (let [{:keys [query component-key]} (get-in state-map [::queries id])\n                                 component (registry-key->class component-key)]\n                             (when-not component (get-in state-map [::queries id]))\n                             (some-> query (vary-meta assoc :component component :queryid id))))]\n    (when-let [normalized-query (get-stored-query ID)]\n      (prewalk (fn [ele]\n                 (if-let [q (and (string? ele) (get-stored-query ele))]\n                   q\n                   ele)) normalized-query))))\n\n(defn- get-query-id\n  \"Get the query id that is cached in the component's props.\"\n  [component]\n  (get-raw-react-prop component #?(:clj  :fulcro$queryid\n                                   :cljs \"fulcro$queryid\")))\n\n(defn get-query-by-id [state-map class queryid]\n  (let [query (or (denormalize-query state-map queryid) (query class))]\n    (with-meta query {:component class\n                      :queryid   queryid})))\n\n(defn get-query\n  \"Get the query for the given class or factory. If called without a state map, then you'll get the declared static\n  query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\n  the current dynamically-set query according to that state.\"\n  ([class-or-factory] (get-query class-or-factory (or *query-state*\n                                                    (some-> *app* :com.fulcrologic.fulcro.application/state-atom deref) {})))\n  ([class-or-factory state-map]\n   (when (nil? class-or-factory)\n     (throw (ex-info \"nil passed to get-query\" {})))\n   (binding [*query-state* state-map]\n     (let [class     (cond\n                       (is-factory? class-or-factory) (-> class-or-factory meta :class)\n                       (component-instance? class-or-factory) (react-type class-or-factory)\n                       :else class-or-factory)\n           ;; Hot code reload. Avoid classes that were cached on metadata using the registry.\n           class     (if #?(:cljs goog.DEBUG :clj false)\n                       (-> class class->registry-key registry-key->class)\n                       class)\n           qualifier (if (is-factory? class-or-factory)\n                       (-> class-or-factory meta :qualifier)\n                       nil)\n           queryid   (if (component-instance? class-or-factory)\n                       (get-query-id class-or-factory)\n                       (query-id class qualifier))]\n       (when (and class (has-query? class))\n         (get-query-by-id state-map class queryid))))))\n\n(defn make-state-map\n  \"Build a component's initial state using the defsc initial-state-data from\n  options, the children from options, and the params from the invocation of get-initial-state.\"\n  [initial-state children-by-query-key params]\n  (let [join-keys (set (keys children-by-query-key))\n        init-keys (set (keys initial-state))\n        is-child? (fn [k] (contains? join-keys k))\n        value-of  (fn value-of* [[isk isv]]\n                    (let [param-name    (fn [v] (and (keyword? v) (= \"param\" (namespace v)) (keyword (name v))))\n                          substitute    (fn [ele] (if-let [k (param-name ele)]\n                                                    (get params k)\n                                                    ele))\n                          param-key     (param-name isv)\n                          param-exists? (contains? params param-key)\n                          param-value   (get params param-key)\n                          child-class   (get children-by-query-key isk)]\n                      (cond\n                        ; parameterized lookup with no value\n                        (and param-key (not param-exists?)) nil\n\n                        ; to-one join, where initial state is a map to be used as child initial state *parameters* (enforced by defsc macro)\n                        ; and which may *contain* parameters\n                        (and (map? isv) (is-child? isk)) [isk (get-initial-state child-class (into {} (keep value-of* isv)))]\n\n                        ; not a join. Map is literal initial value.\n                        (map? isv) [isk (into {} (keep value-of* isv))]\n\n                        ; to-many join. elements MUST be parameters (enforced by defsc macro)\n                        (and (vector? isv) (is-child? isk)) [isk (mapv (fn [m] (get-initial-state child-class (into {} (keep value-of* m)))) isv)]\n\n                        ; to-many join. elements might be parameter maps or already-obtained initial-state\n                        (and (vector? param-value) (is-child? isk)) [isk (mapv (fn [params]\n                                                                                 (if (computed-initial-state? params)\n                                                                                   params\n                                                                                   (get-initial-state child-class params))) param-value)]\n\n                        ; vector of non-children\n                        (vector? isv) [isk (mapv (fn [ele] (substitute ele)) isv)]\n\n                        ; to-one join with parameter. value might be params, or an already-obtained initial-state\n                        (and param-key (is-child? isk) param-exists?) [isk (if (computed-initial-state? param-value)\n                                                                             param-value\n                                                                             (get-initial-state child-class param-value))]\n                        param-key [isk param-value]\n                        :else [isk isv])))]\n    (into {} (keep value-of initial-state))))\n\n(defn wrapped-render\n  \"Run `real-render`, possibly through :render-middleware configured on your app.\"\n  [this real-render]\n  #?(:clj\n     (real-render)\n     :cljs\n     (let [app               (gobj/getValueByKeys this \"props\" \"fulcro$app\")\n           render-middleware (ah/app-algorithm app :render-middleware)]\n       (if render-middleware\n         (render-middleware this real-render)\n         (real-render)))))\n\n(defn configure-hooks-component!\n  \"Configure a function `(f [this fulcro-props] ...)` to work properly as a hook-based react component. This can be\n  used in leiu of `defsc` to create a component, where `options` is the (non-magic) map of component options\n  (i.e. :query is a `(fn [this])`, not a vector).\n\n  IMPORTANT: Your options must include `:componentName`, a fully-qualified keyword to use in the component registry.\n\n  Returns a new function that wraps yours (to properly extract Fulcro props) and installs the proper Fulcro component\n  options on the low-level function so that it will act properly when used within React as a hook-based component.\n\n  (def MyComponent\n    (configure-hooks-component!\n      (fn [this props]\n        (let [[v set-v!] (use-state this 0)\n          (dom/div ...)))\n      {:query ... :ident (fn [_ props] ...) :componentName ::MyComponent}))\n\n  (def ui-my-component (comp/factory MyComponent {:keyfn :id})\n\n  This can be used to easily generate dynamic components at runtime (as can `configure-component!`).\n  \"\n  [f options]\n  (let [cls-atom (atom nil)\n        js-fn    (fn [js-props]\n                   (let [[this props] (use-fulcro js-props @cls-atom)]\n                     (wrapped-render this\n                       (fn []\n                         (binding [*app*    (or *app* (any->app this))\n                                   *depth*  (inc (depth this))\n                                   *shared* (shared *app*)\n                                   *parent* this]\n                           (f this props))))))]\n    (reset! cls-atom js-fn)\n    (add-hook-options! js-fn options)))\n\n(defn- create-element\n  \"Create a react element for a Fulcro class.  In CLJ this returns the same thing as a mounted instance, whereas in CLJS it is an\n  element (which has yet to instantiate an instance).\"\n  [class props children]\n  #?(:clj\n     (let [init-state (component-options class :initLocalState)\n           state-atom (atom {})\n           this       {::element?          true\n                       :fulcro$isComponent true\n                       :props              props\n                       :children           children\n                       :state              state-atom\n                       :fulcro$class       class}\n           state      (when init-state (init-state this))]\n       (when (map? state)\n         (reset! state-atom state))\n       this)\n     :cljs\n     (apply js/React.createElement class props (force-children children))))\n\n(defn factory\n  \"Create a factory constructor from a component class created with\n   defsc.\"\n  ([class] (factory class nil))\n  ([class {:keys [keyfn qualifier] :as opts}]\n   (let [qid (query-id class qualifier)]\n     (with-meta\n       (fn element-factory [props & children]\n         (let [key              (:react-key props)\n               key              (cond\n                                  key key\n                                  keyfn (keyfn props))\n               ref              (:ref props)\n               ref              (cond-> ref (keyword? ref) str)\n               props-middleware (some-> *app* (ah/app-algorithm :props-middleware))\n               ;; Our data-readers.clj makes #js == identity in CLJ\n               props            #js {:fulcro$value   props\n                                     :fulcro$queryid qid\n                                     :fulcro$app     *app*\n                                     :fulcro$parent  *parent*\n                                     :fulcro$depth   *depth*}\n               props            (if props-middleware\n                                  (props-middleware class props)\n                                  props)]\n           #?(:cljs\n              (do\n                (when key\n                  (gobj/set props \"key\" key))\n                (when ref\n                  (gobj/set props \"ref\" ref))\n                ;; dev time warnings/errors\n                (when goog.DEBUG\n                  (when (nil? *app*)\n                    (log/error \"A Fulcro component was rendered outside of a parent context. This probably means you are using a library that has you pass rendering code to it as a lambda. Use `with-parent-context` to fix this.\"))\n                  (when (or (map? key) (vector? key))\n                    (log/warn \"React key for \" (component-name class) \" is not a simple scalar value. This could cause spurious component remounts.\"))\n\n                  (when (string? ref)\n                    (log/warn \"String ref on \" (component-name class) \" should be a function.\"))\n\n                  (when (or (nil? props) (not (gobj/containsKey props \"fulcro$value\")))\n                    (log/error \"Props middleware seems to have the corrupted props for \" (component-name class))))))\n           (create-element class props children)))\n       {:class     class\n        :queryid   qid\n        :qualifier qualifier}))))\n\n(defn computed-factory\n  \"Similar to factory, but returns a function with the signature\n  [props computed & children] instead of default [props & children].\n  This makes easier to send computed.\"\n  ([class] (computed-factory class {}))\n  ([class options]\n   (let [real-factory (factory class options)]\n     (fn\n       ([props] (real-factory props))\n       ([props computed-props]\n        (real-factory (computed props computed-props)))\n       ([props computed-props & children]\n        (apply real-factory (computed props computed-props) children))))))\n\n(def ^:dynamic *after-render*\n  \"Dynamic var that affects the activation of transactions run via `transact!`. Defaults to false. When set to true\n   this option prevents a transaction from running until after the next render is complete. This typically should not be set\n   to true in scenarios where you are unsure if a render will occur, since that could make the transaction appear to\n   \\\"hang\\\".\"\n  false)\n\n(defn transact!\n  \"Submit a transaction for processing.\n\n  The underlying transaction system is pluggable, but the *default* supported options are:\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\n  - `:component` - React element. Set automatically if you call this function using a component.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n  - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\n    the network portion of the transaction (assuming it has not already completed).\n  - `:compressible?` - boolean. Check compressible-transact! docs.\n  - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\n  a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\n  event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\n  will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\n  be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\n  your own global render using `app/schedule-render!`.\n  ` `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\n  when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\n  before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\n  be set to true for any transactions run within mutation action sections. You can affect the default for this value\n  in a dynamic scope by binding `*after-render*` to true\n\n  NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\n  supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\n  influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  ([app-or-component tx options]\n   (when-let [app (any->app app-or-component)]\n     (let [tx!     (ah/app-algorithm app :tx!)\n           options (cond-> options\n                     (and (not (contains? options :after-render?)) (true? *after-render*)) (assoc :after-render? true)\n                     (and (nil? (:ref options)) (has-ident? app-or-component)) (assoc :ref (get-ident app-or-component))\n                     (and (nil? (:component options)) (component-instance? app-or-component)) (assoc :component app-or-component))]\n       (tx! app tx options))))\n  ([app-or-comp tx]\n   (transact! app-or-comp tx {})))\n\n(defn transact!!\n  \"Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\n\n  Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\n  transaction run on the calling thread, and new props are immediately made available to the calling component via\n  \\\"props tunneling\\\" (a behind-the-scenes mechanism using js/setState).\n\n  This mode is meant to be used in form input event handlers, since React is designed to only work properly with\n  raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\n  unexpectedly.\n\n  WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\n  that has an ident.\n\n  If you're using this, you can also set the compiler option:\n\n  ```\n  :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\n  ```\n\n  to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\n\n  WARNING: Syncrhonous rendering does *not* refresh the full UI, only the component.\n  \"\n  ([component tx] (transact!! component tx {}))\n  ([component tx options]\n   (transact! component tx (merge options {:synchronous? true}))))\n\n(declare normalize-query)\n\n(defn link-element\n  \"Part of internal implementation of dynamic queries.\"\n  [element]\n  (prewalk (fn link-element-helper [ele]\n             (let [{:keys [queryid]} (meta ele)]\n               (if queryid queryid ele))) element))\n\n(defn normalize-query-elements\n  \"Part of internal implementation of dynamic queries.\n\n  Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\n\n  Returns the new state map containing potentially-updated normalized queries.\"\n  [state-map query]\n  (reduce\n    (fn normalize-query-elements-reducer [state ele]\n      (try\n        (let [parameterized? (seq? ele)\n              raw-element    (if parameterized? (first ele) ele)]\n          (cond\n            (util/union? raw-element) (let [union-alternates            (first (vals raw-element))\n                                            union-meta                  (-> union-alternates meta)\n                                            normalized-union-alternates (-> (into {} (map link-element union-alternates))\n                                                                          (with-meta union-meta))\n                                            union-query-id              (-> union-alternates meta :queryid)\n                                            union-component-key         (-> union-alternates meta :component class->registry-key)]\n                                        (assert union-query-id \"Union query has an ID. Did you use extended get-query?\")\n                                        (util/deep-merge\n                                          {::queries {union-query-id {:query         normalized-union-alternates\n                                                                      :component-key union-component-key\n                                                                      :id            union-query-id}}}\n                                          (reduce (fn normalize-union-reducer [s [_ subquery]]\n                                                    (normalize-query s subquery)) state union-alternates)))\n            (and\n              (util/join? raw-element)\n              (util/recursion? (util/join-value raw-element))) state\n            (util/join? raw-element) (normalize-query state (util/join-value raw-element))\n            :else state))\n        (catch #?(:clj Exception :cljs :default) e\n          (when #?(:clj false :cljs goog.DEBUG)\n            (log/error e \"Query normalization failed. Perhaps you tried to set a query with a syntax error?\")))))\n    state-map query))\n\n(defn link-query\n  \"Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\n  with their query ID.\"\n  [query]\n  (let [metadata (meta query)]\n    (with-meta\n      (mapv link-element query)\n      metadata)))\n\n(defn normalize-query\n  \"Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\n  that already appear in the state will not be added.  Part of dynamic query implementation.\"\n  [state-map query]\n  (let [queryid       (some-> query meta :queryid)\n        component-key (class->registry-key (some-> query meta :component))\n        query'        (vary-meta query dissoc :queryid :component)\n        new-state     (normalize-query-elements state-map query')\n        new-state     (if (nil? (::queries new-state))\n                        (assoc new-state ::queries {})\n                        new-state)\n        top-query     (link-query query')]\n    (if (and queryid component-key)\n      (util/deep-merge {::queries {queryid {:query top-query :id queryid :component-key component-key}}} new-state)\n      new-state)))\n\n(defn set-query*\n  \"Put a query in app state.\n\n  NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\n  up an initial app state.\"\n  [state-map class-or-factory {:keys [query] :as args}]\n  (let [queryid   (cond\n                    (nil? class-or-factory)\n                    nil\n\n                    (some-> class-or-factory meta (contains? :queryid))\n                    (some-> class-or-factory meta :queryid)\n\n                    :otherwise (query-id class-or-factory nil))\n        component (or (-> class-or-factory meta :class) class-or-factory)\n        setq*     (fn [state]\n                    (normalize-query\n                      (update state ::queries dissoc queryid)\n                      (vary-meta query assoc :queryid queryid :component component)))]\n    (if (string? queryid)\n      (cond-> state-map\n        (contains? args :query) (setq*))\n      (do\n        (when #?(:clj false :cljs goog.DEBUG)\n          (log/error \"Set query failed. There was no query ID. Use a class or factory for the second argument.\"))\n        state-map))))\n\n(defn set-query!\n  \"Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\n\n  * `x` : is anything that any->app accepts.\n  * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\n  * `opts` : A map with `query` and optionally `params` (substitutions on queries)\n  \"\n  [x class-or-factory {:keys [query params] :as opts}]\n  (let [app        (any->app x)\n        state-atom (:com.fulcrologic.fulcro.application/state-atom app)\n        queryid    (cond\n                     (string? class-or-factory) class-or-factory\n                     (some-> class-or-factory meta (contains? :queryid)) (some-> class-or-factory meta :queryid)\n                     :otherwise (query-id class-or-factory nil))]\n    (if (and (string? queryid) (or query params))\n      (let [index-root!      (ah/app-algorithm app :index-root!)\n            schedule-render! (ah/app-algorithm app :schedule-render!)]\n        (swap! state-atom set-query* class-or-factory {:queryid queryid :query query :params params})\n        (when index-root! (index-root! app))\n        (when schedule-render! (schedule-render! app {:force-root? true})))\n      (when #?(:clj false :cljs goog.DEBUG)\n        (log/error \"Unable to set query. Invalid arguments.\")))))\n\n(defn get-indexes\n  \"Get all of the indexes from a component instance or app. See also `ident->any`, `class->any`, etc.\"\n  [x]\n  (let [app (any->app x)]\n    (some-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/indexes)))\n\n(defn ident->components\n  \"Return all on-screen component instances that are rendering the data for a given ident. `x` is anything any->app accepts.\"\n  [x ident]\n  (some-> (get-indexes x) :ident->components (get ident)))\n\n(defn ident->any\n  \"Return some (random) on-screen components that uses the given ident. `x` is anything any->app accepts.\"\n  [x ident]\n  (first (ident->components x ident)))\n\n(defn prop->classes\n  \"Get all component classes that query for the given prop.\n  `x` can be anything `any->app` is ok with.\n\n  Returns all classes that query for that prop (or ident)\"\n  [x prop]\n  (some-> (get-indexes x) :prop->classes (get prop)))\n\n(defn class->all\n  \"Get all of the on-screen component instances from the indexes that have the type of the component class.\n  `x` can be anything `any->app` is ok with.\"\n  [x class]\n  (let [k (class->registry-key class)]\n    (some-> (get-indexes x) :class->components (get k))))\n\n(defn class->any\n  \"Get a (random) on-screen component instance from the indexes that has type of the given component class.\n  `x` can be anything `any->app` is ok with.\"\n  [x cls]\n  (first (class->all x cls)))\n\n(defn component->state-map\n  \"Returns the current value of the state map via a component instance. Note that it is not safe to render\n  arbitrary data from the state map since Fulcro will have no idea that it should refresh a component that\n  does so; however, it is sometimes useful to look at the state map for information that doesn't\n  change over time.\"\n  [this] (some-> this any->app :com.fulcrologic.fulcro.application/state-atom deref))\n\n(defn wrap-update-extra-props\n  \"Wrap the props middleware such that `f` is called to get extra props that should be placed\n  in the extra-props arg of the component.\n\n  `handler` - (optional) The next item in the props middleware chain.\n  `f` - A (fn [cls extra-props] new-extra-props)\n\n  `f` will be passed the class being rendered and the current map of extra props. It should augment\n  those and return a new version.\"\n  ([f]\n   (fn [cls raw-props]\n     #?(:clj  (update raw-props :fulcro$extra_props (partial f cls))\n        :cljs (let [existing (or (gobj/get raw-props \"fulcro$extra_props\") {})\n                    new      (f cls existing)]\n                (gobj/set raw-props \"fulcro$extra_props\" new)\n                raw-props))))\n  ([handler f]\n   (fn [cls raw-props]\n     #?(:clj  (let [props (update raw-props :fulcro$extra_props (partial f cls))]\n                (handler cls props))\n        :cljs (let [existing (or (gobj/get raw-props \"fulcro$extra_props\") {})\n                    new      (f cls existing)]\n                (gobj/set raw-props \"fulcro$extra_props\" new)\n                (handler cls raw-props))))))\n\n(defn fragment\n  \"Wraps children in a React.Fragment. Props are optional, like normal DOM elements.\"\n  [& args]\n  #?(:clj\n     (let [optional-props (first args)\n           props?         (and (instance? APersistentMap optional-props) (not (component-instance? optional-props)))\n           [_ children] (if props?\n                          [(first args) (rest args)]\n                          [{} args])]\n       (vec children))\n     :cljs\n     (let [[props children] (if (map? (first args))\n                              [(first args) (rest args)]\n                              [#js {} args])]\n       (apply js/React.createElement js/React.Fragment (clj->js props) (force-children children)))))\n\n#?(:clj\n   (defmacro with-parent-context\n     \"Wraps the given body with the correct internal bindings of the parent so that Fulcro internals\n     will work when that body is embedded in unusual ways (e.g. as the body in a child-as-a-function\n     React pattern).\n\n     ```\n     (defsc X [this props]\n       ...\n       ;; WRONG:\n       (some-react-thing {:child (fn [] (ui-fulcro-thing ...))})\n       ;; CORRECT:\n       (some-react-thing {:child (fn [] (with-parent-context this (ui-fulcro-thing ...)))})\n     ```\n     \"\n     [outer-parent & body]\n     (if-not (:ns &env)\n       `(do ~@body)\n       `(let [parent# ~outer-parent\n              app#    (or *app* (any->app parent#))\n              d#      (or *depth* (inc (depth parent#)))\n              s#      (shared app#)\n              p#      (or *parent* parent#)]\n          (binding [*app*    app#\n                    *depth*  d#\n                    *shared* s#\n                    *parent* p#]\n            ~@body)))))\n\n(defn ptransact!\n  \"\n  DEPRECATED: Generally use `result-action` in mutations to chain sequences instead. This call is equivalent\n  to `transact!` with an `:optimistic? false` option.\n\n  Like `transact!`, but ensures each call completes (in a full-stack, pessimistic manner) before the next call starts\n  in any way. Note that two calls of this function have no guaranteed relationship to each other. They could end up\n  intermingled at runtime. The only guarantee is that for *a single call* to `ptransact!`, the calls in the given tx will run\n  pessimistically (one at a time) in the order given. Follow-on reads in the given transaction will be repeated after each remote\n  interaction.\n\n  `component-or-app` a mounted component or the app\n  `tx` the tx to run\n  `ref` the ident (ref context) in which to run the transaction (including all deferrals)\"\n  ([component-or-app tx]\n   (transact! component-or-app tx {:optimistic? false}))\n  ([component-or-app ref tx]\n   (transact! component-or-app tx {:optimistic? false\n                                   :ref         ref})))\n\n(defn compressible-transact!\n  \"Identical to `transact!` with `:compressible? true` option. This means that if more than one\n  adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\n  is useful for things like form input fields, where storing every keystoke in history is undesirable. This\n  also compress the transactions in Fulcro Inspect.\n\n  NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\n  automatic network error recovery handling.\"\n  ([app-ish tx]\n   (transact! app-ish tx {:compressible? true}))\n  ([app-ish ref tx]\n   (transact! app-ish tx {:compressible? true\n                          :ref           ref})))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; DEFSC MACRO SUPPORT. Most of this could be in a diff ns, but then hot code reload while working on the macro\n;; does not work right.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cljs?\n     \"A CLJ macro helper. `env` is the macro's `&env` value. Returns true when expanding a macro while compiling CLJS.\"\n     [env]\n     (boolean (:ns env))))\n\n#?(:clj\n   (defn- is-link?\n     \"Returns true if the given query element is a link query like [:x '_].\"\n     [query-element] (and (vector? query-element)\n                       (keyword? (first query-element))\n                       ; need the double-quote because when in a macro we'll get the literal quote.\n                       (#{''_ '_} (second query-element)))))\n\n#?(:clj\n   (defn -legal-keys\n     \"PRIVATE. Find the legal keys in a query. NOTE: This is at compile time, so the get-query calls are still embedded (thus cannot\n     use the AST)\"\n     [query]\n     (letfn [(keeper [ele]\n               (cond\n                 (list? ele) (recur (first ele))\n                 (keyword? ele) ele\n                 (is-link? ele) (first ele)\n                 (and (map? ele) (keyword? (ffirst ele))) (ffirst ele)\n                 (and (map? ele) (is-link? (ffirst ele))) (first (ffirst ele))\n                 :else nil))]\n       (set (keep keeper query)))))\n\n#?(:clj\n   (defn- children-by-prop\n     \"Part of Defsc macro implementation. Calculates a map from join key to class (symbol).\"\n     [query]\n     (into {}\n       (keep #(if (and (map? %) (or (is-link? (ffirst %)) (keyword? (ffirst %))))\n                (let [k   (if (vector? (ffirst %))\n                            (first (ffirst %))\n                            (ffirst %))\n                      cls (-> % first second second)]\n                  [k cls])\n                nil) query))))\n\n#?(:clj\n   (defn- replace-and-validate-fn\n     \"Replace the first sym in a list (the function name) with the given symbol.\n\n     env - the macro &env\n     sym - The symbol that the lambda should have\n     external-args - A sequence of arguments that the user should not include, but that you want to be inserted in the external-args by this function.\n     user-arity - The number of external-args the user should supply (resulting user-arity is (count external-args) + user-arity).\n     fn-form - The form to rewrite\n     sym - The symbol to report in the error message (in case the rewrite uses a different target that the user knows).\"\n     ([env sym external-args user-arity fn-form] (replace-and-validate-fn env sym external-args user-arity fn-form sym))\n     ([env sym external-args user-arity fn-form user-known-sym]\n      (when-not (<= user-arity (count (second fn-form)))\n        (throw (ana/error (merge env (meta fn-form)) (str \"Invalid arity for \" user-known-sym \". Expected \" user-arity \" or more.\"))))\n      (let [user-args    (second fn-form)\n            updated-args (into (vec (or external-args [])) user-args)\n            body-forms   (drop 2 fn-form)]\n        (->> body-forms\n          (cons updated-args)\n          (cons sym)\n          (cons 'fn))))))\n\n#?(:clj\n   (defn- build-query-forms\n     \"Validate that the property destructuring and query make sense with each other.\"\n     [env class thissym propargs {:keys [template method]}]\n     (cond\n       template\n       (do\n         (assert (or (symbol? propargs) (map? propargs)) \"Property args must be a symbol or destructuring expression.\")\n         (let [to-keyword            (fn [s] (cond\n                                               (nil? s) nil\n                                               (keyword? s) s\n                                               :otherwise (let [nspc (namespace s)\n                                                                nm   (name s)]\n                                                            (keyword nspc nm))))\n               destructured-keywords (when (map? propargs) (util/destructured-keys propargs))\n               queried-keywords      (-legal-keys template)\n               has-wildcard?         (some #{'*} template)\n               to-sym                (fn [k] (symbol (namespace k) (name k)))\n               illegal-syms          (mapv to-sym (set/difference destructured-keywords queried-keywords))\n               component-query       #(and (list? %) (= \"get-query\" (name (first %))) %)\n               err-env               (merge env (meta template))]\n           (when-let [child-query (some component-query template)]\n             (throw (ana/error err-env (str \"defsc \" class \": `get-query` calls in :query can only be inside a join value, i.e. `{:some/key \" child-query \"}`\"))))\n           (when (and (not has-wildcard?) (seq illegal-syms))\n             (throw (ana/error err-env (str \"defsc \" class \": \" illegal-syms \" was destructured in props, but does not appear in the :query!\"))))\n           `(~'fn ~'query* [~thissym] ~template)))\n       method\n       (replace-and-validate-fn env 'query* [thissym] 0 method))))\n\n#?(:clj\n   (defn- build-ident\n     \"Builds the ident form. If ident is a vector, then it generates the function and validates that the ID is\n     in the query. Otherwise, if ident is of the form (ident [this props] ...) it simply generates the correct\n     entry in defsc without error checking.\"\n     [env thissym propsarg {:keys [method template keyword]} is-legal-key?]\n     (cond\n       keyword (if (is-legal-key? keyword)\n                 `(~'fn ~'ident* [~'_ ~'props] [~keyword (~keyword ~'props)])\n                 (throw (ana/error (merge env (meta template)) (str \"The table/id \" keyword \" of :ident does not appear in your :query\"))))\n       method (replace-and-validate-fn env 'ident* [thissym propsarg] 0 method)\n       template (let [table   (first template)\n                      id-prop (or (second template) :db/id)]\n                  (cond\n                    (nil? table) (throw (ana/error (merge env (meta template)) \"TABLE part of ident template was nil\" {}))\n                    (not (is-legal-key? id-prop)) (throw (ana/error (merge env (meta template)) (str \"The ID property \" id-prop \" of :ident does not appear in your :query\")))\n                    :otherwise `(~'fn ~'ident* [~'this ~'props] [~table (~id-prop ~'props)]))))))\n\n#?(:clj\n   (defn- build-render [classsym thissym propsym compsym extended-args-sym body]\n     (let [computed-bindings (when compsym `[~compsym (com.fulcrologic.fulcro.components/get-computed ~thissym)])\n           extended-bindings (when extended-args-sym `[~extended-args-sym (com.fulcrologic.fulcro.components/get-extra-props ~thissym)])\n           render-fn         (symbol (str \"render-\" (name classsym)))]\n       `(~'fn ~render-fn [~thissym]\n          (com.fulcrologic.fulcro.components/wrapped-render ~thissym\n            (fn []\n              (let [~propsym (com.fulcrologic.fulcro.components/props ~thissym)\n                    ~@computed-bindings\n                    ~@extended-bindings]\n                ~@body)))))))\n\n#?(:clj\n   (defn- build-hooks-render [classsym thissym propsym compsym extended-args-sym body]\n     (let [computed-bindings (when compsym `[~compsym (com.fulcrologic.fulcro.components/get-computed ~thissym)])\n           extended-bindings (when extended-args-sym `[~extended-args-sym (com.fulcrologic.fulcro.components/get-extra-props ~thissym)])\n           render-fn         (symbol (str \"render-\" (name classsym)))]\n       `(~'fn ~render-fn [~thissym ~propsym]\n          (com.fulcrologic.fulcro.components/wrapped-render ~thissym\n            (fn []\n              (binding [*app*    (or *app* (isoget-in ~thissym [\"props\" \"fulcro$app\"]))\n                        *depth*  (inc (or *depth* (isoget-in ~thissym [\"props\" \"fulcro$depth\"])))\n                        *shared* (shared *app*)\n                        *parent* ~thissym]\n                (let [~@computed-bindings\n                      ~@extended-bindings]\n                  ~@body))))))))\n\n#?(:clj\n   (defn- build-and-validate-initial-state-map [env sym initial-state legal-keys children-by-query-key]\n     (let [env           (merge env (meta initial-state))\n           join-keys     (set (keys children-by-query-key))\n           init-keys     (set (keys initial-state))\n           illegal-keys  (if (set? legal-keys) (set/difference init-keys legal-keys) #{})\n           is-child?     (fn [k] (contains? join-keys k))\n           param-expr    (fn [v]\n                           (if-let [kw (and (keyword? v) (= \"param\" (namespace v))\n                                         (keyword (name v)))]\n                             `(~kw ~'params)\n                             v))\n           parameterized (fn [init-map] (into {} (map (fn [[k v]] (if-let [expr (param-expr v)] [k expr] [k v])) init-map)))\n           child-state   (fn [k]\n                           (let [state-params    (get initial-state k)\n                                 to-one?         (map? state-params)\n                                 to-many?        (and (vector? state-params) (every? map? state-params))\n                                 code?           (list? state-params)\n                                 from-parameter? (and (keyword? state-params) (= \"param\" (namespace state-params)))\n                                 child-class     (get children-by-query-key k)]\n                             (when code?\n                               (throw (ana/error env (str \"defsc \" sym \": Illegal parameters to :initial-state \" state-params \". Use a lambda if you want to write code for initial state. Template mode for initial state requires simple maps (or vectors of maps) as parameters to children. See Developer's Guide.\"))))\n                             (cond\n                               (not (or from-parameter? to-many? to-one?)) (throw (ana/error env (str \"Initial value for a child (\" k \") must be a map or vector of maps!\")))\n                               to-one? `(com.fulcrologic.fulcro.components/get-initial-state ~child-class ~(parameterized state-params))\n                               to-many? (mapv (fn [params]\n                                                `(com.fulcrologic.fulcro.components/get-initial-state ~child-class ~(parameterized params)))\n                                          state-params)\n                               from-parameter? `(com.fulcrologic.fulcro.components/get-initial-state ~child-class ~(param-expr state-params))\n                               :otherwise nil)))\n           kv-pairs      (map (fn [k]\n                                [k (if (is-child? k)\n                                     (child-state k)\n                                     (param-expr (get initial-state k)))]) init-keys)\n           state-map     (into {} kv-pairs)]\n       (when (seq illegal-keys)\n         (throw (ana/error env (str \"Initial state includes keys \" illegal-keys \", but they are not in your query.\"))))\n       `(~'fn ~'build-initial-state* [~'params] (com.fulcrologic.fulcro.components/make-state-map ~initial-state ~children-by-query-key ~'params)))))\n\n#?(:clj\n   (defn- build-raw-initial-state\n     \"Given an initial state form that is a list (function-form), simple copy it into the form needed by defsc.\"\n     [env method]\n     (replace-and-validate-fn env 'build-raw-initial-state* [] 1 method)))\n\n#?(:clj\n   (defn- build-initial-state [env sym {:keys [template method]} legal-keys query-template-or-method]\n     (when (and template (contains? query-template-or-method :method))\n       (throw (ana/error (merge env (meta template)) (str \"When query is a method, initial state MUST be as well.\"))))\n     (cond\n       method (build-raw-initial-state env method)\n       template (let [query    (:template query-template-or-method)\n                      children (or (children-by-prop query) {})]\n                  (build-and-validate-initial-state-map env sym template legal-keys children)))))\n\n#?(:clj\n   (s/def ::ident (s/or :template (s/and vector? #(= 2 (count %))) :method list? :keyword keyword?)))\n#?(:clj\n   ;; NOTE: We cannot reuse ::eql/query because we have the raw input *form* inside a macro,\n   ;; not the actual *data* that will be there at runtime (i.e. it may contain raw fn calls etc.)\n   (s/def ::query (s/or :template vector? :method list?)))\n#?(:clj\n   (s/def ::initial-state (s/or :template map? :method list?)))\n#?(:clj\n   (s/def ::options (s/keys :opt-un [::query\n                                     ::ident\n                                     ::initial-state])))\n\n#?(:clj\n   (s/def ::args (s/cat\n                   :sym symbol?\n                   :doc (s/? string?)\n                   :arglist (s/and vector? #(<= 2 (count %) 5))\n                   :options (s/? map?)\n                   :body (s/* any?))))\n\n#?(:clj\n   (defn defsc*\n     [env args]\n     (when-not (s/valid? ::args args)\n       (throw (ana/error env (str \"Invalid arguments. \" (-> (s/explain-data ::args args)\n                                                          ::s/problems\n                                                          first\n                                                          :path) \" is invalid.\"))))\n     (let [{:keys [sym doc arglist options body]} (s/conform ::args args)\n           [thissym propsym computedsym extra-args] arglist\n           _                                (when (and options (not (s/valid? ::options options)))\n                                              (let [path    (-> (s/explain-data ::options options) ::s/problems first :path)\n                                                    message (cond\n                                                              (= path [:query :template]) \"The query template only supports vectors as queries. Unions or expression require the lambda form.\"\n                                                              (= :ident (first path)) \"The ident must be a keyword, 2-vector, or lambda of no arguments.\"\n                                                              :else \"Invalid component options. Please check to make\\nsure your query, ident, and initial state are correct.\")]\n                                                (throw (ana/error env message))))\n           {:keys [ident query initial-state]} (s/conform ::options options)\n           body                             (or body ['nil])\n           ident-template-or-method         (into {} [ident]) ;clojure spec returns a map entry as a vector\n           initial-state-template-or-method (into {} [initial-state])\n           query-template-or-method         (into {} [query])\n           validate-query?                  (and (:template query-template-or-method) (not (some #{'*} (:template query-template-or-method))))\n           legal-key-checker                (if validate-query?\n                                              (or (-legal-keys (:template query-template-or-method)) #{})\n                                              (complement #{}))\n           ident-form                       (build-ident env thissym propsym ident-template-or-method legal-key-checker)\n           state-form                       (build-initial-state env sym initial-state-template-or-method legal-key-checker query-template-or-method)\n           query-form                       (build-query-forms env sym thissym propsym query-template-or-method)\n           hooks?                           (:use-hooks? options)\n           render-form                      (if hooks?\n                                              (build-hooks-render sym thissym propsym computedsym extra-args body)\n                                              (build-render sym thissym propsym computedsym extra-args body))\n           nspc                             (if (cljs? env) (-> env :ns :name str) (name (ns-name *ns*)))\n           fqkw                             (keyword (str nspc) (name sym))\n           options-map                      (cond-> options\n                                              state-form (assoc :initial-state state-form)\n                                              ident-form (assoc :ident ident-form)\n                                              query-form (assoc :query query-form)\n                                              hooks? (assoc :componentName fqkw)\n                                              render-form (assoc :render render-form))]\n       (cond\n         hooks?\n         `(do\n            (defonce ~sym\n              (fn [js-props#]\n                (let [render# (:render (component-options ~sym))\n                      [this# props#] (use-fulcro js-props# ~sym)]\n                  (render# this# props#))))\n            (add-hook-options! ~sym ~options-map))\n\n         (cljs? env)\n         `(do\n            (declare ~sym)\n            (let [options# ~options-map]\n              (defonce ~(vary-meta sym assoc :doc doc :jsdoc [\"@constructor\"])\n                (fn [props#]\n                  (cljs.core/this-as this#\n                    (if-let [init-state# (get options# :initLocalState)]\n                      (set! (.-state this#) (cljs.core/js-obj \"fulcro$state\" (init-state# this# (goog.object/get props# \"fulcro$value\"))))\n                      (set! (.-state this#) (cljs.core/js-obj \"fulcro$state\" {})))\n                    nil)))\n              (com.fulcrologic.fulcro.components/configure-component! ~sym ~fqkw options#)))\n\n         :else\n         `(do\n            (declare ~sym)\n            (let [options# ~options-map]\n              (def ~(vary-meta sym assoc :doc doc :once true)\n                (com.fulcrologic.fulcro.components/configure-component! ~(str sym) ~fqkw options#))))))))\n\n#?(:clj\n   (defmacro ^{:doc      \"Define a stateful component. This macro emits a React UI class with a query,\n   optional ident (if :ident is specified in options), optional initial state, optional css, lifecycle methods,\n   and a render method. It can also cause the class to implement additional protocols that you specify. Destructuring is\n   supported in the argument list.\n\n   The template (data-only) versions do not have any arguments in scope\n   The lambda versions have arguments in scope that make sense for those lambdas, as listed below:\n\n   ```\n   (defsc Component [this {:keys [db/id x] :as props} {:keys [onSelect] :as computed} extended-args]\n     {\n      ;; stateful component options\n      ;; query template is literal. Use the lambda if you have ident-joins or unions.\n      :query [:db/id :x] ; OR (fn [] [:db/id :x]) ; this in scope\n      ;; ident template is table name and ID property name\n      :ident [:table/by-id :id] ; OR (fn [] [:table/by-id id]) ; this and props in scope\n      ;; initial-state template is magic..see dev guide. Lambda version is normal.\n      :initial-state {:x :param/x} ; OR (fn [params] {:x (:x params)}) ; nothing is in scope\n      ;; pre-merge, use a lamba to modify new merged data with component needs\n      :pre-merge (fn [{:keys [data-tree current-normalized state-map query]}] (merge {:ui/default-value :start} data-tree))\n\n      ; React Lifecycle Methods\n      :initLocalState            (fn [this props] ...) ; CAN BE used to call things as you might in a constructor. Return value is initial state.\n      :shouldComponentUpdate     (fn [this next-props next-state] ...)\n\n      :componentDidUpdate        (fn [this prev-props prev-state snapshot] ...) ; snapshot is optional, and is 16+. Is context for 15\n      :componentDidMount         (fn [this] ...)\n      :componentWillUnmount      (fn [this] ...)\n\n      ;; DEPRECATED IN REACT 16 (to be removed in 17):\n      :componentWillReceiveProps        (fn [this next-props] ...)\n      :componentWillUpdate              (fn [this next-props next-state] ...)\n      :componentWillMount               (fn [this] ...)\n\n      ;; Replacements for deprecated methods in React 16.3+\n      :UNSAFE_componentWillReceiveProps (fn [this next-props] ...)\n      :UNSAFE_componentWillUpdate       (fn [this next-props next-state] ...)\n      :UNSAFE_componentWillMount        (fn [this] ...)\n\n      ;; ADDED for React 16:\n      :componentDidCatch         (fn [this error info] ...)\n      :getSnapshotBeforeUpdate   (fn [this prevProps prevState] ...)\n\n      ;; static.\n      :getDerivedStateFromProps  (fn [props state] ...)\n\n      ;; ADDED for React 16.6:\n      ;; NOTE: The state returned from this function can either be:\n      ;; a raw js map, where Fulcro's state is in a sub-key: `#js {\\\"fulcro$state\\\" {:fulcro :state}}`.\n      ;; or a clj map. In either case this function will *overwrite* Fulcro's component-local state, which is\n      ;; slighly different behavior than raw React (we have no `this`, so we cannot read Fulcro's state to merge it).\n      :getDerivedStateFromError  (fn [error] ...)\n\n      NOTE: shouldComponentUpdate should generally not be overridden other than to force it false so\n      that other libraries can control the sub-dom. If you do want to implement it, then old props can\n      be obtained from (prim/props this), and old state via (gobj/get (. this -state) \\\"fulcro$state\\\").\n\n      ; BODY forms. May be omitted IFF there is an options map, in order to generate a component that is used only for queries/normalization.\n      (dom/div #js {:onClick onSelect} x))\n   ```\n\n   NOTE: The options map is \\\"open\\\". That is: you can add whatever extra stuff you want to in order\n   to co-locate data for component-related concerns. This is exactly what component-local css, the\n   dynamic router, and form-state do.  The data that you add is available from `comp/component-options`\n   on the component class and instances (i.e. `this`).\n\n   See the Developer's Guide at book.fulcrologic.com for more details.\n   \"\n               :arglists '([this dbprops computedprops]\n                           [this dbprops computedprops extended-args])}\n     defsc\n     [& args]\n     (try\n       (defsc* &env args)\n       (catch Exception e\n         (if (contains? (ex-data e) :tag)\n           (throw e)\n           (throw (ana/error &env \"Unexpected internal error while processing defsc. Please check your syntax.\" e)))))))\n\n(defn external-config\n  [app-ish k]\n  (some-> app-ish (any->app) (get-in [:com.fulcrologic.fulcro.application/config :external-config k])))\n\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.components","js/com.fulcrologic.fulcro.components.component-registry","com.fulcrologic.fulcro.components/component-registry","cljs.core.atom","com.fulcrologic.fulcro.components/*query-state*","com.fulcrologic.fulcro.components/*app*","com.fulcrologic.fulcro.components/*parent*","com.fulcrologic.fulcro.components/*depth*","com.fulcrologic.fulcro.components/*shared*","com.fulcrologic.fulcro.components/*blindly-render*","var_args","G__64729","com.fulcrologic.fulcro.components/use-effect","js/Error","f","js/React.useEffect","deps","cljs.core/clj->js","com.fulcrologic.fulcro.components/use-state","initial-value","cljs.core.js__GT_clj","js/React.useState","G__64739","com.fulcrologic.fulcro.components/isoget-in","obj","kvs","com.fulcrologic.fulcro.components.isoget_in","default","ks","cljs.core.mapv","k","G__64748","cljs.core/name","or__4126__auto__","cljs.core.apply","goog.object/getValueByKeys","G__64756","com.fulcrologic.fulcro.components/isoget","com.fulcrologic.fulcro.components.isoget","goog.object/get","G__64763","com.fulcrologic.fulcro.components/register-component!","component-class","cljs.core.swap_BANG_","cljs.core/assoc","com.fulcrologic.fulcro.components/force-children","x","G__64767","cljs.core/seq?","cljs.core.into","cljs.core.map","com.fulcrologic.fulcro.components/newer-props","props-a","props-b","com.fulcrologic.fulcro.algorithms.denormalize/denormalization-time","com.fulcrologic.fulcro.components/component-instance?","com.fulcrologic.fulcro.components/component?","com.fulcrologic.fulcro.components/component-class?","cljs.core/boolean","goog.object/containsKey","cljs.spec.alpha/def-impl","com.fulcrologic.fulcro.components/component-name","class","com.fulcrologic.fulcro.components/class->registry-key","com.fulcrologic.fulcro.components/registry-key->class","classname","cljs.core/Keyword","cljs.core/deref","cljs.core.get","cljs.core/Symbol","cljs.core.keyword","cljs.core/namespace","com.fulcrologic.fulcro.components/computed","props","computed-map","cljs.core/vector?","G__64788","cljs.core/empty?","cljs.core.vary_meta","G__64790","cljs.core.assoc","G__64795","com.fulcrologic.fulcro.components/get-computed","com.fulcrologic.fulcro.components.get_computed","k-or-ks","G__64797","com.fulcrologic.fulcro.components/props","G__64798","cljs.core/PersistentVector","cljs.core/sequential?","cljs.core/meta","cljs.core.get_in","com.fulcrologic.fulcro.components/get-extra-props","this","component","props-from-parent","computed-from-parent","props-from-updates","com.fulcrologic.fulcro.components/children","cs","cljs.core/coll?","cljs.core/array?","com.fulcrologic.fulcro.components/react-type","cljs.core/type","com.fulcrologic.fulcro.components/get-class","instance","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro.components/component-options","seq64815","G__64816","cljs.core/first","cljs.core/next","self__4723__auto__","instance-or-class","c","options","cljs.core/seq","cljs.core/vec","com.fulcrologic.fulcro.components/has-feature?","option-key","cljs.core/contains?","com.fulcrologic.fulcro.components/has-initial-app-state?","com.fulcrologic.fulcro.components/has-ident?","com.fulcrologic.fulcro.components/has-query?","com.fulcrologic.fulcro.components/has-pre-merge?","com.fulcrologic.fulcro.components/ident","fexpr__64830","com.fulcrologic.fulcro.components.component_options","com.fulcrologic.fulcro.components/query","fexpr__64833","com.fulcrologic.fulcro.components/initial-state","clz","params","fexpr__64834","com.fulcrologic.fulcro.components/pre-merge","data","fexpr__64837","com.fulcrologic.fulcro.components/depth","com.fulcrologic.fulcro.components/get-raw-react-prop","com.fulcrologic.fulcro.components/any->app","cljs.core/map?","fulcro-app?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IDeref","G__64846","com.fulcrologic.fulcro.components/raw->newest-props","raw-props","raw-state","next-props","opt-props","G__64854","com.fulcrologic.fulcro.components/shared","comp-or-app","com.fulcrologic.fulcro.components.shared","shared","G__64857","G__64858","G__64861","handler","com$fulcrologic$fulcro$components$wrap_props_state_handler","check-for-fresh-props-in-state?","state","raw-next-props","raw-next-state","current-props","next-state","current-state","props-changed?","cljs.core.not_EQ_","state-changed?","next-children","children-changed?","raw-prev-props","raw-prev-state","snapshot","map__64894","cljs.core/hash-map","ident","componentDidUpdate","prev-state","prev-props","old-ident","next-ident","G__64896","G__64897","app","drop-component!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","index-component!","goog.object/set","map__64892","componentDidMount","map__64906","componentWillUnmount","args","com$fulcrologic$fulcro$components$wrap_props_handler","render","temp__5733__auto__","*app*-orig-val__64898","*depth*-orig-val__64899","*shared*-orig-val__64900","*parent*-orig-val__64901","*app*-temp-val__64902","*depth*-temp-val__64903","*shared*-temp-val__64904","*parent*-temp-val__64905","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.components/configure-component!","cls","fqkw","map__64908","getDerivedStateFromProps","shouldComponentUpdate","getSnapshotBeforeUpdate","initLocalState","componentDidCatch","getDerivedStateFromError","componentWillUpdate","componentWillMount","componentWillReceiveProps","UNSAFE_componentWillMount","UNSAFE_componentWillUpdate","UNSAFE_componentWillReceiveProps","name","clojure.string.join","js-instance-props","component-did-mount","component-will-unmount","component-did-update","wrap-props-state-handler","should-component-update?","G__64910","wrap-base-render","wrap-this","wrap-props-handler","statics","G__64911","_","writer","cljs.core/-write","error","v","static-wrap-props-state-handler","goog.object/extend","js/React.Component.prototype","com.fulcrologic.fulcro.components/add-hook-options!","render-fn","component-options","faux-classname","cljs.core.ex_info","com.fulcrologic.fulcro.components/use-fulcro","js-props","faux-class","map__64912","tunnelled-props-state","js-set-tunnelled-props!","faux-component-state","depth","set-tunnelled-props!","updater","new-props","faux-component","children","current-ident","shared-props","G__64914","original-ident","cljs.core/second","com.fulcrologic.fulcro.components/mounted?","G__64916","com.fulcrologic.fulcro.components/set-state!","new-state","callback","cljs.core.merge","com.fulcrologic.fulcro.components.set_state_BANG_","G__64918","com.fulcrologic.fulcro.components/get-state","com.fulcrologic.fulcro.components.get_state","cst","update-fn","G__64923","com.fulcrologic.fulcro.components/update-state!","args-arr__4757__auto__","argseq__4758__auto__","seq64920","G__64921","G__64922","G__64925","com.fulcrologic.fulcro.components/get-initial-state","G__64926","cljs.core/with-meta","G__64927","com.fulcrologic.fulcro.components/computed-initial-state?","s","G__64929","G__64931","com.fulcrologic.fulcro.components/get-ident","m","js/goog.DEBUG","id","and__4115__auto__","edn-query-language.core/ident?","cljs.core._EQ_","com.fulcrologic.fulcro.components/tunnel-props!","com.fulcrologic.fulcro.components/is-factory?","class-or-factory","cljs.core/fn?","com.fulcrologic.fulcro.components/query-id","qualifier","temp__5735__auto__","com.fulcrologic.fulcro.components/denormalize-query","state-map","ID","get-stored-query","map__64933","query","component-key","G__64940","normalized-query","clojure.walk/prewalk","ele","q","com.fulcrologic.fulcro.components/get-query-id","com.fulcrologic.fulcro.components/get-query-by-id","queryid","G__64947","com.fulcrologic.fulcro.components/get-query","com.fulcrologic.fulcro.components.get_query","G__64949","*query-state*-orig-val__64950","*query-state*-temp-val__64951","com.fulcrologic.fulcro.components/make-state-map","initial-state","children-by-query-key","join-keys","cljs.core/set","cljs.core/keys","init-keys","is-child?","value-of","p__64952","vec__64953","cljs.core.nth","isk","isv","param-name","substitute","param-key","param-exists?","param-value","child-class","com.fulcrologic.fulcro.components.get_initial_state","cljs.core.keep","value-of*","com.fulcrologic.fulcro.components/wrapped-render","real-render","render-middleware","com.fulcrologic.fulcro.components/configure-hooks-component!","cls-atom","js-fn","vec__64958","*app*-orig-val__64961","*depth*-orig-val__64962","*shared*-orig-val__64963","*parent*-orig-val__64964","*app*-temp-val__64965","*depth*-temp-val__64966","*shared*-temp-val__64967","*parent*-temp-val__64968","cljs.core/reset!","com.fulcrologic.fulcro.components/create-element","js/React.createElement","G__64971","com.fulcrologic.fulcro.components/factory","p__64972","map__64973","com.fulcrologic.fulcro.components.factory","keyfn","opts","qid","key","ref","G__64975","props-middleware","G__64976","cljs.core/not","G__64980","com.fulcrologic.fulcro.components/computed-factory","com.fulcrologic.fulcro.components.computed_factory","real-factory","computed-props","G__64984","com.fulcrologic.fulcro.components/*after-render*","G__64986","com.fulcrologic.fulcro.components/transact!","app-or-component","tx","tx!","G__64989","com.fulcrologic.fulcro.components.get_ident","app-or-comp","com.fulcrologic.fulcro.components.transact_BANG_","G__64993","com.fulcrologic.fulcro.components/transact!!","com.fulcrologic.fulcro.components.transact_BANG__BANG_","com.fulcrologic.fulcro.components/link-element","element","map__64995","com.fulcrologic.fulcro.components/normalize-query-elements","cljs.core.reduce","e64997","parameterized?","raw-element","com.fulcrologic.fulcro.algorithms.do-not-use/union?","union-alternates","cljs.core/vals","union-meta","normalized-union-alternates","union-query-id","union-component-key","com.fulcrologic.fulcro.algorithms.do_not_use.deep_merge","p__64998","vec__64999","subquery","com.fulcrologic.fulcro.components/normalize-query","com.fulcrologic.fulcro.algorithms.do-not-use/join?","com.fulcrologic.fulcro.algorithms.do-not-use/recursion?","com.fulcrologic.fulcro.algorithms.do-not-use/join-value","G__65002","G__65003","e","com.fulcrologic.fulcro.components/link-query","metadata","G__65004","G__65005","query'","cljs.core/dissoc","top-query","p__65006","map__65007","com.fulcrologic.fulcro.components/set-query*","G__65009","G__65010","setq*","cljs.core.update","G__65011","p__65012","map__65013","com.fulcrologic.fulcro.components/set-query!","state-atom","G__65015","G__65016","index-root!","schedule-render!","G__65017","G__65018","com.fulcrologic.fulcro.components/get-indexes","G__65019","com.fulcrologic.fulcro.components/ident->components","G__65020","com.fulcrologic.fulcro.components/ident->any","com.fulcrologic.fulcro.components/prop->classes","prop","G__65021","com.fulcrologic.fulcro.components/class->all","G__65022","com.fulcrologic.fulcro.components/class->any","com.fulcrologic.fulcro.components/component->state-map","G__65023","G__65025","com.fulcrologic.fulcro.components/wrap-update-extra-props","existing","new","com.fulcrologic.fulcro.components/fragment","seq65026","self__4724__auto__","vec__65027","cljs.core/rest","js/React.Fragment","G__65036","com.fulcrologic.fulcro.components/ptransact!","component-or-app","G__65038","com.fulcrologic.fulcro.components/compressible-transact!","app-ish","com.fulcrologic.fulcro.components/external-config","G__65052"]],"~:used-vars",["^L",["~$cljs.core/array?","~$com.fulcrologic.fulcro.components/query","~$cljs.core/keep","~$com.fulcrologic.fulcro.components/normalize-query","~$com.fulcrologic.fulcro.components/class->any","~$cljs.core/PROTOCOL_SENTINEL","~$com.fulcrologic.fulcro.components/initial-state","~$com.fulcrologic.fulcro.components/ident->any","~$com.fulcrologic.fulcro.components/is-factory?","~$com.fulcrologic.fulcro.components/computed","~$cljs.core/sequential?","~$com.fulcrologic.fulcro.algorithms.do-not-use/join?","~$cljs.core/vector?","~$com.fulcrologic.fulcro.components/get-class","~$com.fulcrologic.fulcro.components/compressible-transact!","~$cljs.core/=","~$com.fulcrologic.fulcro.components/external-config","~$com.fulcrologic.fulcro.components/component-class?","~$clojure.walk/prewalk","~$cljs.core/-write","~$taoensso.timbre/-log!","~$js/React.Fragment","~$edn-query-language.core/ident?","~$com.fulcrologic.fulcro.algorithms.do-not-use/recursion?","~$com.fulcrologic.fulcro.components/react-type","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/has-ident?","~$com.fulcrologic.fulcro.components/props","~$cljs.core/reduce","~$cljs.core/seq","~$com.fulcrologic.fulcro.components/denormalize-query","~$cljs.core/apply","~$com.fulcrologic.fulcro.components/set-query!","~$js/com.fulcrologic.fulcro","~$cljs.core/Keyword","~$cljs.spec.alpha/def-impl","~$com.fulcrologic.fulcro.components/use-fulcro","~$cljs.core/mapv","~$com.fulcrologic.fulcro.components/newer-props","~$com.fulcrologic.fulcro.components/*blindly-render*","~$cljs.core/Delay","~$cljs.core/atom","~$goog.object/containsKey","~$com.fulcrologic.fulcro.components/children","~$com.fulcrologic.fulcro.components/ptransact!","~$com.fulcrologic.fulcro.components/wrap-update-extra-props","~$com.fulcrologic.fulcro.components/wrapped-render","~$cljs.core/js->clj","~$com.fulcrologic.fulcro.components/set-state!","~$com.fulcrologic.fulcro.components/fragment","~$cljs.core/native-satisfies?","~$com.fulcrologic.fulcro.components/pre-merge","~$cljs.core/empty?","~$com.fulcrologic.fulcro.components/normalize-query-elements","~$js/React.useEffect","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$com.fulcrologic.fulcro.components/get-ident","~$com.fulcrologic.fulcro.components/component-name","~$taoensso.timbre/*config*","~$cljs.core/vary-meta","~$com.fulcrologic.fulcro.components/mounted?","~$com.fulcrologic.fulcro.algorithms.do-not-use/join-value","~$cljs.core/with-meta","~$js/com.fulcrologic.fulcro.components.component-registry","~$cljs.core/map","~$js/com.fulcrologic","~$cljs.core/fn?","~$com.fulcrologic.fulcro.algorithms.do-not-use/union?","~$com.fulcrologic.fulcro.components/ident->components","~$com.fulcrologic.fulcro.components/add-hook-options!","~$com.fulcrologic.fulcro.components/update-state!","~$com.fulcrologic.fulcro.components/computed-initial-state?","~$cljs.core/get-in","~$com.fulcrologic.fulcro.components/get-raw-react-prop","~$com.fulcrologic.fulcro.components/create-element","~$com.fulcrologic.fulcro.components/isoget-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.components/*parent*","~$com.fulcrologic.fulcro.components/has-query?","~$com.fulcrologic.fulcro.components/shared","~$cljs.core/get","~$goog.object/set","~$com.fulcrologic.fulcro.components/query-id","~$com.fulcrologic.fulcro.components/*app*","~$com.fulcrologic.fulcro.components/get-initial-state","~$com.fulcrologic.fulcro.components/component?","~$com.fulcrologic.fulcro.components/set-query*","~$js/com","~$com.fulcrologic.fulcro.components/*shared*","~$cljs.core/clj->js","~$com.fulcrologic.fulcro.components/get-state","~$com.fulcrologic.fulcro.components/has-pre-merge?","~$com.fulcrologic.fulcro.components/use-effect","~$com.fulcrologic.fulcro.components/transact!","~$js/React.useState","~$com.fulcrologic.fulcro.components/any->app","~$com.fulcrologic.fulcro.components/get-extra-props","~$cljs.core/ex-info","~$cljs.core/meta","~$com.fulcrologic.fulcro.components/tunnel-props!","~$com.fulcrologic.fulcro.components/configure-component!","~$com.fulcrologic.fulcro.components/*depth*","~$cljs.core/second","~$js/com.fulcrologic.fulcro.components","~$com.fulcrologic.fulcro.components/link-query","~$com.fulcrologic.fulcro.algorithms.do-not-use/deep-merge","~$js/goog.DEBUG","~$com.fulcrologic.fulcro.components/component-instance?","~$com.fulcrologic.fulcro.components/get-computed","~$com.fulcrologic.fulcro.components/prop->classes","~$cljs.core/vec","~$com.fulcrologic.fulcro.components/link-element","~$com.fulcrologic.fulcro.components/get-query","~$cljs.core/IDeref","~$com.fulcrologic.fulcro.components/registry-key->class","~$com.fulcrologic.fulcro.components/factory","~$com.fulcrologic.fulcro.components/force-children","~$cljs.core/not","~$com.fulcrologic.fulcro.components/make-state-map","~$com.fulcrologic.fulcro.components/get-query-id","~$js/React.createElement","~$com.fulcrologic.fulcro.components/isoget","~$com.fulcrologic.fulcro.components/class->all","~$cljs.core/assoc","~$com.fulcrologic.fulcro.components/raw->newest-props","~$com.fulcrologic.fulcro.components/configure-hooks-component!","~$com.fulcrologic.fulcro.components/computed-factory","~$cljs.core/Symbol","~$com.fulcrologic.fulcro.components/use-state","~$goog.object/extend","~$cljs.core/coll?","~$com.fulcrologic.fulcro.components/register-component!","~$js/React.Component.prototype","~$com.fulcrologic.fulcro.components/transact!!","~$com.fulcrologic.fulcro.components/ident","~$com.fulcrologic.fulcro.components/component-options","~$com.fulcrologic.fulcro.components/class->registry-key","~$cljs.core/first","~$cljs.core/seq?","~$com.fulcrologic.fulcro.components/get-indexes","~$com.fulcrologic.fulcro.components/depth","~$com.fulcrologic.fulcro.components/*query-state*","~$com.fulcrologic.fulcro.components/has-feature?","~$cljs.core/merge","~$com.fulcrologic.fulcro.components/has-initial-app-state?","~$js/Error","~$cljs.core/boolean","~$com.fulcrologic.fulcro.components/component->state-map","~$cljs.core/type","~$com.fulcrologic.fulcro.components/*after-render*","~$com.fulcrologic.fulcro.components/component-registry","~$goog.object/get","~$com.fulcrologic.fulcro.components/get-query-by-id"]]],"~:cache-keys",["~#cmap",[["^1T","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^1?","~$goog.dom.HtmlElement"]]],["^1T","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.labs.userAgent.util","~$goog.string"]]],["^1T","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<"]]],["^1T","goog/crypt/crypt.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.array","~$goog.asserts"]]],["^1T","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.Promise","~$goog.events.EventTarget"]]],["^1T","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^19"]]],["^1T","cljs/spec/gen/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","~$goog.Uri"]]],["^1T","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1D","^5T"]]],["^1T","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5V"]]],["^1T","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5T"]]],["^1T","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1T","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5S","^1>","~$goog.string.internal"]]],["^1T","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^60"]]],["^1T","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1T","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^19","^1D","^17","^1>","~$goog.crypt","~$goog.crypt.base64","^?"]]],["^1T","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","~$expound.paths","^?"]]],["^1T","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5S","~$goog.reflect","^5T"]]],["^1T","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1T","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1T","taoensso/encore.cljs"],["30c096c80ac45227d869087a80755500fca98346","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1D","^16","~$cljs.reader","~$cljs.tools.reader.edn","^1>","^5T","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1T","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","~$goog.async.FreeList"]]],["^1T","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^5Z","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1T","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5["]]],["^1T","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^5T","^6I"]]],["^1T","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.structs.Heap"]]],["^1T","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.Timer","^5U","^5V","^6R","^5X","~$goog.json.hybrid","~$goog.log","^6O","^6N","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^1>","^5T","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^5["]]],["^1T","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<"]]],["^1T","cljs/pprint.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1D","^5T","^6I"]]],["^1T","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^6W","^6X","^6Y","^6V","^5U","^5T","^6I"]]],["^1T","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","~$expound.problems","^?","^1D","^16","^1F","~$expound.printer","~$expound.util","~$expound.ansi","^C"]]],["^1T","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1T","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.Disposable","^5V","^6J","~$goog.events.Event","^6T","^6U","^1>"]]],["^1T","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1D","^19","^?","~$expound.alpha"]]],["^1T","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.disposable.IDisposable"]]],["^1T","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1D"]]],["^1T","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^67","node_modules/react/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^68","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1T","shadow/js.js"],["bc0862a18183110802758387126e17faaedc1895","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V"]]],["^1T","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^75","~$goog.structs.Collection","^76"]]],"~:SHADOW-TIMESTAMP",[1598567487000,1598567487000,1592012038000],["^67","node_modules/react/cjs/react.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","ea9e9a66370bbe35b404f4de02d009d42a753e6d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^68","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1T","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","^6@"]]],["^1T","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.events.ListenableKey"]]],["^1T","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","~$goog.html.trustedtypes","^63","^64","^65","^66"]]],["^1T","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","~$goog.events.Listener","^1>"]]],["^1T","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","~$taoensso.truss.impl"]]],["^1T","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^?"]]],["^1T","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5V","~$goog.html.SafeUrl","^65","^66","^60"]]],["^1T","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^7L","^62","~$goog.html.uncheckedconversions","^65","^60"]]],["^1T","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^?","^7:"]]],["^1T","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^16"]]],["^1T","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<"]]],["^1T","goog/useragent/product.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^6=","^6?","^5["]]],["^1T","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1T","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^6K","~$goog.structs.PriorityPool"]]],["^1T","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5V","~$goog.dom.TagName","~$goog.dom.tags","^7P","^7Q","~$goog.html.SafeStyleSheet","^7L","^62","^7I","^63","^64","^6=","^1>","^65","^66","^60"]]],["^1T","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1>"]]],["^1T","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U"]]],["^1T","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5S","^5T"]]],["^1T","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1D","~$taoensso.encore"]]],["^1T","cljs/reader.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1>","^6Z","^6G","^6I"]]],["^1T","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5V","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^7V","~$goog.dom.safe","^7O","^7R","~$goog.math.Coordinate","~$goog.math.Size","^1>","^5T","~$goog.string.Unicode","^5["]]],["^1T","com/fulcrologic/fulcro/components.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1>","^1@","^17","^?","^19","^1F","^1D","^1B","^1;","^14","^J","^16"]]],["^1T","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.debug.Error","^7["]]],["^1T","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","~$goog.debug.LogRecord"]]],["^1T","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5V","^5T","^75","^76","^77","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1T","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^67","node_modules/object-assign/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","519ffd5a4c91b67302cc9947b794966d629860cd","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^68"]]],["^1T","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.Thenable","^5V","^6Q","~$goog.async.run","^6E","^84","~$goog.promise.Resolver"]]],["^1T","cljs/spec/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1>","^1F","^C","^1D"]]],["^1T","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",[]]],["^1T","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","~$goog.json"]]],["^1T","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^1>"]]],["^1T","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^6W","^1D","~$cljs.tools.reader.impl.inspect"]]],["^1T","cljsjs/react.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","~$module$node_modules$react$index"]]],["^1T","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^5T","^6I"]]],["^1T","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^7>","~$goog.structs.Queue","~$goog.structs.Set"]]],["^67","node_modules/react/cjs/react.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","32f2924b22daf411bb2b61bc45a3540aca73e0b2","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^68","^7F"]]],["^1T","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^1>","~$goog.structs.Node"]]],["^1T","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V"]]],["^1T","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^80","^7R","^65","^60"]]],["^1T","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^60"]]],["^1T","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1D","^?","^G","^16","^7:","^7;","^6<","^1F","^6H","^5T"]]],["^1T","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","~$goog.debug.errorcontext","^5["]]],["^1T","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.math"]]],["^1T","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^6X","^5T","^6I"]]],["^1T","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5V","^7N","^8B"]]],["^1T","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^6R","~$goog.dom","^7V","^80","^7N","^7O","^62","^6=","^6>","^65"]]],["^1T","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","^7O","^7P","^7Q","^7X","^7L","^62","^65","^60"]]],["^1T","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5V","~$goog.debug","~$goog.debug.LogBuffer","^85"]]],["^67","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^68"]]],["^1T","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^7>","~$goog.events.EventId"]]],["^1T","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^6V","^6W","^6X"]]],["^1T","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","~$goog.math.Long","~$goog.math.Integer","^5T","^1>","^5U","^5Y","^6I"]]],["^1T","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","^7I","^65","^66"]]],["^1T","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^8D","~$goog.debug.LogManager","^85","~$goog.debug.Logger"]]],["^1T","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5V","^7Q","^1>","^65","^66","^60"]]],["^1T","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^8D","^5Z","^7?","~$goog.events.EventType","^6@","^5["]]],["^1T","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^6@"]]],["^1T","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5["]]],["^1T","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<"]]],["^1T","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5U","^5V","^5T"]]],["^1T","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","^66"]]],["^1T","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^1D","^7Y","~$taoensso.timbre.appenders.core"]]],["^1T","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^8F"]]],["^1T","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^7<"]]],["^1T","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^1<","^17"]]],["^1T","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","~$goog.net.WrapperXmlHttpFactory","^7="]]],["^1T","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?"]]],["^1T","goog/crypt/base64.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5N",["^ ","^5O",null,"^5P",["^L",[]],"^5Q",["^1?","^5V","^6:","^5T","^5[","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1580742522000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1598567491000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1580246397000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1580742522000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/gen/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1592012038000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/gen/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1580245266000,"jar:file:/home/patro/.m2/repository/com/taoensso/encore/2.117.0/encore-2.117.0.jar!/taoensso/encore.clj",1597755175000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1580246397000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1580245266000,"jar:file:/home/patro/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1592144842000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/components.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1589469725000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/main.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/reader.clj",1592012038000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/pprint.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1580245266000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1,"^8",5,"^9",1,"^:",38],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",["^ ","^I","^J"],"^K",["^L",[]],"^M",["^ ","^N",["^ ","^O","Define a stateful component. This macro emits a React UI class with a query,\n   optional ident (if :ident is specified in options), optional initial state, optional css, lifecycle methods,\n   and a render method. It can also cause the class to implement additional protocols that you specify. Destructuring is\n   supported in the argument list.\n\n   The template (data-only) versions do not have any arguments in scope\n   The lambda versions have arguments in scope that make sense for those lambdas, as listed below:\n\n   ```\n   (defsc Component [this {:keys [db/id x] :as props} {:keys [onSelect] :as computed} extended-args]\n     {\n      ;; stateful component options\n      ;; query template is literal. Use the lambda if you have ident-joins or unions.\n      :query [:db/id :x] ; OR (fn [] [:db/id :x]) ; this in scope\n      ;; ident template is table name and ID property name\n      :ident [:table/by-id :id] ; OR (fn [] [:table/by-id id]) ; this and props in scope\n      ;; initial-state template is magic..see dev guide. Lambda version is normal.\n      :initial-state {:x :param/x} ; OR (fn [params] {:x (:x params)}) ; nothing is in scope\n      ;; pre-merge, use a lamba to modify new merged data with component needs\n      :pre-merge (fn [{:keys [data-tree current-normalized state-map query]}] (merge {:ui/default-value :start} data-tree))\n\n      ; React Lifecycle Methods\n      :initLocalState            (fn [this props] ...) ; CAN BE used to call things as you might in a constructor. Return value is initial state.\n      :shouldComponentUpdate     (fn [this next-props next-state] ...)\n\n      :componentDidUpdate        (fn [this prev-props prev-state snapshot] ...) ; snapshot is optional, and is 16+. Is context for 15\n      :componentDidMount         (fn [this] ...)\n      :componentWillUnmount      (fn [this] ...)\n\n      ;; DEPRECATED IN REACT 16 (to be removed in 17):\n      :componentWillReceiveProps        (fn [this next-props] ...)\n      :componentWillUpdate              (fn [this next-props next-state] ...)\n      :componentWillMount               (fn [this] ...)\n\n      ;; Replacements for deprecated methods in React 16.3+\n      :UNSAFE_componentWillReceiveProps (fn [this next-props] ...)\n      :UNSAFE_componentWillUpdate       (fn [this next-props next-state] ...)\n      :UNSAFE_componentWillMount        (fn [this] ...)\n\n      ;; ADDED for React 16:\n      :componentDidCatch         (fn [this error info] ...)\n      :getSnapshotBeforeUpdate   (fn [this prevProps prevState] ...)\n\n      ;; static.\n      :getDerivedStateFromProps  (fn [props state] ...)\n\n      ;; ADDED for React 16.6:\n      ;; NOTE: The state returned from this function can either be:\n      ;; a raw js map, where Fulcro's state is in a sub-key: `#js {\"fulcro$state\" {:fulcro :state}}`.\n      ;; or a clj map. In either case this function will *overwrite* Fulcro's component-local state, which is\n      ;; slighly different behavior than raw React (we have no `this`, so we cannot read Fulcro's state to merge it).\n      :getDerivedStateFromError  (fn [error] ...)\n\n      NOTE: shouldComponentUpdate should generally not be overridden other than to force it false so\n      that other libraries can control the sub-dom. If you do want to implement it, then old props can\n      be obtained from (prim/props this), and old state via (gobj/get (. this -state) \"fulcro$state\").\n\n      ; BODY forms. May be omitted IFF there is an options map, in order to generate a component that is used only for queries/normalization.\n      (dom/div #js {:onClick onSelect} x))\n   ```\n\n   NOTE: The options map is \"open\". That is: you can add whatever extra stuff you want to in order\n   to co-locate data for component-related concerns. This is exactly what component-local css, the\n   dynamic router, and form-state do.  The data that you add is available from `comp/component-options`\n   on the component class and instances (i.e. `this`).\n\n   See the Developer's Guide at book.fulcrologic.com for more details.\n   ","^P",["^Q",[["~$&","^R"]]],"^7",1530,"^8",4,"^6","com/fulcrologic/fulcro/components.cljc","^S","^T","^U","^V","^W",true],"^X",["^ ","^P",["^Q",[["^Y","~$&","^Z"]]],"^O","Wraps the given body with the correct internal bindings of the parent so that Fulcro internals\n     will work when that body is embedded in unusual ways (e.g. as the body in a child-as-a-function\n     React pattern).\n\n     ```\n     (defsc X [this props]\n       ...\n       ;; WRONG:\n       (some-react-thing {:child (fn [] (ui-fulcro-thing ...))})\n       ;; CORRECT:\n       (some-react-thing {:child (fn [] (with-parent-context this (ui-fulcro-thing ...)))})\n     ```\n     ","^7",1175,"^8",4,"^6","com/fulcrologic/fulcro/components.cljc","^S","^[","^U","^V","^W",true]],"~:shadow/js-access-properties",["^L",["createElement","Fragment","Component","useEffect","useState"]],"^S","^V","^11",null,"^12",["^ ","^13","^14","^15","^16","^17","^17","^>","^?","^J","^J","^18","^19","^1:","^17","^1;","^1;","^1<","^1<","^1=","^1>","^1?","^1?","^1>","^1>","^1@","^1@","^16","^16","^1A","^1B","~$s","^?","^14","^14","^19","^19","^1C","^1D","^1D","^1D","^?","^?","^1E","^1;","^1F","^1F","^1B","^1B"],"^1G",["^L",["^1H","^1I"]],"~:shadow/js-access-global",["^L",["React","Error"]],"^1J",["^ ","^1K","^1F","^I","^J"],"~:defs",["^ ","~$ident->any",["^ ","~:protocol-inline",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1100,"^8",7,"^9",1100,"^:",17,"^P",["^Q",["~$quote",["^Q",[["~$x","~$ident"]]]]],"^O","Return some (random) on-screen components that uses the given ident. `x` is anything any->app accepts."],"^S","^2;","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"~:method-params",["^Q",[["~$x","^:9"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^8",1,"~:variadic?",false,"^7",1100,"~:ret-tag",["^L",["~$any","~$clj-nil"]],"^9",1100,"~:max-fixed-arity",2,"~:fn-var",true,"^P",["^Q",["^:8",["^Q",[["~$x","^:9"]]]]],"^O","Return some (random) on-screen components that uses the given ident. `x` is anything any->app accepts."],"~$denormalize-query",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",659,"^8",7,"^9",659,"^:",24,"^P",["^Q",["^:8",["^Q",[["~$state-map","~$ID"]]]]],"^O","Takes a state map that may contain normalized queries and a query ID. Returns the stored query or nil."],"^S","^2R","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^::",["^Q",[["^:D","^:E"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",659,"^:>",["^L",["^:?","^:@"]],"^9",659,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:D","^:E"]]]]],"^O","Takes a state map that may contain normalized queries and a query ID. Returns the stored query or nil."],"~$initial-state",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",240,"^8",7,"^9",240,"^:",20,"^P",["^Q",["^:8",["^Q",[["~$clz","~$params"]]]]]],"^S","^2:","^6","com/fulcrologic/fulcro/components.cljc","^:",20,"^::",["^Q",[["^:G","^:H"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",240,"^:>",["^L",["^:?","^:@"]],"^9",240,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:G","^:H"]]]]]],"~$query",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",239,"^8",7,"^9",239,"^:",12,"^P",["^Q",["^:8",["^Q",[["~$this"]]]]]],"^S","^25","^6","com/fulcrologic/fulcro/components.cljc","^:",12,"^::",["^Q",[["^:J"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",239,"^:>",["^L",["^:?","^:@"]],"^9",239,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:J"]]]]]],"~$is-factory?",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",644,"^8",7,"^9",644,"^:",18,"^P",["^Q",["^:8",["^Q",[["~$class-or-factory"]]]]],"^O","Returns true if the given argument is a component factory."],"^S","^2<","^6","com/fulcrologic/fulcro/components.cljc","^:",18,"^::",["^Q",[["^:L"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",644,"^:>","~$boolean","^9",644,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:L"]]]]],"^O","Returns true if the given argument is a component factory."],"~$external-config",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1609,"^8",7,"^9",1609,"^:",22,"^P",["^Q",["^:8",["^Q",[["~$app-ish","~$k"]]]]]],"^S","^2D","^6","com/fulcrologic/fulcro/components.cljc","^:",22,"^::",["^Q",[["^:O","~$k"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1609,"^:>",["^L",[null,"^:?","^:@"]],"^9",1609,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:O","~$k"]]]]]],"~$normalize-query",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1023,"^8",7,"^9",1023,"^:",22,"^P",["^Q",["^:8",["^Q",[["^:D","^:I"]]]]],"^O","Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\n  that already appear in the state will not be added.  Part of dynamic query implementation."],"^S","^27","^6","com/fulcrologic/fulcro/components.cljc","^:",22,"^::",["^Q",[["^:D","^:I"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1023,"^:>",["^L",[null,"~$clj","^:?","^:@"]],"^9",1023,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:D","^:I"]]]]],"^O","Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\n  that already appear in the state will not be added.  Part of dynamic query implementation."],"~$get-class",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",219,"^8",7,"^9",219,"^:",16,"^P",["^Q",["^:8",["^Q",[["~$instance"]]]]],"^O","Returns the react type (component class) of the given React element (instance). Is identity if used on a class."],"^S","^2A","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^::",["^Q",[["^:S"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",219,"^:>",["^L",["^:?","^:@"]],"^9",219,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:S"]]]]],"^O","Returns the react type (component class) of the given React element (instance). Is identity if used on a class."],"~$component-class?",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",126,"^8",7,"^9",126,"^:",23,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Returns true if the argument is a component class.","~:tag","^:M"],"^S","^2E","^6","com/fulcrologic/fulcro/components.cljc","^:",23,"^::",["^Q",[["~$x"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",126,"^:>","^:M","^9",126,"^:A",1,"^:U","^:M","^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Returns true if the argument is a component class."],"~$react-type",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",212,"^8",7,"^9",212,"^:",17,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Returns the component type, regardless of whether the component has been\n   mounted"],"^S","^2L","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^::",["^Q",[["~$x"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",212,"^:>",["^L",["^:?","^:@"]],"^9",212,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Returns the component type, regardless of whether the component has been\n   mounted"],"~$compressible-transact!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1223,"^8",7,"^9",1223,"^:",29,"^P",["^Q",["^:8",["^Q",[["^:O","~$tx"],["^:O","~$ref","^:X"]]]]],"^O","Identical to `transact!` with `:compressible? true` option. This means that if more than one\n  adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\n  is useful for things like form input fields, where storing every keystoke in history is undesirable. This\n  also compress the transactions in Fulcro Inspect.\n\n  NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\n  automatic network error recovery handling.","~:top-fn",["^ ","^:=",false,"~:fixed-arity",3,"^:A",3,"^::",[["^:O","^:X"],["^:O","^:Y","^:X"]],"^P",["^Q",[["^:O","^:X"],["^:O","^:Y","^:X"]]],"^:<",["^Q",[null,null]]]],"^S","^2B","^6","com/fulcrologic/fulcro/components.cljc","^:",29,"^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^:O","^:X"],["^:O","^:Y","^:X"]],"^P",["^Q",[["^:O","^:X"],["^:O","^:Y","^:X"]]],"^:<",["^Q",[null,null]]],"^::",[["^:O","^:X"],["^:O","^:Y","^:X"]],"^:;",null,"^:[",3,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"~:methods",[["^ ","^:[",2,"^:=",false,"^:U",["^L",["^:?","^:@"]]],["^ ","^:[",3,"^:=",false,"^:U",["^L",["^:?","^:@"]]]],"^7",1223,"^9",1223,"^:A",3,"^:B",true,"^P",["^Q",[["^:O","^:X"],["^:O","^:Y","^:X"]]],"^O","Identical to `transact!` with `:compressible? true` option. This means that if more than one\n  adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\n  is useful for things like form input fields, where storing every keystoke in history is undesirable. This\n  also compress the transactions in Fulcro Inspect.\n\n  NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\n  automatic network error recovery handling."],"~$set-query!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1066,"^8",7,"^9",1066,"^:",17,"^P",["^Q",["^:8",["^Q",[["~$x","^:L",["^ ","~:keys",["^:I","^:H"],"^1N","~$opts"]]]]]],"^O","Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\n\n  * `x` : is anything that any->app accepts.\n  * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\n  * `opts` : A map with `query` and optionally `params` (substitutions on queries)\n  "],"^S","^2T","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^::",["^Q",[["~$x","^:L","~$p__65012"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1066,"^:>",["^L",["^:?","^:@"]],"^9",1066,"^:A",3,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x","^:L",["^ ","^;2",["^:I","^:H"],"^1N","^;3"]]]]]],"^O","Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\n\n  * `x` : is anything that any->app accepts.\n  * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\n  * `opts` : A map with `query` and optionally `params` (substitutions on queries)\n  "],"~$props",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",197,"^8",7,"^9",197,"^:",12,"^P",["^Q",["^:8",["^Q",[["~$component"]]]]],"^O","Return a component's props."],"^S","^2O","^6","com/fulcrologic/fulcro/components.cljc","^:",12,"^::",["^Q",[["^;6"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",197,"^:>","^:?","^9",197,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]],"^O","Return a component's props."],"~$has-ident?",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",235,"^8",7,"^9",235,"^:",17,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]],"^:U","^:M"],"^S","^2N","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^::",["^Q",[["^;6"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",235,"^:>","^:M","^9",235,"^:A",1,"^:U","^:M","^:B",true,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]]],"~$isoget",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",76,"^8",7,"^9",76,"^:",13,"^P",["^Q",["^:8",["^Q",[["~$obj","~$k"],["^;9","~$k","~$default"]]]]],"^O","Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`.","^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^;9","~$k"],["^;9","~$k","^;:"]],"^P",["^Q",[["^;9","~$k"],["^;9","~$k","^;:"]]],"^:<",["^Q",[null,null]]]],"^S","^4X","^6","com/fulcrologic/fulcro/components.cljc","^:",13,"^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^;9","~$k"],["^;9","~$k","^;:"]],"^P",["^Q",[["^;9","~$k"],["^;9","~$k","^;:"]]],"^:<",["^Q",[null,null]]],"^::",[["^;9","~$k"],["^;9","~$k","^;:"]],"^:;",null,"^:[",3,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",2,"^:=",false,"^:U","^:?"],["^ ","^:[",3,"^:=",false,"^:U",["^L",[null,"^:?"]]]],"^7",76,"^9",76,"^:A",3,"^:B",true,"^P",["^Q",[["^;9","~$k"],["^;9","~$k","^;:"]]],"^O","Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`."],"~$wrapped-render",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",758,"^8",7,"^9",758,"^:",21,"^P",["^Q",["^:8",["^Q",[["^:J","~$real-render"]]]]],"^O","Run `real-render`, possibly through :render-middleware configured on your app."],"^S","^36","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^::",["^Q",[["^:J","^;<"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",758,"^:>","^:?","^9",758,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:J","^;<"]]]]],"^O","Run `real-render`, possibly through :render-middleware configured on your app."],"~$wrap-update-extra-props",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1133,"^8",7,"^9",1133,"^:",30,"^P",["^Q",["^:8",["^Q",[["~$f"],["~$handler","~$f"]]]]],"^O","Wrap the props middleware such that `f` is called to get extra props that should be placed\n  in the extra-props arg of the component.\n\n  `handler` - (optional) The next item in the props middleware chain.\n  `f` - A (fn [cls extra-props] new-extra-props)\n\n  `f` will be passed the class being rendered and the current map of extra props. It should augment\n  those and return a new version.","^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["~$f"],["^;>","~$f"]],"^P",["^Q",[["~$f"],["^;>","~$f"]]],"^:<",["^Q",[null,null]]]],"^S","^35","^6","com/fulcrologic/fulcro/components.cljc","^:",30,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["~$f"],["^;>","~$f"]],"^P",["^Q",[["~$f"],["^;>","~$f"]]],"^:<",["^Q",[null,null]]],"^::",[["~$f"],["^;>","~$f"]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",1,"^:=",false,"^:U","~$function"],["^ ","^:[",2,"^:=",false,"^:U","^;?"]],"^7",1133,"^9",1133,"^:A",2,"^:B",true,"^P",["^Q",[["~$f"],["^;>","~$f"]]],"^O","Wrap the props middleware such that `f` is called to get extra props that should be placed\n  in the extra-props arg of the component.\n\n  `handler` - (optional) The next item in the props middleware chain.\n  `f` - A (fn [cls extra-props] new-extra-props)\n\n  `f` will be passed the class being rendered and the current map of extra props. It should augment\n  those and return a new version."],"~$children",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",205,"^8",7,"^9",205,"^:",15,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]],"^O","Get the sequence of react children of the given component."],"^S","^33","^6","com/fulcrologic/fulcro/components.cljc","^:",15,"^::",["^Q",[["^;6"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",205,"^:>",["^L",["~$cljs.core/IVector","^:?"]],"^9",205,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]],"^O","Get the sequence of react children of the given component."],"~$use-fulcro",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",491,"^8",7,"^9",491,"^:",17,"^P",["^Q",["^:8",["^Q",[["~$js-props","~$faux-class"]]]]],"^O","Allows you to use a plain function as a Fulcro-managed React hooks component.\n\n  * `js-props` - The React js props from the parent.\n  * `faux-class` - A Fulcro faux class, which is a fn that has had `add-options!` called on it.\n\n  Returns a cljs vector containing `this` and fulcro `props`. You should *not* use the returned `this` directly,\n  as it is a placeholder.\n\n  Prefer `defsc` or `configure-hooks-component! over using this directly.`\n  "],"^S","^2X","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^::",["^Q",[["^;C","^;D"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",491,"^:>","^;A","^9",491,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;C","^;D"]]]]],"^O","Allows you to use a plain function as a Fulcro-managed React hooks component.\n\n  * `js-props` - The React js props from the parent.\n  * `faux-class` - A Fulcro faux class, which is a fn that has had `add-options!` called on it.\n\n  Returns a cljs vector containing `this` and fulcro `props`. You should *not* use the returned `this` directly,\n  as it is a placeholder.\n\n  Prefer `defsc` or `configure-hooks-component! over using this directly.`\n  "],"~$ptransact!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1203,"^8",7,"^9",1203,"^:",17,"^P",["^Q",["^:8",["^Q",[["~$component-or-app","^:X"],["^;F","^:Y","^:X"]]]]],"^O","\n  DEPRECATED: Generally use `result-action` in mutations to chain sequences instead. This call is equivalent\n  to `transact!` with an `:optimistic? false` option.\n\n  Like `transact!`, but ensures each call completes (in a full-stack, pessimistic manner) before the next call starts\n  in any way. Note that two calls of this function have no guaranteed relationship to each other. They could end up\n  intermingled at runtime. The only guarantee is that for *a single call* to `ptransact!`, the calls in the given tx will run\n  pessimistically (one at a time) in the order given. Follow-on reads in the given transaction will be repeated after each remote\n  interaction.\n\n  `component-or-app` a mounted component or the app\n  `tx` the tx to run\n  `ref` the ident (ref context) in which to run the transaction (including all deferrals)","^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^;F","^:X"],["^;F","^:Y","^:X"]],"^P",["^Q",[["^;F","^:X"],["^;F","^:Y","^:X"]]],"^:<",["^Q",[null,null]]]],"^S","^34","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^;F","^:X"],["^;F","^:Y","^:X"]],"^P",["^Q",[["^;F","^:X"],["^;F","^:Y","^:X"]]],"^:<",["^Q",[null,null]]],"^::",[["^;F","^:X"],["^;F","^:Y","^:X"]],"^:;",null,"^:[",3,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",2,"^:=",false,"^:U",["^L",["^:?","^:@"]]],["^ ","^:[",3,"^:=",false,"^:U",["^L",["^:?","^:@"]]]],"^7",1203,"^9",1203,"^:A",3,"^:B",true,"^P",["^Q",[["^;F","^:X"],["^;F","^:Y","^:X"]]],"^O","\n  DEPRECATED: Generally use `result-action` in mutations to chain sequences instead. This call is equivalent\n  to `transact!` with an `:optimistic? false` option.\n\n  Like `transact!`, but ensures each call completes (in a full-stack, pessimistic manner) before the next call starts\n  in any way. Note that two calls of this function have no guaranteed relationship to each other. They could end up\n  intermingled at runtime. The only guarantee is that for *a single call* to `ptransact!`, the calls in the given tx will run\n  pessimistically (one at a time) in the order given. Follow-on reads in the given transaction will be repeated after each remote\n  interaction.\n\n  `component-or-app` a mounted component or the app\n  `tx` the tx to run\n  `ref` the ident (ref context) in which to run the transaction (including all deferrals)"],"~$get-ident",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",609,"^8",7,"^9",609,"^:",16,"^P",["^Q",["^:8",["^Q",[["~$x"],["~$class","^;5"]]]]],"^O","Get the ident for a mounted component OR using a component class.\n\n  That arity-2 will return the ident using the supplied props map.\n\n  The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\n  props that were sent to it most recently.","^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["~$x"],["^;H","^;5"]],"^P",["^Q",[["~$x"],["^;H","^;5"]]],"^:<",["^Q",[null,null]]]],"^S","^3C","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["~$x"],["^;H","^;5"]],"^P",["^Q",[["~$x"],["^;H","^;5"]]],"^:<",["^Q",[null,null]]],"^::",[["~$x"],["^;H","^;5"]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",1,"^:=",false,"^:U",["^L",["^:?","^:@"]]],["^ ","^:[",2,"^:=",false,"^:U",["^L",["^;A","^:?","^:@"]]]],"^7",609,"^9",609,"^:A",2,"^:B",true,"^P",["^Q",[["~$x"],["^;H","^;5"]]],"^O","Get the ident for a mounted component OR using a component class.\n\n  That arity-2 will return the ident using the supplied props map.\n\n  The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\n  props that were sent to it most recently."],"~$newer-props",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",100,"^8",7,"^9",100,"^:",18,"^P",["^Q",["^:8",["^Q",[["~$props-a","~$props-b"]]]]],"^O","Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\n  is part of props 'tunnelling', an optimization to get updated props to instances without going through the root."],"^S","^2Z","^6","com/fulcrologic/fulcro/components.cljc","^:",18,"^::",["^Q",[["^;J","^;K"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",100,"^9",100,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;J","^;K"]]]]],"^O","Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\n  is part of props 'tunnelling', an optimization to get updated props to instances without going through the root."],"~$*blindly-render*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",49,"^8",16,"^9",49,"^:",32,"~:dynamic",true],"^S","^2[","^6","com/fulcrologic/fulcro/components.cljc","^:",32,"^8",1,"^;M",true,"^7",49,"^9",49,"^:U","^:?"],"~$pre-merge",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",241,"^8",7,"^9",241,"^:",16,"^P",["^Q",["^:8",["^Q",[["^:J","~$data"]]]]]],"^S","^3;","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^::",["^Q",[["^:J","^;O"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",241,"^:>",["^L",["^:?","^:@"]],"^9",241,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:J","^;O"]]]]]],"~$set-state!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",553,"^8",7,"^9",553,"^:",17,"^P",["^Q",["^:8",["^Q",[["^;6","~$new-state","~$callback"],["^;6","^;Q"]]]]],"^O","Set React component-local state.  The `new-state` is actually merged with the existing state (as per React docs),\n  but is wrapped so that cljs maps are used (instead of js objs).  `callback` is an optional callback that will be\n  called as per the React docs on setState.","^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^;6","^;Q","^;R"],["^;6","^;Q"]],"^P",["^Q",[["^;6","^;Q","^;R"],["^;6","^;Q"]]],"^:<",["^Q",[null,null]]]],"^S","^38","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^;6","^;Q","^;R"],["^;6","^;Q"]],"^P",["^Q",[["^;6","^;Q","^;R"],["^;6","^;Q"]]],"^:<",["^Q",[null,null]]],"^::",[["^;6","^;Q","^;R"],["^;6","^;Q"]],"^:;",null,"^:[",3,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",3,"^:=",false,"^:U",["^L",["~$js","^:@"]]],["^ ","^:[",2,"^:=",false,"^:U",["^L",["^;S","^:@"]]]],"^7",553,"^9",553,"^:A",3,"^:B",true,"^P",["^Q",[["^;6","^;Q","^;R"],["^;6","^;Q"]]],"^O","Set React component-local state.  The `new-state` is actually merged with the existing state (as per React docs),\n  but is wrapped so that cljs maps are used (instead of js objs).  `callback` is an optional callback that will be\n  called as per the React docs on setState."],"~$normalize-query-elements",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",978,"^8",7,"^9",978,"^:",31,"^P",["^Q",["^:8",["^Q",[["^:D","^:I"]]]]],"^O","Part of internal implementation of dynamic queries.\n\n  Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\n\n  Returns the new state map containing potentially-updated normalized queries."],"^S","^3=","^6","com/fulcrologic/fulcro/components.cljc","^:",31,"^::",["^Q",[["^:D","^:I"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",978,"^:>",["^L",[null,"^:?"]],"^9",978,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:D","^:I"]]]]],"^O","Part of internal implementation of dynamic queries.\n\n  Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\n\n  Returns the new state map containing potentially-updated normalized queries."],"~$computed",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",159,"^8",7,"^9",159,"^:",15,"^P",["^Q",["^:8",["^Q",[["^;5","~$computed-map"]]]]],"^O","Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\n  necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\n  is not necessary for \"stateless\" components, though it will work properly for both.\n\n  Computed props are \"remembered\" so that a targeted update (which can only happen on a component with a query\n  and ident) can use new props from the database without \"losing\" the computed props that were originally passed\n  from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \"lose\n  track of\" them.\n  "],"^S","^2=","^6","com/fulcrologic/fulcro/components.cljc","^:",15,"^::",["^Q",[["^;5","^;V"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",159,"^:>",["^L",[null,"^:Q","^:?","~$cljs.core/MetaFn","^:@"]],"^9",159,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;5","^;V"]]]]],"^O","Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\n  necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\n  is not necessary for \"stateless\" components, though it will work properly for both.\n\n  Computed props are \"remembered\" so that a targeted update (which can only happen on a component with a query\n  and ident) can use new props from the database without \"losing\" the computed props that were originally passed\n  from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \"lose\n  track of\" them.\n  "],"~$class->any",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1120,"^8",7,"^9",1120,"^:",17,"^P",["^Q",["^:8",["^Q",[["~$x","~$cls"]]]]],"^O","Get a (random) on-screen component instance from the indexes that has type of the given component class.\n  `x` can be anything `any->app` is ok with."],"^S","^28","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^::",["^Q",[["~$x","^;Y"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1120,"^:>",["^L",["^:?","^:@"]],"^9",1120,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x","^;Y"]]]]],"^O","Get a (random) on-screen component instance from the indexes that has type of the given component class.\n  `x` can be anything `any->app` is ok with."],"~$mounted?",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",547,"^8",7,"^9",547,"^:",15,"^P",["^Q",["^:8",["^Q",[["^:J"]]]]],"^O","Returns true if the given component instance is mounted on the DOM."],"^S","^3G","^6","com/fulcrologic/fulcro/components.cljc","^:",15,"^::",["^Q",[["^:J"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",547,"^:>","^:?","^9",547,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:J"]]]]],"^O","Returns true if the given component instance is mounted on the DOM."],"~$fragment",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1158,"^8",7,"^9",1158,"^:",15,"^P",["^Q",["^:8",["^Q",[["~$&","^R"]]]]],"^O","Wraps children in a React.Fragment. Props are optional, like normal DOM elements.","^:Z",["^ ","^:=",true,"^:[",0,"^:A",0,"^::",[["^Q",["^R"]]],"^P",["^Q",[["~$&","^R"]]],"^:<",["^Q",[null]]]],"^S","^39","^6","com/fulcrologic/fulcro/components.cljc","^:",15,"^:Z",["^ ","^:=",true,"^:[",0,"^:A",0,"^::",[["^Q",["^R"]]],"^P",["^Q",[["~$&","^R"]]],"^:<",["^Q",[null]]],"^::",[["^Q",["^R"]]],"^:;",null,"^:[",0,"^:<",["^Q",[null]],"^8",1,"^:=",true,"^;0",[["^ ","^:[",0,"^:=",true,"^:U","^:?"]],"^7",1158,"^:>","^:?","^9",1158,"^:A",0,"^:B",true,"^P",["^Q",[["~$&","^R"]]],"^O","Wraps children in a React.Fragment. Props are optional, like normal DOM elements."],"~$component-name",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",135,"^8",7,"^9",135,"^:",21,"^P",["^Q",["^:8",["^Q",[["^;H"]]]]],"^O","Returns a string version of the given react component's name. Works on component instances and classes."],"^S","^3D","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^::",["^Q",[["^;H"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",135,"^:>","^:?","^9",135,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;H"]]]]],"^O","Returns a string version of the given react component's name. Works on component instances and classes."],"~$get-computed",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",177,"^8",7,"^9",177,"^:",19,"^P",["^Q",["^:8",["^Q",[["~$x"],["~$x","~$k-or-ks"]]]]],"^O","Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil.","^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["~$x"],["~$x","^<2"]],"^P",["^Q",[["~$x"],["~$x","^<2"]]],"^:<",["^Q",[null,null]]]],"^S","^4K","^6","com/fulcrologic/fulcro/components.cljc","^:",19,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["~$x"],["~$x","^<2"]],"^P",["^Q",[["~$x"],["~$x","^<2"]]],"^:<",["^Q",[null,null]]],"^::",[["~$x"],["~$x","^<2"]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",1,"^:=",false,"^:U","^:?"],["^ ","^:[",2,"^:=",false,"^:U",["^L",[null,"^:?","^:@"]]]],"^7",177,"^9",177,"^:A",2,"^:B",true,"^P",["^Q",[["~$x"],["~$x","^<2"]]],"^O","Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil."],"~$get-state",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",571,"^8",7,"^9",571,"^:",16,"^P",["^Q",["^:8",["^Q",[["^;6"],["^;6","^<2"]]]]],"^O","Get a component's local state. May provide a single key or a sequential\n   collection of keys for indexed access into the component's local state. NOTE: This is Fulcro's wrapped component\n   local state. The low-level React state is as described in the React docs (e.g. `(.-state this)`).","^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^;6"],["^;6","^<2"]],"^P",["^Q",[["^;6"],["^;6","^<2"]]],"^:<",["^Q",[null,null]]]],"^S","^49","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^;6"],["^;6","^<2"]],"^P",["^Q",[["^;6"],["^;6","^<2"]]],"^:<",["^Q",[null,null]]],"^::",[["^;6"],["^;6","^<2"]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",1,"^:=",false,"^:U","^:?"],["^ ","^:[",2,"^:=",false,"^:U",["^L",[null,"^:?"]]]],"^7",571,"^9",571,"^:A",2,"^:B",true,"^P",["^Q",[["^;6"],["^;6","^<2"]]],"^O","Get a component's local state. May provide a single key or a sequential\n   collection of keys for indexed access into the component's local state. NOTE: This is Fulcro's wrapped component\n   local state. The low-level React state is as described in the React docs (e.g. `(.-state this)`)."],"~$*parent*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",42,"^8",16,"^9",42,"^:",24,"^;M",true],"^S","^3X","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^8",1,"^;M",true,"^7",42,"^9",42,"^:U","^:?"],"~$has-query?",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",236,"^8",7,"^9",236,"^:",17,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]],"^:U","^:M"],"^S","^3Y","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^::",["^Q",[["^;6"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",236,"^:>","^:M","^9",236,"^:A",1,"^:U","^:M","^:B",true,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]]],"~$update-state!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",586,"^8",9,"^9",586,"^:",22,"^P",["^Q",["^:8",["^Q",[["^;6","~$f"],["^;6","~$f","~$&","^R"]]]]],"^O","Update a component's local state. Similar to Clojure(Script)'s swap!\n\n    This function affects a managed cljs map maintained in React state.  If you want to affect the low-level\n    js state itself use React's own `.setState` directly on the component.","^:Z",["^ ","^:=",true,"^:[",2,"^:A",2,"^::",[["^;6","~$f"]],"^P",["^Q",[["^;6","~$f"],["^;6","~$f","~$&","^R"]]],"^:<",["^Q",[null,null]]]],"^S","^3Q","^6","com/fulcrologic/fulcro/components.cljc","^:",22,"^:Z",["^ ","^:=",true,"^:[",2,"^:A",2,"^::",[["^;6","~$f"]],"^P",["^Q",[["^;6","~$f"],["^;6","~$f","~$&","^R"]]],"^:<",["^Q",[null,null]]],"^::",[["^;6","~$f"]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",3,"^:=",true,"^;0",[["^ ","^:[",2,"^:=",false,"^:U","^;S"],["^ ","^:[",2,"^:=",true,"^:U","^;S"]],"^7",586,"^9",586,"^:A",2,"^:B",true,"^P",["^Q",[["^;6","~$f"],["^;6","~$f","~$&","^R"]]],"^O","Update a component's local state. Similar to Clojure(Script)'s swap!\n\n    This function affects a managed cljs map maintained in React state.  If you want to affect the low-level\n    js state itself use React's own `.setState` directly on the component."],"~$add-hook-options!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",468,"^8",7,"^9",468,"^:",24,"^P",["^Q",["^:8",["^Q",[["~$render-fn","~$component-options"]]]]],"^O","Make a given `cls` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\n  new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\n  keyword to name the component in the registry.\n\n  component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\n  function as the faux class in the component registry."],"^S","^3P","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^::",["^Q",[["^<8","^<9"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",468,"^9",468,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^<8","^<9"]]]]],"^O","Make a given `cls` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\n  new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\n  keyword to name the component in the registry.\n\n  component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\n  function as the faux class in the component registry."],"~$isoget-in",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",65,"^8",7,"^9",65,"^:",16,"^P",["^Q",["^:8",["^Q",[["^;9","~$kvs"],["^;9","^<;","^;:"]]]]],"^O","Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\n  gobj/getValueByKeys.","^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^;9","^<;"],["^;9","^<;","^;:"]],"^P",["^Q",[["^;9","^<;"],["^;9","^<;","^;:"]]],"^:<",["^Q",[null,null]]]],"^S","^3V","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^;9","^<;"],["^;9","^<;","^;:"]],"^P",["^Q",[["^;9","^<;"],["^;9","^<;","^;:"]]],"^:<",["^Q",[null,null]]],"^::",[["^;9","^<;"],["^;9","^<;","^;:"]],"^:;",null,"^:[",3,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",2,"^:=",false,"^:U","^:?"],["^ ","^:[",3,"^:=",false,"^:U",["^L",[null,"^:?"]]]],"^7",65,"^9",65,"^:A",3,"^:B",true,"^P",["^Q",[["^;9","^<;"],["^;9","^<;","^;:"]]],"^O","Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\n  gobj/getValueByKeys."],"~$query-id",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",650,"^8",7,"^9",650,"^:",15,"^P",["^Q",["^:8",["^Q",[["^;H","~$qualifier"]]]]],"^O","Returns a string ID for the query of the given class with qualifier."],"^S","^41","^6","com/fulcrologic/fulcro/components.cljc","^:",15,"^::",["^Q",[["^;H","^<="]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",650,"^:>",["^L",["~$string","^:@"]],"^9",650,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;H","^<="]]]]],"^O","Returns a string ID for the query of the given class with qualifier."],"~$get-initial-state",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",596,"^8",7,"^9",596,"^:",24,"^P",["^Q",["^:8",["^Q",[["^;H"],["^;H","^:H"]]]]],"^O","Get the declared :initial-state value for a component.","^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^;H"],["^;H","^:H"]],"^P",["^Q",[["^;H"],["^;H","^:H"]]],"^:<",["^Q",[null,null]]]],"^S","^43","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^;H"],["^;H","^:H"]],"^P",["^Q",[["^;H"],["^;H","^:H"]]],"^:<",["^Q",[null,null]]],"^::",[["^;H"],["^;H","^:H"]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",1,"^:=",false,"^:U",["^L",["^:Q","^;W","^:@"]]],["^ ","^:[",2,"^:=",false,"^:U",["^L",["^:Q","^;W","^:@"]]]],"^7",596,"^9",596,"^:A",2,"^:B",true,"^P",["^Q",[["^;H"],["^;H","^:H"]]],"^O","Get the declared :initial-state value for a component."],"~$any->app",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",249,"^8",7,"^9",249,"^:",15,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\n  or an atom holding any of the above."],"^S","^4>","^6","com/fulcrologic/fulcro/components.cljc","^:",15,"^::",["^Q",[["~$x"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",249,"^9",249,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\n  or an atom holding any of the above."],"~$*shared*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",44,"^8",16,"^9",44,"^:",24,"^;M",true],"^S","^47","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^8",1,"^;M",true,"^7",44,"^9",44,"^:U","^:?"],"~$get-extra-props",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",191,"^8",7,"^9",191,"^:",22,"^P",["^Q",["^:8",["^Q",[["^:J"]]]]],"^O","Get any data (as a map) that props extensions have associated with the given Fulcro component. Extra props will\n  be empty unless you've installed props-middleware (on your app) that sets them."],"^S","^4?","^6","com/fulcrologic/fulcro/components.cljc","^:",22,"^::",["^Q",[["^:J"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",191,"^:>",["^L",[null,"^:?"]],"^9",191,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:J"]]]]],"^O","Get any data (as a map) that props extensions have associated with the given Fulcro component. Extra props will\n  be empty unless you've installed props-middleware (on your app) that sets them."],"~$computed-initial-state?",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",603,"^8",7,"^9",603,"^:",30,"^P",["^Q",["^:8",["^Q",[["~$s"]]]]],"^O","Returns true if the given initial state was returned from a call to get-initial-state. This is used by internal\n  algorithms when interpreting initial state shorthand in `defsc`."],"^S","^3R","^6","com/fulcrologic/fulcro/components.cljc","^:",30,"^::",["^Q",[["~$s"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",603,"^:>",["^L",["^:M","^:?","^:@"]],"^9",603,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$s"]]]]],"^O","Returns true if the given initial state was returned from a call to get-initial-state. This is used by internal\n  algorithms when interpreting initial state shorthand in `defsc`."],"~$get-raw-react-prop",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",244,"^8",7,"^9",244,"^:",25,"^P",["^Q",["^:8",["^Q",[["~$c","~$k"]]]]],"^O","GET a RAW react prop. Used internally. Safe in CLJC, but equivalent to `(gobj/getValueByKeys this \"props\" (name k)`."],"^S","^3T","^6","com/fulcrologic/fulcro/components.cljc","^:",25,"^::",["^Q",[["~$c","~$k"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",244,"^:>","^:?","^9",244,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$c","~$k"]]]]],"^O","GET a RAW react prop. Used internally. Safe in CLJC, but equivalent to `(gobj/getValueByKeys this \"props\" (name k)`."],"~$set-query*",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1039,"^8",7,"^9",1039,"^:",17,"^P",["^Q",["^:8",["^Q",[["^:D","^:L",["^ ","^;2",["^:I"],"^1N","^R"]]]]]],"^O","Put a query in app state.\n\n  NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\n  up an initial app state."],"^S","^45","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^::",["^Q",[["^:D","^:L","~$p__65006"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1039,"^:>",["^L",[null,"^:Q","^:?","^:@"]],"^9",1039,"^:A",3,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:D","^:L",["^ ","^;2",["^:I"],"^1N","^R"]]]]]],"^O","Put a query in app state.\n\n  NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\n  up an initial app state."],"~$*app*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",41,"^8",16,"^9",41,"^:",21,"^;M",true],"^S","^42","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^8",1,"^;M",true,"^7",41,"^9",41,"^:U","^:?"],"~$prop->classes",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1105,"^8",7,"^9",1105,"^:",20,"^P",["^Q",["^:8",["^Q",[["~$x","~$prop"]]]]],"^O","Get all component classes that query for the given prop.\n  `x` can be anything `any->app` is ok with.\n\n  Returns all classes that query for that prop (or ident)"],"^S","^4L","^6","com/fulcrologic/fulcro/components.cljc","^:",20,"^::",["^Q",[["~$x","^<I"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1105,"^:>",["^L",["^:?","^:@"]],"^9",1105,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x","^<I"]]]]],"^O","Get all component classes that query for the given prop.\n  `x` can be anything `any->app` is ok with.\n\n  Returns all classes that query for that prop (or ident)"],"~$link-element",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",971,"^8",7,"^9",971,"^:",19,"^P",["^Q",["^:8",["^Q",[["~$element"]]]]],"^O","Part of internal implementation of dynamic queries."],"^S","^4N","^6","com/fulcrologic/fulcro/components.cljc","^:",19,"^::",["^Q",[["^<K"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",971,"^:>","^:?","^9",971,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^<K"]]]]],"^O","Part of internal implementation of dynamic queries."],"~$transact!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",893,"^8",7,"^9",893,"^:",16,"^P",["^Q",["^:8",["^Q",[["~$app-or-component","^:X","~$options"],["~$app-or-comp","^:X"]]]]],"^O","Submit a transaction for processing.\n\n  The underlying transaction system is pluggable, but the *default* supported options are:\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\n  - `:component` - React element. Set automatically if you call this function using a component.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n  - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\n    the network portion of the transaction (assuming it has not already completed).\n  - `:compressible?` - boolean. Check compressible-transact! docs.\n  - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\n  a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\n  event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\n  will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\n  be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\n  your own global render using `app/schedule-render!`.\n  ` `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\n  when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\n  before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\n  be set to true for any transactions run within mutation action sections. You can affect the default for this value\n  in a dynamic scope by binding `*after-render*` to true\n\n  NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\n  supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\n  influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^<M","^:X","^<N"],["^<O","^:X"]],"^P",["^Q",[["^<M","^:X","^<N"],["^<O","^:X"]]],"^:<",["^Q",[null,null]]]],"^S","^4<","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^<M","^:X","^<N"],["^<O","^:X"]],"^P",["^Q",[["^<M","^:X","^<N"],["^<O","^:X"]]],"^:<",["^Q",[null,null]]],"^::",[["^<M","^:X","^<N"],["^<O","^:X"]],"^:;",null,"^:[",3,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",3,"^:=",false,"^:U",["^L",["^:?","^:@"]]],["^ ","^:[",2,"^:=",false,"^:U",["^L",["^:?","^:@"]]]],"^7",893,"^9",893,"^:A",3,"^:B",true,"^P",["^Q",[["^<M","^:X","^<N"],["^<O","^:X"]]],"^O","Submit a transaction for processing.\n\n  The underlying transaction system is pluggable, but the *default* supported options are:\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\n  - `:component` - React element. Set automatically if you call this function using a component.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n  - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\n    the network portion of the transaction (assuming it has not already completed).\n  - `:compressible?` - boolean. Check compressible-transact! docs.\n  - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\n  a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\n  event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\n  will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\n  be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\n  your own global render using `app/schedule-render!`.\n  ` `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\n  when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\n  before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\n  be set to true for any transactions run within mutation action sections. You can affect the default for this value\n  in a dynamic scope by binding `*after-render*` to true\n\n  NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\n  supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\n  influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$tunnel-props!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",632,"^8",7,"^9",632,"^:",20,"^P",["^Q",["^:8",["^Q",[["^;6","~$new-props"]]]]],"^O","CLJS-only.  When the `component` is mounted this will tunnel `new-props` to that component through React `setState`. If you're in\n  an event handler, this means the tunnelling will be synchronous, and can be useful when updating props that could affect DOM\n  inputs. This is typically used internally (see `transact!!`, and should generally not be used in applications unless it is a very advanced\n  scenario and you've studied how this works. NOTE: You should `tick!` the application clock and bind *denormalize-time*\n  when generating `new-props` so they are properly time-stamped by `db->tree`, or manually add time to `new-props`\n  using `fdn/with-time` directly."],"^S","^4B","^6","com/fulcrologic/fulcro/components.cljc","^:",20,"^::",["^Q",[["^;6","^<Q"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",632,"^:>",["^L",["^;S","^:@"]],"^9",632,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;6","^<Q"]]]]],"^O","CLJS-only.  When the `component` is mounted this will tunnel `new-props` to that component through React `setState`. If you're in\n  an event handler, this means the tunnelling will be synchronous, and can be useful when updating props that could affect DOM\n  inputs. This is typically used internally (see `transact!!`, and should generally not be used in applications unless it is a very advanced\n  scenario and you've studied how this works. NOTE: You should `tick!` the application clock and bind *denormalize-time*\n  when generating `new-props` so they are properly time-stamped by `db->tree`, or manually add time to `new-props`\n  using `fdn/with-time` directly."],"~$has-pre-merge?",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",237,"^8",7,"^9",237,"^:",21,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]],"^:U","^:M"],"^S","^4:","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^::",["^Q",[["^;6"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",237,"^:>","^:M","^9",237,"^:A",1,"^:U","^:M","^:B",true,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]]],"~$*depth*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",43,"^8",16,"^9",43,"^:",23,"^;M",true],"^S","^4D","^6","com/fulcrologic/fulcro/components.cljc","^:",23,"^8",1,"^;M",true,"^7",43,"^9",43,"^:U","^:?"],"~$get-query",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",684,"^8",7,"^9",684,"^:",16,"^P",["^Q",["^:8",["^Q",[["^:L"],["^:L","^:D"]]]]],"^O","Get the query for the given class or factory. If called without a state map, then you'll get the declared static\n  query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\n  the current dynamically-set query according to that state.","^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^:L"],["^:L","^:D"]],"^P",["^Q",[["^:L"],["^:L","^:D"]]],"^:<",["^Q",[null,null]]]],"^S","^4O","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^:L"],["^:L","^:D"]],"^P",["^Q",[["^:L"],["^:L","^:D"]]],"^:<",["^Q",[null,null]]],"^::",[["^:L"],["^:L","^:D"]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",1,"^:=",false,"^:U","^:?"],["^ ","^:[",2,"^:=",false]],"^7",684,"^9",684,"^:A",2,"^:B",true,"^P",["^Q",[["^:L"],["^:L","^:D"]]],"^O","Get the query for the given class or factory. If called without a state map, then you'll get the declared static\n  query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\n  the current dynamically-set query according to that state."],"~$component-instance?",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",110,"^8",7,"^9",110,"^:",26,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Returns true if the argument is a component. A component is defined as a *mounted component*.\n   This function returns false for component classes, and also returns false for the output of a Fulcro component factory.","^:U","^:M"],"^S","^4J","^6","com/fulcrologic/fulcro/components.cljc","^:",26,"^::",["^Q",[["~$x"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",110,"^:>","^:M","^9",110,"^:A",1,"^:U","^:M","^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Returns true if the argument is a component. A component is defined as a *mounted component*.\n   This function returns false for component classes, and also returns false for the output of a Fulcro component factory."],"~$link-query",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1014,"^8",7,"^9",1014,"^:",17,"^P",["^Q",["^:8",["^Q",[["^:I"]]]]],"^O","Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\n  with their query ID."],"^S","^4G","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^::",["^Q",[["^:I"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1014,"^:>",["^L",["^:Q","^;W","^:@"]],"^9",1014,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:I"]]]]],"^O","Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\n  with their query ID."],"~$use-effect",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^:",30,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["~$f"],["~$f","~$deps"]],"^P",["^Q",[["~$f"],["~$f","^<X"]]],"^:<",["^Q",[null,null]]],"^8",20,"^7",51,"~:deprecated",true,"^9",51,"^P",["^Q",["^:8",["^Q",[["~$f"],["~$f","^<X"]]]]],"^O","DEPRECATED: use from com.fulcrologic.fulcro.react.hooks\n\n  A simple wrapper around React/useEffect that auto-converts cljs arrays of deps to js."],"^S","^4;","^6","com/fulcrologic/fulcro/components.cljc","^:",30,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["~$f"],["~$f","^<X"]],"^P",["^Q",[["~$f"],["~$f","^<X"]]],"^:<",["^Q",[null,null]]],"^::",[["~$f"],["~$f","^<X"]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",1,"^:=",false,"^:U","^;S"],["^ ","^:[",2,"^:=",false,"^:U","^;S"]],"^7",51,"^<Y",true,"^9",51,"^:A",2,"^:B",true,"^P",["^Q",[["~$f"],["~$f","^<X"]]],"^O","DEPRECATED: use from com.fulcrologic.fulcro.react.hooks\n\n  A simple wrapper around React/useEffect that auto-converts cljs arrays of deps to js."],"~$configure-component!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",397,"^8",9,"^9",397,"^:",29,"^P",["^Q",["^:8",["^Q",[["^;Y","~$fqkw","^<N"]]]]],"^O","Configure the given `cls` (a function) to act as a react component within the Fulcro ecosystem.\n\n    cls - A js function (in clj, this is ignored)\n    fqkw - A keyword that shares the exact fully-qualified name of the component class\n    options - A component options map (no magic) containing things like `:query` and `:ident`.\n\n\n    NOTE: the `options` map expects proper function signatures for:\n\n    `:query` - (fn [this] ...)\n    `:ident` - (fn [this props] ...)\n    `:initial-state` - (fn [cls params] ...)\n\n    Returns (and registers) a new react class.\n    "],"^S","^4C","^6","com/fulcrologic/fulcro/components.cljc","^:",29,"^::",["^Q",[["^;Y","^<[","^<N"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",3,"^:=",false,"^7",397,"^:>","^:?","^9",397,"^:A",3,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;Y","^<[","^<N"]]]]],"^O","Configure the given `cls` (a function) to act as a react component within the Fulcro ecosystem.\n\n    cls - A js function (in clj, this is ignored)\n    fqkw - A keyword that shares the exact fully-qualified name of the component class\n    options - A component options map (no magic) containing things like `:query` and `:ident`.\n\n\n    NOTE: the `options` map expects proper function signatures for:\n\n    `:query` - (fn [this] ...)\n    `:ident` - (fn [this props] ...)\n    `:initial-state` - (fn [cls params] ...)\n\n    Returns (and registers) a new react class.\n    "],"~$configure-hooks-component!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",770,"^8",7,"^9",770,"^:",33,"^P",["^Q",["^:8",["^Q",[["~$f","^<N"]]]]],"^O","Configure a function `(f [this fulcro-props] ...)` to work properly as a hook-based react component. This can be\n  used in leiu of `defsc` to create a component, where `options` is the (non-magic) map of component options\n  (i.e. :query is a `(fn [this])`, not a vector).\n\n  IMPORTANT: Your options must include `:componentName`, a fully-qualified keyword to use in the component registry.\n\n  Returns a new function that wraps yours (to properly extract Fulcro props) and installs the proper Fulcro component\n  options on the low-level function so that it will act properly when used within React as a hook-based component.\n\n  (def MyComponent\n    (configure-hooks-component!\n      (fn [this props]\n        (let [[v set-v!] (use-state this 0)\n          (dom/div ...)))\n      {:query ... :ident (fn [_ props] ...) :componentName ::MyComponent}))\n\n  (def ui-my-component (comp/factory MyComponent {:keyfn :id})\n\n  This can be used to easily generate dynamic components at runtime (as can `configure-component!`).\n  "],"^S","^50","^6","com/fulcrologic/fulcro/components.cljc","^:",33,"^::",["^Q",[["~$f","^<N"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",770,"^:>","^:?","^9",770,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$f","^<N"]]]]],"^O","Configure a function `(f [this fulcro-props] ...)` to work properly as a hook-based react component. This can be\n  used in leiu of `defsc` to create a component, where `options` is the (non-magic) map of component options\n  (i.e. :query is a `(fn [this])`, not a vector).\n\n  IMPORTANT: Your options must include `:componentName`, a fully-qualified keyword to use in the component registry.\n\n  Returns a new function that wraps yours (to properly extract Fulcro props) and installs the proper Fulcro component\n  options on the low-level function so that it will act properly when used within React as a hook-based component.\n\n  (def MyComponent\n    (configure-hooks-component!\n      (fn [this props]\n        (let [[v set-v!] (use-state this 0)\n          (dom/div ...)))\n      {:query ... :ident (fn [_ props] ...) :componentName ::MyComponent}))\n\n  (def ui-my-component (comp/factory MyComponent {:keyfn :id})\n\n  This can be used to easily generate dynamic components at runtime (as can `configure-component!`).\n  "],"~$raw->newest-props",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",260,"^8",7,"^9",260,"^:",24,"^P",["^Q",["^:8",["^Q",[["~$raw-props","~$raw-state"]]]]],"^O","Using raw react props/state returns the newest Fulcro props. This is part of \"props tunneling\", where component\n  local state is leveraged as a communication mechanism of updated props directly to a component that has an ident.\n  This function will return the correct version of props based on timestamps."],"^S","^4[","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^::",["^Q",[["^=2","^=3"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",260,"^:>","^:?","^9",260,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^=2","^=3"]]]]],"^O","Using raw react props/state returns the newest Fulcro props. This is part of \"props tunneling\", where component\n  local state is leveraged as a communication mechanism of updated props directly to a component that has an ident.\n  This function will return the correct version of props based on timestamps."],"~$get-query-by-id",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",679,"^8",7,"^9",679,"^:",22,"^P",["^Q",["^:8",["^Q",[["^:D","^;H","~$queryid"]]]]]],"^S","^5K","^6","com/fulcrologic/fulcro/components.cljc","^:",22,"^::",["^Q",[["^:D","^;H","^=5"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",679,"^:>",["^L",["^:Q","^;W","^:@"]],"^9",679,"^:A",3,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:D","^;H","^=5"]]]]]],"~$transact!!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",941,"^8",7,"^9",941,"^:",17,"^P",["^Q",["^:8",["^Q",[["^;6","^:X"],["^;6","^:X","^<N"]]]]],"^O","Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\n\n  Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\n  transaction run on the calling thread, and new props are immediately made available to the calling component via\n  \"props tunneling\" (a behind-the-scenes mechanism using js/setState).\n\n  This mode is meant to be used in form input event handlers, since React is designed to only work properly with\n  raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\n  unexpectedly.\n\n  WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\n  that has an ident.\n\n  If you're using this, you can also set the compiler option:\n\n  ```\n  :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\n  ```\n\n  to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\n\n  WARNING: Syncrhonous rendering does *not* refresh the full UI, only the component.\n  ","^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^;6","^:X"],["^;6","^:X","^<N"]],"^P",["^Q",[["^;6","^:X"],["^;6","^:X","^<N"]]],"^:<",["^Q",[null,null]]]],"^S","^58","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^:Z",["^ ","^:=",false,"^:[",3,"^:A",3,"^::",[["^;6","^:X"],["^;6","^:X","^<N"]],"^P",["^Q",[["^;6","^:X"],["^;6","^:X","^<N"]]],"^:<",["^Q",[null,null]]],"^::",[["^;6","^:X"],["^;6","^:X","^<N"]],"^:;",null,"^:[",3,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",2,"^:=",false,"^:U","^:?"],["^ ","^:[",3,"^:=",false,"^:U",["^L",["^:?","^:@"]]]],"^7",941,"^9",941,"^:A",3,"^:B",true,"^P",["^Q",[["^;6","^:X"],["^;6","^:X","^<N"]]],"^O","Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\n\n  Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\n  transaction run on the calling thread, and new props are immediately made available to the calling component via\n  \"props tunneling\" (a behind-the-scenes mechanism using js/setState).\n\n  This mode is meant to be used in form input event handlers, since React is designed to only work properly with\n  raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\n  unexpectedly.\n\n  WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\n  that has an ident.\n\n  If you're using this, you can also set the compiler option:\n\n  ```\n  :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\n  ```\n\n  to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\n\n  WARNING: Syncrhonous rendering does *not* refresh the full UI, only the component.\n  "],"~$computed-factory",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",872,"^8",7,"^9",872,"^:",23,"^P",["^Q",["^:8",["^Q",[["^;H"],["^;H","^<N"]]]]],"^O","Similar to factory, but returns a function with the signature\n  [props computed & children] instead of default [props & children].\n  This makes easier to send computed.","^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^;H"],["^;H","^<N"]],"^P",["^Q",[["^;H"],["^;H","^<N"]]],"^:<",["^Q",[null,null]]]],"^S","^51","^6","com/fulcrologic/fulcro/components.cljc","^:",23,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^;H"],["^;H","^<N"]],"^P",["^Q",[["^;H"],["^;H","^<N"]]],"^:<",["^Q",[null,null]]],"^::",[["^;H"],["^;H","^<N"]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",1,"^:=",false,"^:U","^:?"],["^ ","^:[",2,"^:=",false,"^:U","^;?"]],"^7",872,"^9",872,"^:A",2,"^:B",true,"^P",["^Q",[["^;H"],["^;H","^<N"]]],"^O","Similar to factory, but returns a function with the signature\n  [props computed & children] instead of default [props & children].\n  This makes easier to send computed."],"~$register-component!",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",85,"^8",7,"^9",85,"^:",26,"^P",["^Q",["^:8",["^Q",[["~$k","~$component-class"]]]]],"^O","Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\n  that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\n  Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc."],"^S","^56","^6","com/fulcrologic/fulcro/components.cljc","^:",26,"^::",["^Q",[["~$k","^=9"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",85,"^9",85,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$k","^=9"]]]]],"^O","Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\n  that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\n  Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc."],"~$get-query-id",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",673,"^8",8,"^9",673,"^:",20,"~:private",true,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]],"^O","Get the query id that is cached in the component's props."],"^=;",true,"^S","^4V","^6","com/fulcrologic/fulcro/components.cljc","^:",20,"^::",["^Q",[["^;6"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",673,"^:>","^:?","^9",673,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]],"^O","Get the query id that is cached in the component's props."],"~$force-children",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",93,"^8",7,"^9",93,"^:",21,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Utility function that will force a lazy sequence of children (recursively) into realized\n  vectors (React cannot deal with lazy seqs in production mode)"],"^S","^4S","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^::",["^Q",[["~$x"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",93,"^:>",["^L",[null,"^:Q","^:?"]],"^9",93,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Utility function that will force a lazy sequence of children (recursively) into realized\n  vectors (React cannot deal with lazy seqs in production mode)"],"~$registry-key->class",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",145,"^8",7,"^9",145,"^:",26,"^P",["^Q",["^:8",["^Q",[["~$classname"]]]]],"^O","Look up the given component in Fulcro's global component registry. Will only be able to find components that have\n  been (transitively) required by your application.\n\n  `classname` can be a fully-qualified keyword or symbol."],"^S","^4Q","^6","com/fulcrologic/fulcro/components.cljc","^:",26,"^::",["^Q",[["^=>"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",145,"^:>",["^L",["^:?","^:@"]],"^9",145,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^=>"]]]]],"^O","Look up the given component in Fulcro's global component registry. Will only be able to find components that have\n  been (transitively) required by your application.\n\n  `classname` can be a fully-qualified keyword or symbol."],"~$factory",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",825,"^8",7,"^9",825,"^:",14,"^P",["^Q",["^:8",["^Q",[["^;H"],["^;H",["^ ","^;2",["~$keyfn","^<="],"^1N","^;3"]]]]]],"^O","Create a factory constructor from a component class created with\n   defsc.","^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^;H"],["^;H",["^ ","^;2",["^=@","^<="],"^1N","^;3"]]],"^P",["^Q",[["^;H"],["^;H",["^ ","^;2",["^=@","^<="],"^1N","^;3"]]]],"^:<",["^Q",[null,null]]]],"^S","^4R","^6","com/fulcrologic/fulcro/components.cljc","^:",14,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^;H"],["^;H",["^ ","^;2",["^=@","^<="],"^1N","^;3"]]],"^P",["^Q",[["^;H"],["^;H",["^ ","^;2",["^=@","^<="],"^1N","^;3"]]]],"^:<",["^Q",[null,null]]],"^::",[["^;H"],["^;H",["^ ","^;2",["^=@","^<="],"^1N","^;3"]]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",1,"^:=",false,"^:U","^:?"],["^ ","^:[",2,"^:=",false,"^:U",["^L",["^:Q","^;W","^:@"]]]],"^7",825,"^9",825,"^:A",2,"^:B",true,"^P",["^Q",[["^;H"],["^;H",["^ ","^;2",["^=@","^<="],"^1N","^;3"]]]],"^O","Create a factory constructor from a component class created with\n   defsc."],"~$class->all",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1113,"^8",7,"^9",1113,"^:",17,"^P",["^Q",["^:8",["^Q",[["~$x","^;H"]]]]],"^O","Get all of the on-screen component instances from the indexes that have the type of the component class.\n  `x` can be anything `any->app` is ok with."],"^S","^4Y","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^::",["^Q",[["~$x","^;H"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1113,"^:>",["^L",["^:?","^:@"]],"^9",1113,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x","^;H"]]]]],"^O","Get all of the on-screen component instances from the indexes that have the type of the component class.\n  `x` can be anything `any->app` is ok with."],"~$make-state-map",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",711,"^8",7,"^9",711,"^:",21,"^P",["^Q",["^:8",["^Q",[["^:F","~$children-by-query-key","^:H"]]]]],"^O","Build a component's initial state using the defsc initial-state-data from\n  options, the children from options, and the params from the invocation of get-initial-state."],"^S","^4U","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^::",["^Q",[["^:F","^=C","^:H"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",711,"^:>",["^L",[null,"^:Q","^:?"]],"^9",711,"^:A",3,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:F","^=C","^:H"]]]]],"^O","Build a component's initial state using the defsc initial-state-data from\n  options, the children from options, and the params from the invocation of get-initial-state."],"~$has-feature?",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",233,"^8",7,"^9",233,"^:",19,"^P",["^Q",["^:8",["^Q",[["^;6","~$option-key"]]]]],"^:U","^:M"],"^S","^5A","^6","com/fulcrologic/fulcro/components.cljc","^:",19,"^::",["^Q",[["^;6","^=E"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",233,"^:>","^:M","^9",233,"^:A",2,"^:U","^:M","^:B",true,"^P",["^Q",["^:8",["^Q",[["^;6","^=E"]]]]]],"~$use-state",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",59,"^8",20,"^9",59,"^:",29,"^<Y",true,"^P",["^Q",["^:8",["^Q",[["~$initial-value"]]]]],"^O","DEPRECATED: use from com.fulcrologic.fulcro.react.hooks\n  A simple wrapper around React/useState. Returns a cljs vector for easy destructuring"],"^S","^53","^6","com/fulcrologic/fulcro/components.cljc","^:",29,"^::",["^Q",[["^=G"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",59,"^<Y",true,"^:>","^:?","^9",59,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^=G"]]]]],"^O","DEPRECATED: use from com.fulcrologic.fulcro.react.hooks\n  A simple wrapper around React/useState. Returns a cljs vector for easy destructuring"],"~$component-registry",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",24,"^8",20,"^9",24,"^:",38,"^=;",true],"^=;",true,"^S","^5I","^6","com/fulcrologic/fulcro/components.cljc","^:",38,"^8",1,"^7",24,"^9",24,"^:U","~$cljs.core/Atom"],"~$*query-state*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",32,"^8",16,"^9",32,"^:",29,"^;M",true],"^S","^5@","^6","com/fulcrologic/fulcro/components.cljc","^:",29,"^8",1,"^;M",true,"^7",32,"^9",32,"^:U","^:?"],"~$*after-render*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",886,"^8",16,"^9",886,"^:",30,"^;M",true],"^S","^5H","^6","com/fulcrologic/fulcro/components.cljc","^:",30,"^8",1,"^;M",true,"^7",886,"^9",886,"^:U","^:?","^O","Dynamic var that affects the activation of transactions run via `transact!`. Defaults to false. When set to true\n   this option prevents a transaction from running until after the next render is complete. This typically should not be set\n   to true in scenarios where you are unsure if a render will occur, since that could make the transaction appear to\n   \"hang\"."],"~$class->registry-key",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",140,"^8",7,"^9",140,"^:",26,"^P",["^Q",["^:8",["^Q",[["^;H"]]]]],"^O","Returns the registry key for the given component class."],"^S","^5;","^6","com/fulcrologic/fulcro/components.cljc","^:",26,"^::",["^Q",[["^;H"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",140,"^:>","^:?","^9",140,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;H"]]]]],"^O","Returns the registry key for the given component class."],"~$component?",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",120,"^8",6,"^9",120,"^:",16],"^S","^44","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^8",1,"^7",120,"^9",120,"^:U","^:M","^O","Returns true if the argument is a component instance.\n\n   DEPRECATED for terminology clarity. Use `component-instance?` instead."],"~$component->state-map",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1126,"^8",7,"^9",1126,"^:",27,"^P",["^Q",["^:8",["^Q",[["^:J"]]]]],"^O","Returns the current value of the state map via a component instance. Note that it is not safe to render\n  arbitrary data from the state map since Fulcro will have no idea that it should refresh a component that\n  does so; however, it is sometimes useful to look at the state map for information that doesn't\n  change over time."],"^S","^5F","^6","com/fulcrologic/fulcro/components.cljc","^:",27,"^::",["^Q",[["^:J"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1126,"^:>",["^L",["^:?","^:@"]],"^9",1126,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:J"]]]]],"^O","Returns the current value of the state map via a component instance. Note that it is not safe to render\n  arbitrary data from the state map since Fulcro will have no idea that it should refresh a component that\n  does so; however, it is sometimes useful to look at the state map for information that doesn't\n  change over time."],"~$get-indexes",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1089,"^8",7,"^9",1089,"^:",18,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Get all of the indexes from a component instance or app. See also `ident->any`, `class->any`, etc."],"^S","^5>","^6","com/fulcrologic/fulcro/components.cljc","^:",18,"^::",["^Q",[["~$x"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1089,"^:>",["^L",["^:?","^:@"]],"^9",1089,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x"]]]]],"^O","Get all of the indexes from a component instance or app. See also `ident->any`, `class->any`, etc."],"^:9",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",238,"^8",7,"^9",238,"^:",12,"^P",["^Q",["^:8",["^Q",[["^:J","^;5"]]]]]],"^S","^59","^6","com/fulcrologic/fulcro/components.cljc","^:",12,"^::",["^Q",[["^:J","^;5"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",238,"^:>",["^L",["^:?","^:@"]],"^9",238,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:J","^;5"]]]]]],"^<9",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",224,"^8",7,"^9",224,"^:",24,"^P",["^Q",["^:8",["^Q",[["~$instance-or-class","~$&","~$ks"]]]]],"^O","Returns the map of options that was specified (via `defsc`) for the component class.","^:Z",["^ ","^:=",true,"^:[",1,"^:A",1,"^::",[["^Q",["^=P","^=Q"]]],"^P",["^Q",[["^=P","~$&","^=Q"]]],"^:<",["^Q",[null]]]],"^S","^5:","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^:Z",["^ ","^:=",true,"^:[",1,"^:A",1,"^::",[["^Q",["^=P","^=Q"]]],"^P",["^Q",[["^=P","~$&","^=Q"]]],"^:<",["^Q",[null]]],"^::",[["^Q",["^=P","^=Q"]]],"^:;",null,"^:[",1,"^:<",["^Q",[null]],"^8",1,"^:=",true,"^;0",[["^ ","^:[",1,"^:=",true,"^:U",["^L",[null,"^:?"]]]],"^7",224,"^:>","^:?","^9",224,"^:A",1,"^:B",true,"^P",["^Q",[["^=P","~$&","^=Q"]]],"^O","Returns the map of options that was specified (via `defsc`) for the component class."],"~$shared",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",270,"^8",7,"^9",270,"^:",13,"^P",["^Q",["^:8",["^Q",[["~$comp-or-app"],["^=S","^<2"]]]]],"^O","Return the global shared properties of the root. See :shared and\n   :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\n   `app/update-shared!`.\n\n   This function attempts to rely on the dynamic var *shared* (first), but will make a best-effort of\n   finding shared props when run within a component's render or lifecycle. Passing your app will\n   ensure this returns the current shared props.","^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^=S"],["^=S","^<2"]],"^P",["^Q",[["^=S"],["^=S","^<2"]]],"^:<",["^Q",[null,null]]]],"^S","^3Z","^6","com/fulcrologic/fulcro/components.cljc","^:",13,"^:Z",["^ ","^:=",false,"^:[",2,"^:A",2,"^::",[["^=S"],["^=S","^<2"]],"^P",["^Q",[["^=S"],["^=S","^<2"]]],"^:<",["^Q",[null,null]]],"^::",[["^=S"],["^=S","^<2"]],"^:;",null,"^:[",2,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^;0",[["^ ","^:[",1,"^:=",false,"^:U","^:?"],["^ ","^:[",2,"^:=",false,"^:U",["^L",[null,"^:?","^:@"]]]],"^7",270,"^9",270,"^:A",2,"^:B",true,"^P",["^Q",[["^=S"],["^=S","^<2"]]],"^O","Return the global shared properties of the root. See :shared and\n   :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\n   `app/update-shared!`.\n\n   This function attempts to rely on the dynamic var *shared* (first), but will make a best-effort of\n   finding shared props when run within a component's render or lifecycle. Passing your app will\n   ensure this returns the current shared props."],"~$depth",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",242,"^8",7,"^9",242,"^:",12,"^P",["^Q",["^:8",["^Q",[["^:J"]]]]]],"^S","^5?","^6","com/fulcrologic/fulcro/components.cljc","^:",12,"^::",["^Q",[["^:J"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",242,"^:>","^:?","^9",242,"^:A",1,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^:J"]]]]]],"~$ident->components",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1095,"^8",7,"^9",1095,"^:",24,"^P",["^Q",["^:8",["^Q",[["~$x","^:9"]]]]],"^O","Return all on-screen component instances that are rendering the data for a given ident. `x` is anything any->app accepts."],"^S","^3O","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^::",["^Q",[["~$x","^:9"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",1095,"^:>",["^L",["^:?","^:@"]],"^9",1095,"^:A",2,"^:B",true,"^P",["^Q",["^:8",["^Q",[["~$x","^:9"]]]]],"^O","Return all on-screen component instances that are rendering the data for a given ident. `x` is anything any->app accepts."],"~$create-element",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",805,"^8",8,"^9",805,"^:",22,"^=;",true,"^P",["^Q",["^:8",["^Q",[["^;H","^;5","^;@"]]]]],"^O","Create a react element for a Fulcro class.  In CLJ this returns the same thing as a mounted instance, whereas in CLJS it is an\n  element (which has yet to instantiate an instance)."],"^=;",true,"^S","^3U","^6","com/fulcrologic/fulcro/components.cljc","^:",22,"^::",["^Q",[["^;H","^;5","^;@"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",805,"^:>","^:?","^9",805,"^:A",3,"^:B",true,"^P",["^Q",["^:8",["^Q",[["^;H","^;5","^;@"]]]]],"^O","Create a react element for a Fulcro class.  In CLJ this returns the same thing as a mounted instance, whereas in CLJS it is an\n  element (which has yet to instantiate an instance)."],"~$has-initial-app-state?",["^ ","^:7",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",234,"^8",7,"^9",234,"^:",29,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]],"^:U","^:M"],"^S","^5C","^6","com/fulcrologic/fulcro/components.cljc","^:",29,"^::",["^Q",[["^;6"]]],"^:;",null,"^:<",["^Q",[null,null]],"^8",1,"^:=",false,"^7",234,"^:>","^:M","^9",234,"^:A",1,"^:U","^:M","^:B",true,"^P",["^Q",["^:8",["^Q",[["^;6"]]]]]]],"^1I",["^ ","^V","^V","^1<","^1<","^>","^?","^J","^J","^18","^19","~$s","^?","^19","^19","^?","^?"],"~:cljs.analyzer/constants",["^ ","^1G",["^L",["~:children","~:fulcro$extra_props","~:fulcro$class","~:componentDidUpdate","~:props-middleware","~:drop-component!","~:com.fulcrologic.fulcro.application/config","~:pre-merge","~:react-key","^2E","~:componentDidCatch","~:computed","~:fulcro$app","~:UNSAFE_componentWillMount","~:else","~:index-root!","~:com.fulcrologic.fulcro.application/indexes","~:ref","~:synchronous?","~:displayName","~:cljs$lang$ctorPrWriter","~:getSnapshotBeforeUpdate","~:queryid","~:warn","~:tx!","~:UNSAFE_componentWillUpdate","~:qualifier","~:fulcro$registryKey","~:params","~:type","~:keyfn","~:index-component!","~:state","~:getDerivedStateFromProps","~:getDerivedStateFromError","~:prop->classes","~:componentName","~:force-root?","~:componentWillUnmount","~:componentWillReceiveProps","~:after-render?","~:component","~:compressible?","~:schedule-render!","~:com.fulcrologic.fulcro.application/state-atom","~:fulcro$depth","~:otherwise","~:class->components","~:shouldComponentUpdate","~:fatal","~:render","~:cljs$lang$ctorStr","~:com.fulcrologic.fulcro.application/runtime-atom","~:componentWillUpdate","~:id","~:class","~:optimistic?","~:fulcro$options","~:ident","~:UNSAFE_componentWillReceiveProps","~:componentDidMount","~:error","~:ident->components","~:component-key","~:fulcro$value","~:initial-state","~:fulcro.client.primitives/computed","~:query","~:external-config","~:com.fulcrologic.fulcro.application/shared-props","~:initLocalState","~:com.fulcrologic.fulcro.components/queries","~:fulcro$isComponent","~:auto","~:p","~:cljs$lang$type","~:render-middleware","~:com.fulcrologic.fulcro.algorithms.merge/not-found","~:componentWillMount","~:com.fulcrologic.fulcro.components/component-class","~:props"]],"~:order",["^>:","^?N","^2E","^>?","^>G","^>Z","^?B","^?O","^=Z","^?@","^>L","^?9","^?A","^?:","^?C","^>4","^>Y","^>X","^>8","^?4","^?E","^?<","^>K","^>0","^>2","^?1","~:p","^?I","^>R","^?F","^?M","^>6","^>9","^>A","^>E","^>M","^>N","^>S","^?0","^?2","^?5","^?;","^?H","^>I","^=[","^?J","^?3","^>@","^>P","^?=","^=Y","^>7","^>C","^?L","^>F","^?G","^??","^>U","^>B","^?7","^?K","^>J","^>5","^>=","^>1","^>D","^>T","^>>","^?6","^>H","^>;","^>W","^>Q","^><","^?>","^>O","^>[","^?8","^>V","^>3","^?D"]],"^1P",["^ ","^1I",["^L",[]],"^1H",["^L",[]]],"^1Q",["^ "],"^1R",["^1?","^1<","^1>","^1@","^17","^?","^19","^1F","^1D","^1B","^1;","^14","^J","^16"]],"^U","^V","~:ns-specs",["^ ","^?N","^2E"],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^5M",[["^?S","~:static-fns"],true,["^?S","~:shadow-tweaks"],null,["^?S","~:source-map-inline"],null,["^?S","~:elide-asserts"],false,["^?S","~:optimize-constants"],null,["^?S","^1W"],null,["^?S","^?D"],["^ ","~:fulcro",["^ ","~:wrap-inputs?",false]],["^?S","~:tooling-config"],null,["^?S","~:emit-constants"],null,["^?S","~:load-tests"],null,["^?S","~:form-size-threshold"],null,["^?S","~:data-readers"],null,["^?S","~:infer-externs"],"^?I",["^?S","^1Y"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^?S","~:fn-invoke-direct"],null,["^?S","~:source-map"],true]]]