["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.denormalize');\ncom.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = (0);\n/**\n * Is the given `v` a link ref query (e.g. `[:table '_]) element.\n */\ncom.fulcrologic.fulcro.algorithms.denormalize.link_ref_QMARK_ = (function com$fulcrologic$fulcro$algorithms$denormalize$link_ref_QMARK_(v){\nreturn ((cljs.core.vector_QMARK_(v)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(v))) && ((cljs.core.first(v) instanceof cljs.core.Keyword)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"_\",\"_\",-1201019570,null),cljs.core.second(v))));\n});\n/**\n * Is the given `v` a lookup ref query (i.e. ident)?\n */\ncom.fulcrologic.fulcro.algorithms.denormalize.lookup_ref_QMARK_ = (function com$fulcrologic$fulcro$algorithms$denormalize$lookup_ref_QMARK_(v){\nreturn ((cljs.core.vector_QMARK_(v)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(v))) && ((cljs.core.first(v) instanceof cljs.core.Keyword)));\n});\n/**\n * Returns the value defined by the `ref` from `state-map`.  Works for link refs and\n *   lookup refs.\n */\ncom.fulcrologic.fulcro.algorithms.denormalize.follow_ref = (function com$fulcrologic$fulcro$algorithms$denormalize$follow_ref(state_map,p__56966){\nvar vec__56967 = p__56966;\nvar table = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56967,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56967,(1),null);\nvar ref = vec__56967;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"_\",\"_\",-1201019570,null),id)){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(state_map,table);\n} else {\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,ref);\n}\n});\n/**\n * Returns the key to use in results for the given ref (ident of lookup ref). For link refs this is just\n *   the first element, and for idents it is the ident.\n */\ncom.fulcrologic.fulcro.algorithms.denormalize.ref_key = (function com$fulcrologic$fulcro$algorithms$denormalize$ref_key(p__56974){\nvar vec__56976 = p__56974;\nvar table = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56976,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56976,(1),null);\nvar ref = vec__56976;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"_\",\"_\",-1201019570,null),id)){\nreturn table;\n} else {\nreturn ref;\n}\n});\n/**\n * Associates time metadata with the given props. This time can be used by rendering optimizations to decide when\n *   stale props are passed to it from a parent in cases where props tunnelling was used for localized refresh.\n */\ncom.fulcrologic.fulcro.algorithms.denormalize.with_time = (function com$fulcrologic$fulcro$algorithms$denormalize$with_time(props,t){\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(props,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.denormalize\",\"time\",\"com.fulcrologic.fulcro.algorithms.denormalize/time\",-375164969),t);\n});\n/**\n * Walk the given AST children (which MUST be prop nodes), and add their values from `current-entity`\n *   (if found).\n */\ncom.fulcrologic.fulcro.algorithms.denormalize.add_props_BANG_ = (function com$fulcrologic$fulcro$algorithms$denormalize$add_props_BANG_(transient_node,entity,ast_prop_children,state_map){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (n,p__57002){\nvar map__57003 = p__57002;\nvar map__57003__$1 = (((((!((map__57003 == null))))?(((((map__57003.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__57003.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__57003):map__57003);\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57003__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nif(com.fulcrologic.fulcro.algorithms.denormalize.lookup_ref_QMARK_(key)){\nvar temp__5733__auto__ = com.fulcrologic.fulcro.algorithms.denormalize.follow_ref(state_map,key);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar x = temp__5733__auto__;\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,com.fulcrologic.fulcro.algorithms.denormalize.ref_key(key),x);\n} else {\nreturn n;\n}\n} else {\nvar temp__5733__auto__ = ((cljs.core.coll_QMARK_(entity))?cljs.core.find(entity,key):false);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar entry = temp__5733__auto__;\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,key,cljs.core.second(entry));\n} else {\nreturn n;\n}\n}\n}),transient_node,ast_prop_children);\n});\n/**\n * Reduce the query depth on `join-node` that appears within the children of `parent-node`.\n */\ncom.fulcrologic.fulcro.algorithms.denormalize.reduce_depth = (function com$fulcrologic$fulcro$algorithms$denormalize$reduce_depth(parent_node,join_node){\nvar join_node_index = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,n){\nif((join_node === n)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n}),(0),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(parent_node));\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(parent_node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982),join_node_index,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.dec,(1)));\n});\ncom.fulcrologic.fulcro.algorithms.denormalize.add_join_BANG_ = (function com$fulcrologic$fulcro$algorithms$denormalize$add_join_BANG_(n,p__57020,entity,state_map,parent_node,idents_seen){\nvar map__57021 = p__57020;\nvar map__57021__$1 = (((((!((map__57021 == null))))?(((((map__57021.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__57021.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__57021):map__57021);\nvar join_node = map__57021__$1;\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57021__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57021__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar link_join_QMARK_ = com.fulcrologic.fulcro.algorithms.denormalize.lookup_ref_QMARK_(key);\nvar v = ((link_join_QMARK_)?com.fulcrologic.fulcro.algorithms.denormalize.follow_ref(state_map,key):cljs.core.get.cljs$core$IFn$_invoke$arity$2(entity,key));\nvar key__$1 = ((com.fulcrologic.fulcro.algorithms.denormalize.link_ref_QMARK_(key))?cljs.core.first(key):key);\nvar is_ref_QMARK_ = com.fulcrologic.fulcro.algorithms.denormalize.lookup_ref_QMARK_(v);\nvar join_entity = ((is_ref_QMARK_)?com.fulcrologic.fulcro.algorithms.denormalize.follow_ref(state_map,v):v);\nvar to_many_QMARK_ = (((!(is_ref_QMARK_))) && (cljs.core.vector_QMARK_(join_entity)));\nvar depth_based_QMARK_ = cljs.core.int_QMARK_(query);\nvar recursive_QMARK_ = ((depth_based_QMARK_) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null),query)));\nvar stop_recursion_QMARK_ = ((recursive_QMARK_) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((0),query)) || (((is_ref_QMARK_) && ((!(depth_based_QMARK_))) && (cljs.core.contains_QMARK_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(idents_seen,key__$1),v)))))));\nvar parent_node__$1 = ((((depth_based_QMARK_) && ((!(stop_recursion_QMARK_)))))?com.fulcrologic.fulcro.algorithms.denormalize.reduce_depth(parent_node,join_node):parent_node);\nvar target_node = ((recursive_QMARK_)?parent_node__$1:join_node);\nvar idents_seen__$1 = ((is_ref_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(idents_seen,key__$1,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentHashSet.EMPTY),v):idents_seen);\nif(stop_recursion_QMARK_){\nreturn n;\n} else {\nif(to_many_QMARK_){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,key__$1,cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$1((function (x){\nvar e = ((com.fulcrologic.fulcro.algorithms.denormalize.lookup_ref_QMARK_(x))?com.fulcrologic.fulcro.algorithms.denormalize.follow_ref(state_map,x):x);\nreturn (com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4(target_node,e,state_map,idents_seen__$1) : com.fulcrologic.fulcro.algorithms.denormalize.denormalize.call(null,target_node,e,state_map,idents_seen__$1));\n})),join_entity));\n} else {\nif(cljs.core.truth_(((recursive_QMARK_)?join_entity:false))){\nif(depth_based_QMARK_){\nvar join_node_index = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,n__$1){\nif((join_node === n__$1)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n}),(0),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(parent_node__$1));\nvar parent_node__$2 = cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(parent_node__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982),join_node_index,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.dec,(1)));\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,key__$1,(com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4(parent_node__$2,join_entity,state_map,idents_seen__$1) : com.fulcrologic.fulcro.algorithms.denormalize.denormalize.call(null,parent_node__$2,join_entity,state_map,idents_seen__$1)));\n} else {\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,key__$1,(com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4(parent_node__$1,join_entity,state_map,idents_seen__$1) : com.fulcrologic.fulcro.algorithms.denormalize.denormalize.call(null,parent_node__$1,join_entity,state_map,idents_seen__$1)));\n}\n} else {\nif(cljs.core.map_QMARK_(join_entity)){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,key__$1,(com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4(target_node,join_entity,state_map,idents_seen__$1) : com.fulcrologic.fulcro.algorithms.denormalize.denormalize.call(null,target_node,join_entity,state_map,idents_seen__$1)));\n} else {\nif(((cljs.core.contains_QMARK_(entity,key__$1)) && ((!(recursive_QMARK_))) && ((!(link_join_QMARK_))))){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,key__$1,v);\n} else {\nreturn n;\n\n}\n}\n}\n}\n}\n});\ncom.fulcrologic.fulcro.algorithms.denormalize.add_union_BANG_ = (function com$fulcrologic$fulcro$algorithms$denormalize$add_union_BANG_(n,p__57055,entity,state_map,idents_seen){\nvar map__57057 = p__57055;\nvar map__57057__$1 = (((((!((map__57057 == null))))?(((((map__57057.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__57057.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__57057):map__57057);\nvar join_node = map__57057__$1;\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57057__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar link_join_QMARK_ = com.fulcrologic.fulcro.algorithms.denormalize.lookup_ref_QMARK_(key);\nvar v = ((link_join_QMARK_)?key:cljs.core.get.cljs$core$IFn$_invoke$arity$2(entity,key));\nvar union_node = cljs.core.first(new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(join_node));\nvar union_key__GT_query = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,p__57062){\nvar map__57063 = p__57062;\nvar map__57063__$1 = (((((!((map__57063 == null))))?(((((map__57063.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__57063.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__57063):map__57063);\nvar node = map__57063__$1;\nvar union_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57063__$1,new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,union_key,node);\n}),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(union_node));\nvar is_ref_QMARK_ = com.fulcrologic.fulcro.algorithms.denormalize.lookup_ref_QMARK_(v);\nvar to_many_QMARK_ = (((!(is_ref_QMARK_))) && (cljs.core.vector_QMARK_(v)));\nif(to_many_QMARK_){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,key,cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$1((function (lookup_ref){\nvar temp__5733__auto__ = ((com.fulcrologic.fulcro.algorithms.denormalize.lookup_ref_QMARK_(lookup_ref))?com.fulcrologic.fulcro.algorithms.denormalize.follow_ref(state_map,lookup_ref):false);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar e = temp__5733__auto__;\nvar vec__57067 = lookup_ref;\nvar table = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57067,(0),null);\nvar temp__5733__auto____$1 = (union_key__GT_query.cljs$core$IFn$_invoke$arity$1 ? union_key__GT_query.cljs$core$IFn$_invoke$arity$1(table) : union_key__GT_query.call(null,table));\nif(cljs.core.truth_(temp__5733__auto____$1)){\nvar target_ast_node = temp__5733__auto____$1;\nreturn (com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4(target_ast_node,e,state_map,idents_seen) : com.fulcrologic.fulcro.algorithms.denormalize.denormalize.call(null,target_ast_node,e,state_map,idents_seen));\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})),v));\n} else {\nif(is_ref_QMARK_){\nvar temp__5733__auto__ = com.fulcrologic.fulcro.algorithms.denormalize.follow_ref(state_map,v);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar e = temp__5733__auto__;\nvar temp__5733__auto____$1 = (function (){var G__57071 = cljs.core.first(v);\nreturn (union_key__GT_query.cljs$core$IFn$_invoke$arity$1 ? union_key__GT_query.cljs$core$IFn$_invoke$arity$1(G__57071) : union_key__GT_query.call(null,G__57071));\n})();\nif(cljs.core.truth_(temp__5733__auto____$1)){\nvar target_ast_node = temp__5733__auto____$1;\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,key,(com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.denormalize.denormalize.cljs$core$IFn$_invoke$arity$4(target_ast_node,e,state_map,idents_seen) : com.fulcrologic.fulcro.algorithms.denormalize.denormalize.call(null,target_ast_node,e,state_map,idents_seen)));\n} else {\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,key,cljs.core.PersistentArrayMap.EMPTY);\n}\n} else {\nreturn n;\n}\n} else {\nif(((cljs.core.contains_QMARK_(entity,key)) && ((!(link_join_QMARK_))))){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(n,key,v);\n} else {\nreturn n;\n\n}\n}\n}\n});\ncom.fulcrologic.fulcro.algorithms.denormalize.add_joins_BANG_ = (function com$fulcrologic$fulcro$algorithms$denormalize$add_joins_BANG_(transient_node,entity,state_map,parent_node,ast_join_nodes,idents_seen){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (n,join_node){\nvar union_QMARK_ = cljs.core.map_QMARK_(new cljs.core.Keyword(null,\"query\",\"query\",-1288509510).cljs$core$IFn$_invoke$arity$1(join_node));\nif(union_QMARK_){\nreturn com.fulcrologic.fulcro.algorithms.denormalize.add_union_BANG_(n,join_node,entity,state_map,idents_seen);\n} else {\nreturn com.fulcrologic.fulcro.algorithms.denormalize.add_join_BANG_(n,join_node,entity,state_map,parent_node,idents_seen);\n}\n}),transient_node,ast_join_nodes);\n});\n/**\n * Internal implementation of `db->tree`.  You should normally use `db->tree` instead of this function.\n * \n *   - `top-node`: an AST for the query.\n *   - `current-entity`: The entity to start denormalization from.\n *   - `state-map`: a normalized database.\n *   - `idents-seen`: a map of the idents seen so far (for recursion loop tracking).\n */\ncom.fulcrologic.fulcro.algorithms.denormalize.denormalize = (function com$fulcrologic$fulcro$algorithms$denormalize$denormalize(p__57095,current_entity,state_map,idents_seen){\nvar map__57096 = p__57095;\nvar map__57096__$1 = (((((!((map__57096 == null))))?(((((map__57096.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__57096.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__57096):map__57096);\nvar top_node = map__57096__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57096__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57096__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(type,new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332))){\n} else {\nthrow (new Error(\"Assert failed: (not= type :prop)\"));\n}\n\nvar current_entity__$1 = ((com.fulcrologic.fulcro.algorithms.denormalize.lookup_ref_QMARK_(current_entity))?com.fulcrologic.fulcro.algorithms.denormalize.follow_ref(state_map,current_entity):current_entity);\nvar grouped_children = cljs.core.group_by(new cljs.core.Keyword(null,\"type\",\"type\",1174270348),children);\nvar nil_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$3(grouped_children,null,false);\nvar wildcard_QMARK_ = (function (){var and__4115__auto__ = nil_nodes;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"*\",\"*\",345799209,null),(function (){var G__57101 = nil_nodes;\nvar G__57101__$1 = (((G__57101 == null))?null:cljs.core.first(G__57101));\nif((G__57101__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(G__57101__$1);\n}\n})());\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar result_node = com.fulcrologic.fulcro.algorithms.denormalize.add_props_BANG_(cljs.core.transient$((cljs.core.truth_(wildcard_QMARK_)?current_entity__$1:cljs.core.PersistentArrayMap.EMPTY)),current_entity__$1,new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332).cljs$core$IFn$_invoke$arity$1(grouped_children),state_map);\nvar result_node__$1 = com.fulcrologic.fulcro.algorithms.denormalize.add_joins_BANG_(result_node,current_entity__$1,state_map,top_node,new cljs.core.Keyword(null,\"join\",\"join\",-758861890).cljs$core$IFn$_invoke$arity$1(grouped_children),idents_seen);\nvar G__57103 = result_node__$1;\nvar G__57103__$1 = (((G__57103 == null))?null:cljs.core.persistent_BANG_(G__57103));\nif((G__57103__$1 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.denormalize.with_time(G__57103__$1,com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_);\n}\n});\n/**\n * Pull a tree of data from a fulcro normalized database as a tree corresponding to the given query.\n * \n *   query - EQL.\n *   starting-entity - A map of data or ident at which to start.\n *   state-map - The overall normalized database from which idents can be resolved.\n * \n *   Returns a tree of data where each resolved data node is also marked with the current\n *   *denormalize-time* (dynamically bound outside of this call). Users of this function that\n *   are hydrating the UI should ensure that this time is bound to Fulcro's current internal\n *   basis-time using `binding`.\n * \n *   The `state-map` needs to be your entire Fulcro database. This database is used to resolve the joins in the EQL query\n *   (which are represented as `idents`).\n * \n *   The starting entity can be `state-map` as well if your EQL query starts from your root. If not, it can simply be\n *   the map (taken from the `state-map`) of the entity whose query you're using.\n * \n *   For example:\n * \n *   ```\n *   (defsc SomeComponent [this props]\n *  {:ident :thing/id\n *   :query [...]})\n * \n *   ;; Get the sub-tree of data for thing 1:\n *   (db->tree\n *  (comp/get-query SomeComponent)\n *  (get-in state-map [:thing/id 1])\n *  state-map)\n *   ```\n *   \n */\ncom.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree = (function com$fulcrologic$fulcro$algorithms$denormalize$db__GT_tree(query,starting_entity,state_map){\nvar ast = edn_query_language.core.query__GT_ast(query);\nvar G__57107 = com.fulcrologic.fulcro.algorithms.denormalize.denormalize(ast,starting_entity,state_map,cljs.core.PersistentArrayMap.EMPTY);\nif((G__57107 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.denormalize.with_time(G__57107,com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_);\n}\n});\n/**\n * Gets the time at which the given props were processed by `db->tree`, if known.\n */\ncom.fulcrologic.fulcro.algorithms.denormalize.denormalization_time = (function com$fulcrologic$fulcro$algorithms$denormalize$denormalization_time(props){\nvar G__57109 = props;\nvar G__57109__$1 = (((G__57109 == null))?null:cljs.core.meta(G__57109));\nif((G__57109__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.denormalize\",\"time\",\"com.fulcrologic.fulcro.algorithms.denormalize/time\",-375164969).cljs$core$IFn$_invoke$arity$1(G__57109__$1);\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","The algorithm and support functions for converting a normalized Fulcro database to a tree of denormalized props.","~:file","com/fulcrologic/fulcro/algorithms/denormalize.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",50],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async.interop","~$cljs.core.async.interop","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.denormalize","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$edn-query-language.core","^R","~$eql","^R","~$cljs.core","^T","~$goog","^U"],"~:seen",["^K",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^T","^T"],"~:form",["~#list",["~$ns","^M","The algorithm and support functions for converting a normalized Fulcro database to a tree of denormalized props.",["^[",["^W",["^R","~:as","^S"]]]]],"~:flags",["^ ","^W",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^U","^T","^R"]],"^O","^M","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],"~:compiled-at",1599160992379,"~:resource-name","com/fulcrologic/fulcro/algorithms/denormalize.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.denormalize\n  \"The algorithm and support functions for converting a normalized Fulcro database to a tree of denormalized props.\"\n  (:require\n    [edn-query-language.core :as eql]))\n\n(def ^:dynamic *denormalize-time* 0)\n\n(defn link-ref?\n  \"Is the given `v` a link ref query (e.g. `[:table '_]) element.\"\n  [v]\n  (and\n    (vector? v)\n    (= 2 (count v))\n    (keyword? (first v))\n    (= '_ (second v))))\n\n(defn lookup-ref?\n  \"Is the given `v` a lookup ref query (i.e. ident)?\"\n  [v]\n  (and (vector? v) (= 2 (count v)) (keyword? (first v))))\n\n(defn follow-ref\n  \"Returns the value defined by the `ref` from `state-map`.  Works for link refs and\n  lookup refs.\"\n  [state-map [table id :as ref]]\n  (if (= '_ id)\n    (get state-map table)\n    (get-in state-map ref)))\n\n(defn ref-key\n  \"Returns the key to use in results for the given ref (ident of lookup ref). For link refs this is just\n  the first element, and for idents it is the ident.\"\n  [[table id :as ref]]\n  (if (= '_ id)\n    table\n    ref))\n\n(declare denormalize)\n\n(defn with-time\n  \"Associates time metadata with the given props. This time can be used by rendering optimizations to decide when\n  stale props are passed to it from a parent in cases where props tunnelling was used for localized refresh.\"\n  [props t]\n  (vary-meta props assoc ::time t))\n\n(defn- add-props!\n  \"Walk the given AST children (which MUST be prop nodes), and add their values from `current-entity`\n  (if found).\"\n  [transient-node entity ast-prop-children state-map]\n  (reduce\n    (fn [n {:keys [key]}]\n      (if (lookup-ref? key)\n        (if-let [x (follow-ref state-map key)]\n          (assoc! n (ref-key key) x)\n          n)\n        (if-let [entry (and (coll? entity) (find entity key))]\n          (assoc! n key (second entry))\n          n)))\n    transient-node\n    ast-prop-children))\n\n(defn- reduce-depth\n  \"Reduce the query depth on `join-node` that appears within the children of `parent-node`.\"\n  [parent-node join-node]\n  (let [join-node-index (reduce\n                          (fn [idx n] (if (identical? join-node n)\n                                        (reduced idx)\n                                        (inc idx)))\n                          0\n                          (:children parent-node))]\n    (update-in parent-node [:children join-node-index :query] (fnil dec 1))))\n\n(defn- add-join! [n {:keys [query key] :as join-node} entity state-map parent-node idents-seen]\n  (let [link-join?      (lookup-ref? key)\n        v               (if link-join? (follow-ref state-map key) (get entity key))\n        key             (if (link-ref? key) (first key) key)\n        is-ref?         (lookup-ref? v)\n        join-entity     (if is-ref? (follow-ref state-map v) v)\n        to-many?        (and (not is-ref?) (vector? join-entity))\n        depth-based?    (int? query)\n        recursive?      (or depth-based? (= '... query))\n        stop-recursion? (and recursive? (or (= 0 query)\n                                          (and is-ref?\n                                            ;; NOTE: allows depth-based to ignore loops\n                                            (not depth-based?)\n                                            (contains? (get idents-seen key) v))))\n        parent-node     (if (and depth-based? (not stop-recursion?))\n                          (reduce-depth parent-node join-node)\n                          parent-node)\n        target-node     (if recursive? parent-node join-node)\n        ;; NOTE: fixed bug with old db->tree, so behavior is different\n        idents-seen     (if is-ref?\n                          (update idents-seen key (fnil conj #{}) v)\n                          idents-seen)]\n    (cond\n      stop-recursion? n\n      to-many? (assoc! n key\n                 (into []\n                   (keep (fn [x]\n                           (let [e (if (lookup-ref? x)\n                                     (follow-ref state-map x)\n                                     x)]\n                             (denormalize target-node e state-map idents-seen))))\n                   join-entity))\n      (and recursive? join-entity) (if depth-based?\n                                     (let [join-node-index (reduce\n                                                             (fn [idx n] (if (identical? join-node n)\n                                                                           (reduced idx)\n                                                                           (inc idx)))\n                                                             0\n                                                             (:children parent-node))\n                                           parent-node     (update-in parent-node [:children join-node-index :query] (fnil dec 1))]\n                                       (assoc! n key (denormalize parent-node join-entity state-map idents-seen)))\n                                     (assoc! n key (denormalize parent-node join-entity state-map idents-seen)))\n      (map? join-entity) (assoc! n key (denormalize target-node join-entity state-map idents-seen))\n      (and (contains? entity key)\n        (not recursive?)\n        (not link-join?)) (assoc! n key v)\n      :otherwise n)))\n\n(defn- add-union! [n {:keys [key] :as join-node} entity state-map idents-seen]\n  (let [link-join?       (lookup-ref? key)\n        v                (if link-join? key (get entity key))\n        union-node       (-> join-node :children first)\n        union-key->query (reduce\n                           (fn [result {:keys [union-key] :as node}]\n                             (assoc result union-key node))\n                           {}\n                           (:children union-node))\n        is-ref?          (lookup-ref? v)\n        to-many?         (and (not is-ref?) (vector? v))]\n    (cond\n      to-many? (assoc! n key\n                 (into []\n                   (keep (fn [lookup-ref]\n                           (if-let [e (and (lookup-ref? lookup-ref)\n                                        (follow-ref state-map lookup-ref))]\n                             (let [[table] lookup-ref]\n                               (if-let [target-ast-node (union-key->query table)]\n                                 (denormalize target-ast-node e state-map idents-seen)\n                                 {}))\n                             {})))\n                   v))\n      is-ref? (if-let [e (follow-ref state-map v)]\n                (if-let [target-ast-node (union-key->query (first v))]\n                  (assoc! n key (denormalize target-ast-node e state-map idents-seen))\n                  (assoc! n key {}))\n                n)\n      (and (contains? entity key)\n        (not link-join?)) (assoc! n key v)\n      :otherwise n)))\n\n(defn- add-joins! [transient-node entity state-map parent-node ast-join-nodes idents-seen]\n  (reduce\n    (fn [n join-node]\n      (let [union? (map? (:query join-node))]\n        (if union?\n          (add-union! n join-node entity state-map idents-seen)\n          (add-join! n join-node entity state-map parent-node idents-seen))))\n    transient-node\n    ast-join-nodes))\n\n(defn denormalize\n  \"Internal implementation of `db->tree`.  You should normally use `db->tree` instead of this function.\n\n  - `top-node`: an AST for the query.\n  - `current-entity`: The entity to start denormalization from.\n  - `state-map`: a normalized database.\n  - `idents-seen`: a map of the idents seen so far (for recursion loop tracking).\"\n  [{:keys [type children] :as top-node} current-entity state-map idents-seen]\n  (assert (not= type :prop))\n  (let [current-entity   (if (lookup-ref? current-entity)\n                           (follow-ref state-map current-entity)\n                           current-entity)\n        grouped-children (group-by :type children)\n        nil-nodes        (get grouped-children nil false)\n        ;; NOTE: wildcard works better than the old db->tree (which ignores wildcard when joins are present)\n        wildcard?        (and nil-nodes (= '* (some-> nil-nodes first :key)))\n        result-node      (add-props! (transient (if wildcard? current-entity {})) current-entity (:prop grouped-children) state-map)\n        result-node      (add-joins! result-node current-entity state-map\n                           top-node\n                           (:join grouped-children)\n                           idents-seen)]\n    (some-> result-node (persistent!) (with-time *denormalize-time*))))\n\n(defn db->tree\n  \"Pull a tree of data from a fulcro normalized database as a tree corresponding to the given query.\n\n  query - EQL.\n  starting-entity - A map of data or ident at which to start.\n  state-map - The overall normalized database from which idents can be resolved.\n\n  Returns a tree of data where each resolved data node is also marked with the current\n  *denormalize-time* (dynamically bound outside of this call). Users of this function that\n  are hydrating the UI should ensure that this time is bound to Fulcro's current internal\n  basis-time using `binding`.\n\n  The `state-map` needs to be your entire Fulcro database. This database is used to resolve the joins in the EQL query\n  (which are represented as `idents`).\n\n  The starting entity can be `state-map` as well if your EQL query starts from your root. If not, it can simply be\n  the map (taken from the `state-map`) of the entity whose query you're using.\n\n  For example:\n\n  ```\n  (defsc SomeComponent [this props]\n    {:ident :thing/id\n     :query [...]})\n\n  ;; Get the sub-tree of data for thing 1:\n  (db->tree\n    (comp/get-query SomeComponent)\n    (get-in state-map [:thing/id 1])\n    state-map)\n  ```\n  \"\n  [query starting-entity state-map]\n  (let [ast (eql/query->ast query)]\n    (some-> (denormalize ast starting-entity state-map {})\n      (with-time *denormalize-time*))))\n\n(defn denormalization-time\n  \"Gets the time at which the given props were processed by `db->tree`, if known.\"\n  [props]\n  (some-> props meta ::time))\n","~:reader-features",["^K",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","com.fulcrologic.fulcro.algorithms.denormalize/link-ref?","v","cljs.core/vector?","cljs.core._EQ_","cljs.core/count","cljs.core/Keyword","cljs.core/first","cljs.core/second","com.fulcrologic.fulcro.algorithms.denormalize/lookup-ref?","p__56966","vec__56967","cljs.core.nth","com.fulcrologic.fulcro.algorithms.denormalize/follow-ref","state-map","table","id","ref","cljs.core.get","cljs.core.get_in","p__56974","vec__56976","com.fulcrologic.fulcro.algorithms.denormalize/ref-key","com.fulcrologic.fulcro.algorithms.denormalize/with-time","props","t","cljs.core.vary_meta","cljs.core/assoc","com.fulcrologic.fulcro.algorithms.denormalize/add-props!","transient-node","entity","ast-prop-children","cljs.core.reduce","p__57002","map__57003","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","n","key","temp__5733__auto__","x","cljs.core.assoc_BANG_","entry","cljs.core/coll?","cljs.core/find","com.fulcrologic.fulcro.algorithms.denormalize/reduce-depth","parent-node","join-node","join-node-index","idx","cljs.core/reduced","cljs.core.update_in","cljs.core.fnil","cljs.core/dec","p__57020","map__57021","com.fulcrologic.fulcro.algorithms.denormalize/add-join!","query","idents-seen","link-join?","is-ref?","join-entity","to-many?","depth-based?","cljs.core/int?","recursive?","stop-recursion?","cljs.core/contains?","target-node","cljs.core.update","cljs.core/conj","cljs.core.into","cljs.core.keep","e","com.fulcrologic.fulcro.algorithms.denormalize/denormalize","cljs.core/map?","p__57055","map__57057","com.fulcrologic.fulcro.algorithms.denormalize/add-union!","union-node","union-key->query","p__57062","map__57063","result","union-key","node","cljs.core.assoc","lookup-ref","vec__57067","target-ast-node","G__57071","com.fulcrologic.fulcro.algorithms.denormalize/add-joins!","ast-join-nodes","union?","p__57095","map__57096","type","children","top-node","current-entity","js/Error","cljs.core.not_EQ_","grouped-children","cljs.core/group-by","nil-nodes","wildcard?","and__4115__auto__","G__57101","result-node","cljs.core/transient","G__57103","cljs.core/persistent!","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","starting-entity","ast","edn-query-language.core/query->ast","G__57107","com.fulcrologic.fulcro.algorithms.denormalize/denormalization-time","G__57109","cljs.core/meta"]],"~:used-vars",["^K",["~$cljs.core/keep","~$com.fulcrologic.fulcro.algorithms.denormalize/with-time","~$com.fulcrologic.fulcro.algorithms.denormalize/follow-ref","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/dec","~$cljs.core/count","~$com.fulcrologic.fulcro.algorithms.denormalize/lookup-ref?","~$cljs.core/reduce","~$cljs.core/Keyword","~$com.fulcrologic.fulcro.algorithms.denormalize/reduce-depth","~$com.fulcrologic.fulcro.algorithms.denormalize/denormalize","~$cljs.core/not=","~$com.fulcrologic.fulcro.algorithms.denormalize/add-join!","~$cljs.core/fnil","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/vary-meta","~$com.fulcrologic.fulcro.algorithms.denormalize/add-props!","~$com.fulcrologic.fulcro.algorithms.denormalize/ref-key","~$cljs.core/get-in","~$com.fulcrologic.fulcro.algorithms.denormalize/add-union!","~$cljs.core/get","~$com.fulcrologic.fulcro.algorithms.denormalize/db->tree","~$cljs.core/second","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.denormalize/link-ref?","~$cljs.core/assoc","~$com.fulcrologic.fulcro.algorithms.denormalize/add-joins!","~$com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","~$com.fulcrologic.fulcro.algorithms.denormalize/denormalization-time","~$cljs.core/first","~$cljs.core/assoc!","~$cljs.core/update-in","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^16","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^U","~$goog.dom.HtmlElement"]]],["^16","cljs/spec/gen/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^T","~$goog.Uri"]]],["^16","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","~$goog.array","~$goog.asserts"]]],["^16","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2B","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^16","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2C","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2F"]]],["^16","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2C"]]],["^16","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2C"]]],"~:SHADOW-TIMESTAMP",[1598567487000,1598567487000,1592012038000],["^16","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2C","~$goog.reflect"]]],["^16","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2C","~$goog.html.trustedtypes","^2I","^2J","^2K","^2L"]]],["^16","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^T","^@"]]],["^16","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2B","^2C","~$goog.html.SafeUrl","^2K","^2L","^2F"]]],["^16","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2C","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2P","^2H","~$goog.html.uncheckedconversions","^2K","^2F"]]],["^16","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^T"]]],["^16","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^16","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2B","^2C","~$goog.dom.TagName","~$goog.dom.tags","^2T","^2U","~$goog.html.SafeStyleSheet","^2P","^2H","^2O","^2I","^2J","~$goog.labs.userAgent.browser","^2E","^2K","^2L","^2F"]]],["^16","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2E"]]],["^16","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^16","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2B","^2C","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^16","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","cljs/spec/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^T","^2E","~$clojure.walk","^D","~$clojure.string"]]],["^16","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",[]]],["^16","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2B","^2E"]]],["^16","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^T","^33","~$goog.string.StringBuffer"]]],["^16","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","~$goog.dom.safe","^2V","^2K","^2F"]]],["^16","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2F"]]],["^16","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2B","^2C","^2R","~$goog.math"]]],["^16","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2C","^2S","^2T","^2U","^2[","^2P","^2H","^2K","^2F"]]],["^16","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U"]]],["^16","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","~$goog.math.Long","~$goog.math.Integer","^33","^2E","^2B","^2A","^3;"]]],["^16","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2C","^2O","^2K","^2L"]]],["^16","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2B","^2C","^2U","^2E","^2K","^2L","^2F"]]],["^16","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2N"]]],["^16","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2B","^2C","^33"]]],["^16","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^2C","^2L"]]],["^16","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2<",["^ ","^2=",null,"^2>",["^K",[]],"^2?",["^U","^T","^R"]]]]],"~:clj-info",["^ ","jar:file:/home/patro/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1598567491000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/gen/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1589469725000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1580245266000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","The algorithm and support functions for converting a normalized Fulcro database to a tree of denormalized props.","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",1,"^9",5,"^:",1,"^;",50],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",[]],"^L","^M","^P",null,"^Q",["^ ","^R","^R","^S","^R","^T","^T","^U","^U"],"^V",["^K",["^W"]],"~:shadow/js-access-global",["^K",["Error"]],"^X",null,"~:defs",["^ ","~$db->tree",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",186,"^9",7,"^:",186,"^;",15,"~:arglists",["^[",["~$quote",["^[",[["~$query","~$starting-entity","~$state-map"]]]]],"^6","Pull a tree of data from a fulcro normalized database as a tree corresponding to the given query.\n\n  query - EQL.\n  starting-entity - A map of data or ident at which to start.\n  state-map - The overall normalized database from which idents can be resolved.\n\n  Returns a tree of data where each resolved data node is also marked with the current\n  *denormalize-time* (dynamically bound outside of this call). Users of this function that\n  are hydrating the UI should ensure that this time is bound to Fulcro's current internal\n  basis-time using `binding`.\n\n  The `state-map` needs to be your entire Fulcro database. This database is used to resolve the joins in the EQL query\n  (which are represented as `idents`).\n\n  The starting entity can be `state-map` as well if your EQL query starts from your root. If not, it can simply be\n  the map (taken from the `state-map`) of the entity whose query you're using.\n\n  For example:\n\n  ```\n  (defsc SomeComponent [this props]\n    {:ident :thing/id\n     :query [...]})\n\n  ;; Get the sub-tree of data for thing 1:\n  (db->tree\n    (comp/get-query SomeComponent)\n    (get-in state-map [:thing/id 1])\n    state-map)\n  ```\n  "],"^L","^1Z","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",15,"~:method-params",["^[",[["^48","^49","^4:"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^9",1,"~:variadic?",false,"^8",186,"~:ret-tag",["^K",["~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^:",186,"~:max-fixed-arity",3,"~:fn-var",true,"^46",["^[",["^47",["^[",[["^48","^49","^4:"]]]]],"^6","Pull a tree of data from a fulcro normalized database as a tree corresponding to the given query.\n\n  query - EQL.\n  starting-entity - A map of data or ident at which to start.\n  state-map - The overall normalized database from which idents can be resolved.\n\n  Returns a tree of data where each resolved data node is also marked with the current\n  *denormalize-time* (dynamically bound outside of this call). Users of this function that\n  are hydrating the UI should ensure that this time is bound to Fulcro's current internal\n  basis-time using `binding`.\n\n  The `state-map` needs to be your entire Fulcro database. This database is used to resolve the joins in the EQL query\n  (which are represented as `idents`).\n\n  The starting entity can be `state-map` as well if your EQL query starts from your root. If not, it can simply be\n  the map (taken from the `state-map`) of the entity whose query you're using.\n\n  For example:\n\n  ```\n  (defsc SomeComponent [this props]\n    {:ident :thing/id\n     :query [...]})\n\n  ;; Get the sub-tree of data for thing 1:\n  (db->tree\n    (comp/get-query SomeComponent)\n    (get-in state-map [:thing/id 1])\n    state-map)\n  ```\n  "],"~$add-join!",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",73,"^9",8,"^:",73,"^;",17,"~:private",true,"^46",["^[",["^47",["^[",[["~$n",["^ ","~:keys",["^48","~$key"],"^11","~$join-node"],"~$entity","^4:","~$parent-node","~$idents-seen"]]]]]],"^4F",true,"^L","^1O","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",17,"^4;",["^[",[["~$n","~$p__57020","^4J","^4:","^4K","^4L"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",73,"^4?",["^K",[null,"^4@"]],"^:",73,"^4C",6,"^4D",true,"^46",["^[",["^47",["^[",[["~$n",["^ ","^4G",["^48","^4H"],"^11","^4I"],"^4J","^4:","^4K","^4L"]]]]]],"~$link-ref?",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",8,"^9",7,"^:",8,"^;",16,"^46",["^[",["^47",["^[",[["~$v"]]]]],"^6","Is the given `v` a link ref query (e.g. `[:table '_]) element."],"^L","^21","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",16,"^4;",["^[",[["~$v"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",8,"^4?","~$boolean","^:",8,"^4C",1,"^4D",true,"^46",["^[",["^47",["^[",[["~$v"]]]]],"^6","Is the given `v` a link ref query (e.g. `[:table '_]) element."],"~$*denormalize-time*",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",6,"^9",16,"^:",6,"^;",34,"~:dynamic",true],"^L","^24","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",34,"^9",1,"^4Q",true,"^8",6,"^:",6,"~:tag","~$any"],"~$add-joins!",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",153,"^9",8,"^:",153,"^;",18,"^4F",true,"^46",["^[",["^47",["^[",[["~$transient-node","^4J","^4:","^4K","~$ast-join-nodes","^4L"]]]]]],"^4F",true,"^L","^23","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",18,"^4;",["^[",[["^4U","^4J","^4:","^4K","^4V","^4L"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",153,"^4?",["^K",[null,"^4S"]],"^:",153,"^4C",6,"^4D",true,"^46",["^[",["^47",["^[",[["^4U","^4J","^4:","^4K","^4V","^4L"]]]]]],"~$denormalization-time",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",223,"^9",7,"^:",223,"^;",27,"^46",["^[",["^47",["^[",[["~$props"]]]]],"^6","Gets the time at which the given props were processed by `db->tree`, if known."],"^L","^25","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",27,"^4;",["^[",[["^4X"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",223,"^4?",["^K",["^4S","^4B"]],"^:",223,"^4C",1,"^4D",true,"^46",["^[",["^47",["^[",[["^4X"]]]]],"^6","Gets the time at which the given props were processed by `db->tree`, if known."],"~$with-time",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",40,"^9",7,"^:",40,"^;",16,"^46",["^[",["^47",["^[",[["^4X","~$t"]]]]],"^6","Associates time metadata with the given props. This time can be used by rendering optimizations to decide when\n  stale props are passed to it from a parent in cases where props tunnelling was used for localized refresh."],"^L","^1C","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",16,"^4;",["^[",[["^4X","~$t"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",40,"^4?",["^K",["^4@","^4A","^4B"]],"^:",40,"^4C",2,"^4D",true,"^46",["^[",["^47",["^[",[["^4X","~$t"]]]]],"^6","Associates time metadata with the given props. This time can be used by rendering optimizations to decide when\n  stale props are passed to it from a parent in cases where props tunnelling was used for localized refresh."],"~$lookup-ref?",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",17,"^9",7,"^:",17,"^;",18,"^46",["^[",["^47",["^[",[["~$v"]]]]],"^6","Is the given `v` a lookup ref query (i.e. ident)?"],"^L","^1I","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",18,"^4;",["^[",[["~$v"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",17,"^4?","^4O","^:",17,"^4C",1,"^4D",true,"^46",["^[",["^47",["^[",[["~$v"]]]]],"^6","Is the given `v` a lookup ref query (i.e. ident)?"],"~$denormalize",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",163,"^9",7,"^:",163,"^;",18,"^46",["^[",["^47",["^[",[[["^ ","^4G",["~$type","~$children"],"^11","~$top-node"],"~$current-entity","^4:","^4L"]]]]],"^6","Internal implementation of `db->tree`.  You should normally use `db->tree` instead of this function.\n\n  - `top-node`: an AST for the query.\n  - `current-entity`: The entity to start denormalization from.\n  - `state-map`: a normalized database.\n  - `idents-seen`: a map of the idents seen so far (for recursion loop tracking)."],"^L","^1M","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",18,"^4;",["^[",[["~$p__57095","^53","^4:","^4L"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",163,"^4?",["^K",["^4@","^4A","^4B"]],"^:",163,"^4C",4,"^4D",true,"^46",["^[",["^47",["^[",[[["^ ","^4G",["^50","^51"],"^11","^52"],"^53","^4:","^4L"]]]]],"^6","Internal implementation of `db->tree`.  You should normally use `db->tree` instead of this function.\n\n  - `top-node`: an AST for the query.\n  - `current-entity`: The entity to start denormalization from.\n  - `state-map`: a normalized database.\n  - `idents-seen`: a map of the idents seen so far (for recursion loop tracking)."],"~$add-union!",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",121,"^9",8,"^:",121,"^;",18,"^4F",true,"^46",["^[",["^47",["^[",[["~$n",["^ ","^4G",["^4H"],"^11","^4I"],"^4J","^4:","^4L"]]]]]],"^4F",true,"^L","^1X","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",18,"^4;",["^[",[["~$n","~$p__57055","^4J","^4:","^4L"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",121,"^4?",["^K",[null,"^4@"]],"^:",121,"^4C",5,"^4D",true,"^46",["^[",["^47",["^[",[["~$n",["^ ","^4G",["^4H"],"^11","^4I"],"^4J","^4:","^4L"]]]]]],"~$ref-key",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",30,"^9",7,"^:",30,"^;",14,"^46",["^[",["^47",["^[",[[["~$table","~$id","^11","~$ref"]]]]]],"^6","Returns the key to use in results for the given ref (ident of lookup ref). For link refs this is just\n  the first element, and for idents it is the ident."],"^L","^1V","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",14,"^4;",["^[",[["~$p__56974"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",30,"^4?",["^K",[null,"^4S","^4B"]],"^:",30,"^4C",1,"^4D",true,"^46",["^[",["^47",["^[",[[["^58","^59","^11","^5:"]]]]]],"^6","Returns the key to use in results for the given ref (ident of lookup ref). For link refs this is just\n  the first element, and for idents it is the ident."],"~$add-props!",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",46,"^9",8,"^:",46,"^;",18,"^4F",true,"^46",["^[",["^47",["^[",[["^4U","^4J","~$ast-prop-children","^4:"]]]]],"^6","Walk the given AST children (which MUST be prop nodes), and add their values from `current-entity`\n  (if found)."],"^4F",true,"^L","^1U","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",18,"^4;",["^[",[["^4U","^4J","^5=","^4:"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",46,"^4?",["^K",[null,"^4S"]],"^:",46,"^4C",4,"^4D",true,"^46",["^[",["^47",["^[",[["^4U","^4J","^5=","^4:"]]]]],"^6","Walk the given AST children (which MUST be prop nodes), and add their values from `current-entity`\n  (if found)."],"~$reduce-depth",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",62,"^9",8,"^:",62,"^;",20,"^4F",true,"^46",["^[",["^47",["^[",[["^4K","^4I"]]]]],"^6","Reduce the query depth on `join-node` that appears within the children of `parent-node`."],"^4F",true,"^L","^1L","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",20,"^4;",["^[",[["^4K","^4I"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",62,"^4?",["^K",["^4@","^4S"]],"^:",62,"^4C",2,"^4D",true,"^46",["^[",["^47",["^[",[["^4K","^4I"]]]]],"^6","Reduce the query depth on `join-node` that appears within the children of `parent-node`."],"~$follow-ref",["^ ","^45",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^8",22,"^9",7,"^:",22,"^;",17,"^46",["^[",["^47",["^[",[["^4:",["^58","^59","^11","^5:"]]]]]],"^6","Returns the value defined by the `ref` from `state-map`.  Works for link refs and\n  lookup refs."],"^L","^1D","^7","com/fulcrologic/fulcro/algorithms/denormalize.cljc","^;",17,"^4;",["^[",[["^4:","~$p__56966"]]],"^4<",null,"^4=",["^[",[null,null]],"^9",1,"^4>",false,"^8",22,"^4?",["^K",[null,"^4S","^4B"]],"^:",22,"^4C",2,"^4D",true,"^46",["^[",["^47",["^[",[["^4:",["^58","^59","^11","^5:"]]]]]],"^6","Returns the value defined by the `ref` from `state-map`.  Works for link refs and\n  lookup refs."]],"^Y",["^ ","^T","^T"],"~:cljs.analyzer/constants",["^ ","^V",["^K",["~:children","~:union-key","~:key","~$*","~:type","~$_","~:otherwise","~:prop","~:com.fulcrologic.fulcro.algorithms.denormalize/time","~:query","~$...","~:join"]],"~:order",["~$_","^5H","^5D","^5B","^5I","^5J","^5F","^5C","^5E","^5G","~$*","^5K"]],"^12",["^ ","^W",["^K",[]]],"^13",["^ "],"^14",["^U","^T","^R"]],"^O","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^2;",[["^5O","~:static-fns"],true,["^5O","~:shadow-tweaks"],null,["^5O","~:source-map-inline"],null,["^5O","~:elide-asserts"],false,["^5O","~:optimize-constants"],null,["^5O","^19"],null,["^5O","~:external-config"],["^ ","~:fulcro",["^ ","~:wrap-inputs?",false]],["^5O","~:tooling-config"],null,["^5O","~:emit-constants"],null,["^5O","~:load-tests"],null,["^5O","~:form-size-threshold"],null,["^5O","~:data-readers"],null,["^5O","~:infer-externs"],"~:auto",["^5O","^1;"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5O","~:fn-invoke-direct"],null,["^5O","~:source-map"],true]]]