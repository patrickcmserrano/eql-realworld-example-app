["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.routing.dynamic_routing');\n/**\n * INTERNAL USE ONLY. Not guaranteed to be available at runtime in production builds. This is used to aid in giving\n * development-time warnings/errors.\n * \n * Class of the routing target component, available in the notifications fns\n * (:will-enter, :route-cancelled, :will-leave)\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_ = null;\n/**\n * Returns a vector that describes the sub-path that a given route target represents. String elements represent\n *   explicit path elements, and keywords represent variable values (which are always pulled as strings).\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.route_segment = (function com$fulcrologic$fulcro$routing$dynamic_routing$route_segment(class$){\nreturn com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(class$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"route-segment\",\"route-segment\",1812935886)], 0));\n});\n/**\n * Returns the function that should be called if this target was in a deferred state and a different routing choice was made. Is given the same route parameters that were sent to `will-enter`.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.get_route_cancelled = (function com$fulcrologic$fulcro$routing$dynamic_routing$get_route_cancelled(class$){\nreturn com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(class$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"route-cancelled\",\"route-cancelled\",-1402397214)], 0));\n});\n/**\n * Universal CLJC version of route-cancelled.  Don't use the protocol method in CLJ.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.route_cancelled = (function com$fulcrologic$fulcro$routing$dynamic_routing$route_cancelled(class$,route_params){\nvar temp__5735__auto__ = com.fulcrologic.fulcro.routing.dynamic_routing.get_route_cancelled(class$);\nif(cljs.core.truth_(temp__5735__auto__)){\nvar f = temp__5735__auto__;\nvar _STAR_target_class_STAR__orig_val__72501 = com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_;\nvar _STAR_target_class_STAR__temp_val__72502 = class$;\n(com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_ = _STAR_target_class_STAR__temp_val__72502);\n\ntry{return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(route_params) : f.call(null,route_params));\n}finally {(com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_ = _STAR_target_class_STAR__orig_val__72501);\n}} else {\nreturn null;\n}\n});\n/**\n * Returns the function that is called before a route target is activated (if the route segment of interest has changed and the\n *   target of the result is this target).  MUST return (r/route-immediate ident) or (r/route-deferred ident) to indicate\n *   what ident should be used in app state to connect the router's join.  If deferred, the router must cause a call to\n *   the r/target-ready mutation (or use the target-ready* mutation helper) with a {:target ident} parameter to indicate\n *   that the route target is loaded and ready for display.\n * \n *   `params` will be a map from any keywords found in `route-segment` to the string value of that path element.\n * \n *   WARNING: This method MUST be side-effect free.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.get_will_enter = (function com$fulcrologic$fulcro$routing$dynamic_routing$get_will_enter(class$){\nvar temp__5733__auto__ = com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(class$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"will-enter\",\"will-enter\",-692415624)], 0));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar will_enter = temp__5733__auto__;\nreturn will_enter;\n} else {\nvar ident = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2(class$,cljs.core.PersistentArrayMap.EMPTY);\nif(cljs.core.truth_(ident)){\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,69,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Component must have an ident for routing to work properly:\",com.fulcrologic.fulcro.components.component_name(class$)], null);\n}),null)),null,-1127573491);\n}\n\nreturn (function (_,___$1){\nreturn (com.fulcrologic.fulcro.routing.dynamic_routing.route_immediate.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.routing.dynamic_routing.route_immediate.cljs$core$IFn$_invoke$arity$1(ident) : com.fulcrologic.fulcro.routing.dynamic_routing.route_immediate.call(null,ident));\n});\n}\n});\n/**\n * Universal CLJC version of will-enter.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.will_enter = (function com$fulcrologic$fulcro$routing$dynamic_routing$will_enter(class$,app,params){\nvar temp__5735__auto__ = com.fulcrologic.fulcro.routing.dynamic_routing.get_will_enter(class$);\nif(cljs.core.truth_(temp__5735__auto__)){\nvar will_enter = temp__5735__auto__;\nvar _STAR_target_class_STAR__orig_val__72503 = com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_;\nvar _STAR_target_class_STAR__temp_val__72504 = class$;\n(com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_ = _STAR_target_class_STAR__temp_val__72504);\n\ntry{return (will_enter.cljs$core$IFn$_invoke$arity$2 ? will_enter.cljs$core$IFn$_invoke$arity$2(app,params) : will_enter.call(null,app,params));\n}finally {(com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_ = _STAR_target_class_STAR__orig_val__72503);\n}} else {\nreturn null;\n}\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.route_target_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$route_target_QMARK_(component){\nreturn cljs.core.boolean$(com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(component,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"route-segment\",\"route-segment\",1812935886)], 0)));\n});\n/**\n * Returns the function of a route target to be called with\n *   the current component and props. If it returns `true` then the routing operation will continue.  If it returns `false`\n *   then whatever new route was requested will be completely abandoned. If this component has a `allow-route-change?`\n *   then the return value of will-leave will be ignored.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.get_will_leave = (function com$fulcrologic$fulcro$routing$dynamic_routing$get_will_leave(this$){\nvar or__4126__auto__ = com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(this$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"will-leave\",\"will-leave\",-1009838517)], 0));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.constantly(true);\n}\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.will_leave = (function com$fulcrologic$fulcro$routing$dynamic_routing$will_leave(c,props){\nvar temp__5735__auto__ = com.fulcrologic.fulcro.routing.dynamic_routing.get_will_leave(c);\nif(cljs.core.truth_(temp__5735__auto__)){\nvar f = temp__5735__auto__;\nvar _STAR_target_class_STAR__orig_val__72505 = com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_;\nvar _STAR_target_class_STAR__temp_val__72506 = com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(c,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\n(com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_ = _STAR_target_class_STAR__temp_val__72506);\n\ntry{return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(c,props) : f.call(null,c,props));\n}finally {(com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_ = _STAR_target_class_STAR__orig_val__72505);\n}} else {\nreturn null;\n}\n});\n/**\n * Returns the function of a route target to be called with the current component and props.\n * If it returns `true` then the routing operation can continue.  If it returns `false`\n * then whatever new route was requested will be completely abandoned. This handler MUST NOT side-effect, and\n * may be called multiple times on a single route request.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.get_allow_route_change_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$get_allow_route_change_QMARK_(this$){\nvar or__4126__auto__ = com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(this$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"allow-route-change?\",\"allow-route-change?\",173143289)], 0));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = (function (){var temp__5735__auto__ = com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(this$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"will-leave\",\"will-leave\",-1009838517)], 0));\nif(cljs.core.truth_(temp__5735__auto__)){\nvar will_leave = temp__5735__auto__;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,103,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"DEPRECATED USE OF `:will-leave` to check for allowable routing. You should add :allow-route-change? to: \",com.fulcrologic.fulcro.components.component_name(this$)], null);\n}),null)),null,-2005306475);\n\nreturn (function (){\nvar G__72509 = this$;\nvar G__72510 = com.fulcrologic.fulcro.components.props(this$);\nreturn (will_leave.cljs$core$IFn$_invoke$arity$2 ? will_leave.cljs$core$IFn$_invoke$arity$2(G__72509,G__72510) : will_leave.call(null,G__72509,G__72510));\n});\n} else {\nreturn null;\n}\n})();\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn cljs.core.constantly(true);\n}\n}\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.allow_route_change_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$allow_route_change_QMARK_(c){\ntry{var temp__5735__auto__ = com.fulcrologic.fulcro.routing.dynamic_routing.get_allow_route_change_QMARK_(c);\nif(cljs.core.truth_(temp__5735__auto__)){\nvar f = temp__5735__auto__;\nvar _STAR_target_class_STAR__orig_val__72512 = com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_;\nvar _STAR_target_class_STAR__temp_val__72513 = com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(c,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\n(com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_ = _STAR_target_class_STAR__temp_val__72513);\n\ntry{return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(c) : f.call(null,c));\n}finally {(com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_ = _STAR_target_class_STAR__orig_val__72512);\n}} else {\nreturn null;\n}\n}catch (e72511){var e = e72511;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,113,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot evalutate route change. Assuming ok. Exception message: \",cljs.core.ex_message(e)], null);\n}),null)),null,-902036474);\n\nreturn true;\n}});\ncom.fulcrologic.fulcro.routing.dynamic_routing.route_lifecycle_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$route_lifecycle_QMARK_(component){\nreturn cljs.core.boolean$(com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(component,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"will-leave\",\"will-leave\",-1009838517)], 0)));\n});\n/**\n * Returns a set of classes to which this router routes.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.get_targets = (function com$fulcrologic$fulcro$routing$dynamic_routing$get_targets(router){\nreturn cljs.core.set(com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(router,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"router-targets\",\"router-targets\",1582229763)], 0)));\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.ident_matches_expectation_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$ident_matches_expectation_QMARK_(p__72514,p__72515){\nvar vec__72516 = p__72514;\nvar expected_table = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72516,(0),null);\nvar maybe_expected_id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72516,(1),null);\nvar vec__72519 = p__72515;\nvar table = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72519,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72519,(1),null);\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(expected_table,table)) && ((((maybe_expected_id == null)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(maybe_expected_id,id)))));\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.check_ident_matches_expectation_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$check_ident_matches_expectation_QMARK_(fn_name,ident){\nif(cljs.core.truth_((function (){var and__4115__auto__ = goog.DEBUG;\nif(cljs.core.truth_(and__4115__auto__)){\nvar and__4115__auto____$1 = com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_;\nif(cljs.core.truth_(and__4115__auto____$1)){\nreturn (!(com.fulcrologic.fulcro.routing.dynamic_routing.ident_matches_expectation_QMARK_(com.fulcrologic.fulcro.components.ident(com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_,cljs.core.PersistentArrayMap.EMPTY),ident)));\n} else {\nreturn and__4115__auto____$1;\n}\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,133,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [fn_name,\" was invoked with the ident \",ident,\" which doesn't seem to match the ident of the wrapping component (class \",com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_,\" , ident [\",cljs.core.first(com.fulcrologic.fulcro.components.ident(com.fulcrologic.fulcro.routing.dynamic_routing._STAR_target_class_STAR_,cljs.core.PersistentArrayMap.EMPTY)),\" ...])\"], null);\n}),null)),null,-2036219243);\n} else {\nreturn null;\n}\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.route_immediate = (function com$fulcrologic$fulcro$routing$dynamic_routing$route_immediate(ident){\ncom.fulcrologic.fulcro.routing.dynamic_routing.check_ident_matches_expectation_QMARK_(\"route-immediate\",ident);\n\nreturn cljs.core.with_meta(ident,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"immediate\",\"immediate\",-1684692069),true], null));\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.route_deferred = (function com$fulcrologic$fulcro$routing$dynamic_routing$route_deferred(ident,completion_fn){\ncom.fulcrologic.fulcro.routing.dynamic_routing.check_ident_matches_expectation_QMARK_(\"route-deferred\",ident);\n\nreturn cljs.core.with_meta(ident,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"immediate\",\"immediate\",-1684692069),false,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),completion_fn], null));\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.immediate_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$immediate_QMARK_(ident){\nvar G__72522 = ident;\nvar G__72522__$1 = (((G__72522 == null))?null:cljs.core.meta(G__72522));\nif((G__72522__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"immediate\",\"immediate\",-1684692069).cljs$core$IFn$_invoke$arity$1(G__72522__$1);\n}\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.apply_route_STAR_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$apply_route_STAR_(state_map,p__72523){\nvar map__72524 = p__72523;\nvar map__72524__$1 = (((((!((map__72524 == null))))?(((((map__72524.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72524.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72524):map__72524);\nvar router = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72524__$1,new cljs.core.Keyword(null,\"router\",\"router\",1091916230));\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72524__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar router_class = new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(router));\nvar router_id = cljs.core.second(router);\nvar target_class = new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(target));\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,152,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Applying route ident\",target,\"to router\",router_id], null);\n}),null)),null,-1023535650);\n\nif((router_class == null)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,154,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"apply-route* was called without a proper :router argument.\"], null);\n}),null)),null,634820307);\n} else {\n}\n\nif((target_class == null)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,156,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"apply-route* for router \",router_class,\"was given a target that did not have a component. \",\"Did you remember to call route-deferred or route-immediate?\"], null);\n}),null)),null,-1510718146);\n} else {\n}\n\nreturn com.fulcrologic.fulcro.components.set_query_STAR_(cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc_in(state_map,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(router,new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-route\",-2083218871)),target),router,cljs.core.dissoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"pending-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/pending-route\",-1358888373)),router_class,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"id\",\"com.fulcrologic.fulcro.routing.dynamic-routing/id\",-214558961),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"asm-id\",\"com.fulcrologic.fulcro.ui-state-machines/asm-id\",232311394),router_id], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-route\",-2083218871),com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(target_class,state_map)], null)], null)], null));\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.router_for_pending_target = (function com$fulcrologic$fulcro$routing$dynamic_routing$router_for_pending_target(state_map,target){\nvar routers = (function (){var G__72526 = state_map;\nvar G__72526__$1 = (((G__72526 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"id\",\"com.fulcrologic.fulcro.routing.dynamic-routing/id\",-214558961).cljs$core$IFn$_invoke$arity$1(G__72526));\nif((G__72526__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.vals(G__72526__$1);\n}\n})();\nvar router_id = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (_,r){\nif(cljs.core.truth_((function (){var and__4115__auto__ = goog.DEBUG;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"id\",\"com.fulcrologic.fulcro.routing.dynamic-routing/id\",-214558961).cljs$core$IFn$_invoke$arity$1(r) == null);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,167,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"There is a router in state that is missing an ID. This indicates that\",\"you forgot to compose it into your initial state! It will fail to operate properly.\"], null);\n}),null)),null,1023954075);\n} else {\n}\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(target,(function (){var G__72527 = r;\nvar G__72527__$1 = (((G__72527 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"pending-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/pending-route\",-1358888373).cljs$core$IFn$_invoke$arity$1(G__72527));\nif((G__72527__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"target\",\"target\",253001721).cljs$core$IFn$_invoke$arity$1(G__72527__$1);\n}\n})())){\nreturn cljs.core.reduced(new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"id\",\"com.fulcrologic.fulcro.routing.dynamic-routing/id\",-214558961).cljs$core$IFn$_invoke$arity$1(r));\n} else {\nreturn null;\n}\n}),null,routers);\nreturn router_id;\n});\n/**\n * Mutation: Indicate that a target is ready.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.target_ready = com.fulcrologic.fulcro.mutations.__GT_Mutation(new cljs.core.Symbol(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"target-ready\",\"com.fulcrologic.fulcro.routing.dynamic-routing/target-ready\",-111862826,null));\n\ncom.fulcrologic.fulcro.mutations.mutate.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"target-ready\",\"com.fulcrologic.fulcro.routing.dynamic-routing/target-ready\",-111862826,null),(function (fulcro_mutation_env_symbol){\nvar map__72528 = new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(fulcro_mutation_env_symbol));\nvar map__72528__$1 = (((((!((map__72528 == null))))?(((((map__72528.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72528.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72528):map__72528);\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72528__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),(function com$fulcrologic$fulcro$routing$dynamic_routing$refresh(_){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-route\",-2083218871)], null);\n}),new cljs.core.Keyword(null,\"action\",\"action\",-811238024),(function com$fulcrologic$fulcro$routing$dynamic_routing$action(p__72530){\nvar map__72531 = p__72530;\nvar map__72531__$1 = (((((!((map__72531 == null))))?(((((map__72531.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72531.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72531):map__72531);\nvar app = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72531__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar _STAR_after_render_STAR__orig_val__72533_72762 = com.fulcrologic.fulcro.components._STAR_after_render_STAR_;\nvar _STAR_after_render_STAR__temp_val__72534_72763 = true;\n(com.fulcrologic.fulcro.components._STAR_after_render_STAR_ = _STAR_after_render_STAR__temp_val__72534_72763);\n\ntry{var state_map_72764 = com.fulcrologic.fulcro.application.current_state.cljs$core$IFn$_invoke$arity$1(app);\nvar router_id_72765 = com.fulcrologic.fulcro.routing.dynamic_routing.router_for_pending_target(state_map_72764,target);\nif(cljs.core.truth_(router_id_72765)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,183,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Router\",router_id_72765,\"notified that pending route is ready.\"], null);\n}),null)),null,-1761638747);\n\nif(cljs.core.truth_((function (){var and__4115__auto__ = goog.DEBUG;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map_72764,target) == null);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,185,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"target-ready\",\"com.fulcrologic.fulcro.routing.dynamic-routing/target-ready\",-111862826,null),\"should route to\",target,\"but there is no data in the DB for the ident.\",\"Perhaps you supplied a wrong ident?\"], null);\n}),null)),null,429629290);\n} else {\n}\n\ncom.fulcrologic.fulcro.ui_state_machines.trigger_BANG_.cljs$core$IFn$_invoke$arity$3(app,router_id_72765,new cljs.core.Keyword(null,\"ready!\",\"ready!\",-1695278696));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,188,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"dr/target-ready! was called but there was no router waiting for the target listed: \",target,\"This could mean you sent one ident, and indicated ready on another.\"], null);\n}),null)),null,1240100590);\n}\n}finally {(com.fulcrologic.fulcro.components._STAR_after_render_STAR_ = _STAR_after_render_STAR__orig_val__72533_72762);\n}\nreturn null;\n}),new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),(function (env){\nvar _STAR_after_render_STAR__orig_val__72535 = com.fulcrologic.fulcro.components._STAR_after_render_STAR_;\nvar _STAR_after_render_STAR__temp_val__72536 = true;\n(com.fulcrologic.fulcro.components._STAR_after_render_STAR_ = _STAR_after_render_STAR__temp_val__72536);\n\ntry{var temp__5735__auto__ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(new cljs.core.Keyword(null,\"app\",\"app\",-560961707).cljs$core$IFn$_invoke$arity$1(env),new cljs.core.Keyword(null,\"default-result-action!\",\"default-result-action!\",-622954374));\nif(cljs.core.truth_(temp__5735__auto__)){\nvar default_action = temp__5735__auto__;\nreturn (default_action.cljs$core$IFn$_invoke$arity$1 ? default_action.cljs$core$IFn$_invoke$arity$1(env) : default_action.call(null,env));\n} else {\nreturn null;\n}\n}finally {(com.fulcrologic.fulcro.components._STAR_after_render_STAR_ = _STAR_after_render_STAR__orig_val__72535);\n}})], null);\n}));\n/**\n * Indicate a target is ready.  Safe to use from within mutations.\n * \n *   target - The ident that was originally listed as a deferred target.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.target_ready_BANG_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$target_ready_BANG_(component_or_app,target){\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2(component_or_app,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__72537 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"target\",\"target\",253001721),target], null);\nreturn (com.fulcrologic.fulcro.routing.dynamic_routing.target_ready.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.routing.dynamic_routing.target_ready.cljs$core$IFn$_invoke$arity$1(G__72537) : com.fulcrologic.fulcro.routing.dynamic_routing.target_ready.call(null,G__72537));\n})()], null));\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$router_QMARK_(component){\nreturn cljs.core.boolean$(com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(component,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"router-targets\",\"router-targets\",1582229763)], 0)));\n});\n/**\n * Returns the elements of actual-path that match the route-segment definition.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.matching_prefix = (function com$fulcrologic$fulcro$routing$dynamic_routing$matching_prefix(route_segment,actual_path){\nvar matching_segment = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,p__72538){\nvar vec__72539 = p__72538;\nvar expected = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72539,(0),null);\nvar actual = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72539,(1),null);\nif(((typeof expected === 'string') && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(expected,actual)))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,actual);\n} else {\nif((((expected instanceof cljs.core.Keyword)) && (cljs.core.seq(cljs.core.str.cljs$core$IFn$_invoke$arity$1(actual))))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,cljs.core.str.cljs$core$IFn$_invoke$arity$1(actual));\n} else {\nreturn result;\n\n}\n}\n}),cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$3((function (a,b){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null);\n}),route_segment,actual_path));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(matching_segment),cljs.core.count(route_segment))){\nreturn matching_segment;\n} else {\nreturn null;\n}\n});\n/**\n * Get the class of the component that is currently being routed to.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.current_route_class = (function com$fulcrologic$fulcro$routing$dynamic_routing$current_route_class(this$){\nvar state_map = com.fulcrologic.fulcro.components.component__GT_state_map(this$);\nvar class$ = (function (){var G__72543 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(this$,state_map);\nvar G__72543__$1 = (((G__72543 == null))?null:edn_query_language.core.query__GT_ast(G__72543));\nvar G__72543__$2 = (((G__72543__$1 == null))?null:new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(G__72543__$1));\nvar G__72543__$3 = (((G__72543__$2 == null))?null:cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__72542_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-route\",-2083218871),new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(p1__72542_SHARP_));\n}),G__72543__$2));\nvar G__72543__$4 = (((G__72543__$3 == null))?null:cljs.core.first(G__72543__$3));\nif((G__72543__$4 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(G__72543__$4);\n}\n})();\nvar class$__$1 = (cljs.core.truth_(goog.DEBUG)?com.fulcrologic.fulcro.components.registry_key__GT_class(com.fulcrologic.fulcro.components.class__GT_registry_key(class$)):class$);\nreturn class$__$1;\n});\n/**\n * Given a router class and a path segment, returns the class of *that router's* target that accepts the given URI path,\n *   which is a vector of (string) URI components.\n * \n *   Returns nil if there is no target that accepts the path, or a map containing:\n * \n *   {:target class\n * :matching-prefix prefix}\n * \n *   where `class` is the component class that accepts the path (the target, NOT the router), and `matching-prefix` is the\n *   portion of the path that is accepted by that class.\n * \n *   NOTE: If more than one target matches, then the target with the longest match will be returned. A warning will be\n *   printed if more than one match of equal length is found.\n *   \n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.route_target = (function com$fulcrologic$fulcro$routing$dynamic_routing$route_target(router_class,path){\nif(cljs.core.truth_((function (){var and__4115__auto__ = router_class;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_(router_class);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar targets = com.fulcrologic.fulcro.routing.dynamic_routing.get_targets(router_class);\nvar matches = cljs.core.reverse(cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"length\",\"length\",588987862),cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,target_class){\nvar prefix = (function (){var and__4115__auto__ = target_class;\nif(cljs.core.truth_(and__4115__auto__)){\nif(com.fulcrologic.fulcro.routing.dynamic_routing.route_target_QMARK_(target_class)){\nvar G__72546 = target_class;\nvar G__72546__$1 = (((G__72546 == null))?null:com.fulcrologic.fulcro.routing.dynamic_routing.route_segment(G__72546));\nif((G__72546__$1 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.matching_prefix(G__72546__$1,path);\n}\n} else {\nreturn false;\n}\n} else {\nreturn and__4115__auto__;\n}\n})();\nif(cljs.core.truth_((function (){var and__4115__auto__ = prefix;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.seq(prefix);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"length\",\"length\",588987862),cljs.core.count(prefix),new cljs.core.Keyword(null,\"matching-prefix\",\"matching-prefix\",-539262173),prefix,new cljs.core.Keyword(null,\"target\",\"target\",253001721),target_class], null));\n} else {\nreturn result;\n}\n}),cljs.core.PersistentVector.EMPTY,targets)));\nvar max_length = (function (){var G__72547 = matches;\nvar G__72547__$1 = (((G__72547 == null))?null:cljs.core.first(G__72547));\nif((G__72547__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"length\",\"length\",588987862).cljs$core$IFn$_invoke$arity$1(G__72547__$1);\n}\n})();\nvar match = cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__72544_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(max_length,new cljs.core.Keyword(null,\"length\",\"length\",588987862).cljs$core$IFn$_invoke$arity$1(p1__72544_SHARP_));\n}),matches);\nif(cljs.core.truth_(cljs.core.second(match))){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,263,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"More than one route target matches\",path], null);\n}),null)),null,-1954739095);\n} else {\n}\n\nreturn cljs.core.first(match);\n} else {\nreturn null;\n}\n});\n/**\n * Returns true if the given component is a router that manages a route target that will accept the given path.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.accepts_route_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$accepts_route_QMARK_(component,path){\nreturn cljs.core.boolean$(com.fulcrologic.fulcro.routing.dynamic_routing.route_target(component,path));\n});\n/**\n * Returns the AST node for a query that represents the router that has a target that can accept the given path. This is a breadth-first\n *   search.\n * \n *   ast - A query AST node\n *   path - A vector of the current URI segments.\n * \n *   Returns an AST node or nil if none is found.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_route = (function com$fulcrologic$fulcro$routing$dynamic_routing$ast_node_for_route(p__72550,path){\nvar map__72551 = p__72550;\nvar map__72551__$1 = (((((!((map__72551 == null))))?(((((map__72551.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72551.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72551):map__72551);\nvar ast_node = map__72551__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72551__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72551__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar or__4126__auto__ = ((com.fulcrologic.fulcro.routing.dynamic_routing.accepts_route_QMARK_(component,path))?ast_node:false);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = cljs.core.some((function (p1__72548_SHARP_){\nif(com.fulcrologic.fulcro.routing.dynamic_routing.accepts_route_QMARK_(new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(p1__72548_SHARP_),path)){\nreturn p1__72548_SHARP_;\n} else {\nreturn false;\n}\n}),children);\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn cljs.core.some((function (p1__72549_SHARP_){\nreturn (com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_route.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_route.cljs$core$IFn$_invoke$arity$2(p1__72549_SHARP_,path) : com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_route.call(null,p1__72549_SHARP_,path));\n}),children);\n}\n}\n});\n/**\n * Returns the AST node for a query that represents the closest \"live\" (on-screen) router\n * \n *   ast - A query AST node\n * \n *   Returns an AST node or nil if none is found.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router = (function com$fulcrologic$fulcro$routing$dynamic_routing$ast_node_for_live_router(app,p__72555){\nvar map__72556 = p__72555;\nvar map__72556__$1 = (((((!((map__72556 == null))))?(((((map__72556.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72556.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72556):map__72556);\nvar ast_node = map__72556__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72556__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72556__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar live_router_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$ast_node_for_live_router_$_live_router_QMARK_(c){\nreturn ((com.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_(c)) && (cljs.core.boolean$(com.fulcrologic.fulcro.components.class__GT_any(app,c))));\n});\nvar or__4126__auto__ = (function (){var and__4115__auto__ = live_router_QMARK_(component);\nif(cljs.core.truth_(and__4115__auto__)){\nreturn ast_node;\n} else {\nreturn and__4115__auto__;\n}\n})();\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = cljs.core.some((function (p1__72553_SHARP_){\nvar and__4115__auto__ = live_router_QMARK_(new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(p1__72553_SHARP_));\nif(cljs.core.truth_(and__4115__auto__)){\nreturn p1__72553_SHARP_;\n} else {\nreturn and__4115__auto__;\n}\n}),children);\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn cljs.core.some((function (p1__72554_SHARP_){\nreturn (com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router.cljs$core$IFn$_invoke$arity$2(app,p1__72554_SHARP_) : com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router.call(null,app,p1__72554_SHARP_));\n}),children);\n}\n}\n});\n/**\n * Mutation: Indicate that a given route is ready and should show the result.\n * \n *   router - The ident of the router, with metadata :component that is the class of the router.\n *   target - The ident of the target route, with metadata :component that is the class of the target.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.apply_route = com.fulcrologic.fulcro.mutations.__GT_Mutation(new cljs.core.Symbol(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"apply-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/apply-route\",-2135500172,null));\n\ncom.fulcrologic.fulcro.mutations.mutate.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"apply-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/apply-route\",-2135500172,null),(function (fulcro_mutation_env_symbol){\nvar map__72558 = new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(fulcro_mutation_env_symbol));\nvar map__72558__$1 = (((((!((map__72558 == null))))?(((((map__72558.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72558.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72558):map__72558);\nvar params = map__72558__$1;\nvar router = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72558__$1,new cljs.core.Keyword(null,\"router\",\"router\",1091916230));\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72558__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),(function com$fulcrologic$fulcro$routing$dynamic_routing$action(p__72560){\nvar map__72561 = p__72560;\nvar map__72561__$1 = (((((!((map__72561 == null))))?(((((map__72561.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72561.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72561):map__72561);\nvar app = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72561__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72561__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar _STAR_after_render_STAR__orig_val__72563_72789 = com.fulcrologic.fulcro.components._STAR_after_render_STAR_;\nvar _STAR_after_render_STAR__temp_val__72564_72790 = true;\n(com.fulcrologic.fulcro.components._STAR_after_render_STAR_ = _STAR_after_render_STAR__temp_val__72564_72790);\n\ntry{cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(state,com.fulcrologic.fulcro.routing.dynamic_routing.apply_route_STAR_,params);\n}finally {(com.fulcrologic.fulcro.components._STAR_after_render_STAR_ = _STAR_after_render_STAR__orig_val__72563_72789);\n}\nreturn null;\n}),new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),(function (env){\nvar _STAR_after_render_STAR__orig_val__72565 = com.fulcrologic.fulcro.components._STAR_after_render_STAR_;\nvar _STAR_after_render_STAR__temp_val__72566 = true;\n(com.fulcrologic.fulcro.components._STAR_after_render_STAR_ = _STAR_after_render_STAR__temp_val__72566);\n\ntry{var temp__5735__auto__ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(new cljs.core.Keyword(null,\"app\",\"app\",-560961707).cljs$core$IFn$_invoke$arity$1(env),new cljs.core.Keyword(null,\"default-result-action!\",\"default-result-action!\",-622954374));\nif(cljs.core.truth_(temp__5735__auto__)){\nvar default_action = temp__5735__auto__;\nreturn (default_action.cljs$core$IFn$_invoke$arity$1 ? default_action.cljs$core$IFn$_invoke$arity$1(env) : default_action.call(null,env));\n} else {\nreturn null;\n}\n}finally {(com.fulcrologic.fulcro.components._STAR_after_render_STAR_ = _STAR_after_render_STAR__orig_val__72565);\n}})], null);\n}));\ncom.fulcrologic.fulcro.routing.dynamic_routing.mark_route_pending_STAR_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$mark_route_pending_STAR_(state_map,p__72567){\nvar map__72568 = p__72567;\nvar map__72568__$1 = (((((!((map__72568 == null))))?(((((map__72568.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72568.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72568):map__72568);\nvar params = map__72568__$1;\nvar router = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72568__$1,new cljs.core.Keyword(null,\"router\",\"router\",1091916230));\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72568__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nreturn cljs.core.assoc_in(state_map,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(router,new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"pending-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/pending-route\",-1358888373)),params);\n});\nvar target_ready_STAR_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$target_ready_STAR_(state_map,target){\nvar router_id = com.fulcrologic.fulcro.routing.dynamic_routing.router_for_pending_target(state_map,target);\nif(cljs.core.truth_(router_id)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.apply_route_STAR_(state_map,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"id\",\"com.fulcrologic.fulcro.routing.dynamic-routing/id\",-214558961),router_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"pending-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/pending-route\",-1358888373)], null)));\n} else {\nreturn state_map;\n}\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.ready_handler = (function com$fulcrologic$fulcro$routing$dynamic_routing$ready_handler(env){\nvar new_env = com.fulcrologic.fulcro.ui_state_machines.apply_action.cljs$core$IFn$_invoke$arity$variadic(com.fulcrologic.fulcro.ui_state_machines.store(com.fulcrologic.fulcro.ui_state_machines.store(env,new cljs.core.Keyword(null,\"path-segment\",\"path-segment\",1516798997),com.fulcrologic.fulcro.ui_state_machines.retrieve.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.Keyword(null,\"pending-path-segment\",\"pending-path-segment\",-1932876268))),new cljs.core.Keyword(null,\"pending-path-segment\",\"pending-path-segment\",-1932876268),cljs.core.PersistentVector.EMPTY),target_ready_STAR_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([com.fulcrologic.fulcro.ui_state_machines.retrieve.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.Keyword(null,\"target\",\"target\",253001721))], 0));\nvar app = new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"app\",\"com.fulcrologic.fulcro.ui-state-machines/app\",-1843831489).cljs$core$IFn$_invoke$arity$1(env);\nif(cljs.core.truth_(app)){\ncom.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2(app,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(com.fulcrologic.fulcro.algorithms.indexing.reindex.cljs$core$IFn$_invoke$arity$0 ? com.fulcrologic.fulcro.algorithms.indexing.reindex.cljs$core$IFn$_invoke$arity$0() : com.fulcrologic.fulcro.algorithms.indexing.reindex.call(null))], null));\n} else {\n}\n\nreturn new_env;\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.fail_handler = (function com$fulcrologic$fulcro$routing$dynamic_routing$fail_handler(env){\nreturn env;\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.route_handler = (function com$fulcrologic$fulcro$routing$dynamic_routing$route_handler(p__72570){\nvar map__72571 = p__72570;\nvar map__72571__$1 = (((((!((map__72571 == null))))?(((((map__72571.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72571.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72571):map__72571);\nvar env = map__72571__$1;\nvar app = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72571__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"app\",\"com.fulcrologic.fulcro.ui-state-machines/app\",-1843831489));\nvar event_data = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72571__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"event-data\",\"com.fulcrologic.fulcro.ui-state-machines/event-data\",742794031));\nvar map__72573 = event_data;\nvar map__72573__$1 = (((((!((map__72573 == null))))?(((((map__72573.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72573.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72573):map__72573);\nvar router = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72573__$1,new cljs.core.Keyword(null,\"router\",\"router\",1091916230));\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72573__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar error_timeout = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__72573__$1,new cljs.core.Keyword(null,\"error-timeout\",\"error-timeout\",-1004615840),(5000));\nvar deferred_timeout = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__72573__$1,new cljs.core.Keyword(null,\"deferred-timeout\",\"deferred-timeout\",1616220530),(20));\nvar path_segment = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72573__$1,new cljs.core.Keyword(null,\"path-segment\",\"path-segment\",1516798997));\nvar immediate_QMARK_ = com.fulcrologic.fulcro.routing.dynamic_routing.immediate_QMARK_(target);\nreturn com.fulcrologic.fulcro.ui_state_machines.store((cljs.core.truth_(immediate_QMARK_)?(function (){var new_env = com.fulcrologic.fulcro.ui_state_machines.activate(com.fulcrologic.fulcro.ui_state_machines.apply_action.cljs$core$IFn$_invoke$arity$variadic(com.fulcrologic.fulcro.ui_state_machines.store(env,new cljs.core.Keyword(null,\"path-segment\",\"path-segment\",1516798997),path_segment),com.fulcrologic.fulcro.routing.dynamic_routing.apply_route_STAR_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([event_data], 0)),new cljs.core.Keyword(null,\"routed\",\"routed\",-707282794));\nif(cljs.core.truth_(app)){\ncom.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2(app,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(com.fulcrologic.fulcro.algorithms.indexing.reindex.cljs$core$IFn$_invoke$arity$0 ? com.fulcrologic.fulcro.algorithms.indexing.reindex.cljs$core$IFn$_invoke$arity$0() : com.fulcrologic.fulcro.algorithms.indexing.reindex.call(null))], null));\n} else {\n}\n\nreturn new_env;\n})():com.fulcrologic.fulcro.ui_state_machines.activate(com.fulcrologic.fulcro.ui_state_machines.set_timeout.cljs$core$IFn$_invoke$arity$6(com.fulcrologic.fulcro.ui_state_machines.set_timeout.cljs$core$IFn$_invoke$arity$6(com.fulcrologic.fulcro.ui_state_machines.apply_action.cljs$core$IFn$_invoke$arity$variadic(com.fulcrologic.fulcro.ui_state_machines.store(env,new cljs.core.Keyword(null,\"pending-path-segment\",\"pending-path-segment\",-1932876268),path_segment),com.fulcrologic.fulcro.routing.dynamic_routing.mark_route_pending_STAR_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([event_data], 0)),new cljs.core.Keyword(null,\"error-timer\",\"error-timer\",347765002),new cljs.core.Keyword(null,\"timeout!\",\"timeout!\",-316117497),cljs.core.PersistentArrayMap.EMPTY,error_timeout,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),null,new cljs.core.Keyword(null,\"ready!\",\"ready!\",-1695278696),null], null), null)),new cljs.core.Keyword(null,\"delay-timer\",\"delay-timer\",-920427787),new cljs.core.Keyword(null,\"waiting!\",\"waiting!\",373081239),cljs.core.PersistentArrayMap.EMPTY,deferred_timeout,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),null,new cljs.core.Keyword(null,\"ready!\",\"ready!\",-1695278696),null], null), null)),new cljs.core.Keyword(null,\"deferred\",\"deferred\",-1976960688))),new cljs.core.Keyword(null,\"target\",\"target\",253001721),target);\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.RouterStateMachine = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"actors\",\"com.fulcrologic.fulcro.ui-state-machines/actors\",89596064),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"router\",\"router\",1091916230),null], null), null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"aliases\",\"com.fulcrologic.fulcro.ui-state-machines/aliases\",-320387324),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"current-route\",\"current-route\",2067529448),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"router\",\"router\",1091916230),new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-route\",-2083218871)], null),new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"router\",\"router\",1091916230),new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-state\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-state\",2011639269)], null)], null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"states\",\"com.fulcrologic.fulcro.ui-state-machines/states\",-1501579308),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"initial\",\"initial\",1854648214),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.route_handler], null),new cljs.core.Keyword(null,\"deferred\",\"deferred\",-1976960688),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"events\",\"com.fulcrologic.fulcro.ui-state-machines/events\",301935363),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"waiting!\",\"waiting!\",373081239),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727)], null),new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.route_handler], null),new cljs.core.Keyword(null,\"ready!\",\"ready!\",-1695278696),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"routed\",\"routed\",-707282794),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.ready_handler], null),new cljs.core.Keyword(null,\"timeout!\",\"timeout!\",-316117497),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.fail_handler], null)], null)], null),new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"events\",\"com.fulcrologic.fulcro.ui-state-machines/events\",301935363),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"waiting!\",\"waiting!\",373081239),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727)], null),new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.route_handler], null),new cljs.core.Keyword(null,\"ready!\",\"ready!\",-1695278696),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"routed\",\"routed\",-707282794),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.ready_handler], null),new cljs.core.Keyword(null,\"timeout!\",\"timeout!\",-316117497),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.fail_handler], null)], null)], null),new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"events\",\"com.fulcrologic.fulcro.ui-state-machines/events\",301935363),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.route_handler], null),new cljs.core.Keyword(null,\"ready!\",\"ready!\",-1695278696),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"routed\",\"routed\",-707282794),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.ready_handler], null)], null)], null),new cljs.core.Keyword(null,\"routed\",\"routed\",-707282794),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"events\",\"com.fulcrologic.fulcro.ui-state-machines/events\",301935363),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"waiting!\",\"waiting!\",373081239),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),cljs.core.identity], null),new cljs.core.Keyword(null,\"timeout!\",\"timeout!\",-316117497),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),cljs.core.identity], null),new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.route_handler], null)], null)], null)], null)], null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"state-machine-id\",\"com.fulcrologic.fulcro.ui-state-machines/state-machine-id\",-1104142583),new cljs.core.Symbol(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"RouterStateMachine\",\"com.fulcrologic.fulcro.routing.dynamic-routing/RouterStateMachine\",1134286079,null));\n\ncom.fulcrologic.fulcro.ui_state_machines.register_state_machine_BANG_(new cljs.core.Symbol(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"RouterStateMachine\",\"com.fulcrologic.fulcro.routing.dynamic-routing/RouterStateMachine\",1134286079,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"actors\",\"com.fulcrologic.fulcro.ui-state-machines/actors\",89596064),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"router\",\"router\",1091916230),null], null), null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"aliases\",\"com.fulcrologic.fulcro.ui-state-machines/aliases\",-320387324),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"current-route\",\"current-route\",2067529448),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"router\",\"router\",1091916230),new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-route\",-2083218871)], null),new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"router\",\"router\",1091916230),new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-state\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-state\",2011639269)], null)], null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"states\",\"com.fulcrologic.fulcro.ui-state-machines/states\",-1501579308),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"initial\",\"initial\",1854648214),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.route_handler], null),new cljs.core.Keyword(null,\"deferred\",\"deferred\",-1976960688),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"events\",\"com.fulcrologic.fulcro.ui-state-machines/events\",301935363),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"waiting!\",\"waiting!\",373081239),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727)], null),new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.route_handler], null),new cljs.core.Keyword(null,\"ready!\",\"ready!\",-1695278696),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"routed\",\"routed\",-707282794),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.ready_handler], null),new cljs.core.Keyword(null,\"timeout!\",\"timeout!\",-316117497),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.fail_handler], null)], null)], null),new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"events\",\"com.fulcrologic.fulcro.ui-state-machines/events\",301935363),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"waiting!\",\"waiting!\",373081239),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727)], null),new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.route_handler], null),new cljs.core.Keyword(null,\"ready!\",\"ready!\",-1695278696),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"routed\",\"routed\",-707282794),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.ready_handler], null),new cljs.core.Keyword(null,\"timeout!\",\"timeout!\",-316117497),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.fail_handler], null)], null)], null),new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"events\",\"com.fulcrologic.fulcro.ui-state-machines/events\",301935363),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.route_handler], null),new cljs.core.Keyword(null,\"ready!\",\"ready!\",-1695278696),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"target-state\",\"com.fulcrologic.fulcro.ui-state-machines/target-state\",-332924947),new cljs.core.Keyword(null,\"routed\",\"routed\",-707282794),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.ready_handler], null)], null)], null),new cljs.core.Keyword(null,\"routed\",\"routed\",-707282794),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"events\",\"com.fulcrologic.fulcro.ui-state-machines/events\",301935363),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"waiting!\",\"waiting!\",373081239),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),cljs.core.identity], null),new cljs.core.Keyword(null,\"timeout!\",\"timeout!\",-316117497),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),cljs.core.identity], null),new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"handler\",\"com.fulcrologic.fulcro.ui-state-machines/handler\",1642623182),com.fulcrologic.fulcro.routing.dynamic_routing.route_handler], null)], null)], null)], null)], null));\n/**\n * Internal algorithm: Returns a sequence of idents of the targets that the `new-route` goes through by analyzing the current\n *   application query and state.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.proposed_new_path = (function com$fulcrologic$fulcro$routing$dynamic_routing$proposed_new_path(var_args){\nvar G__72576 = arguments.length;\nswitch (G__72576) {\ncase 3:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.proposed_new_path.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.proposed_new_path.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.proposed_new_path.cljs$core$IFn$_invoke$arity$3 = (function (this_or_app,relative_class_or_instance,new_route){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.proposed_new_path.cljs$core$IFn$_invoke$arity$4(this_or_app,relative_class_or_instance,new_route,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.proposed_new_path.cljs$core$IFn$_invoke$arity$4 = (function (this_or_app,relative_class_or_instance,new_route,timeouts_and_params){\nvar app = com.fulcrologic.fulcro.components.any__GT_app(this_or_app);\nvar state_map = com.fulcrologic.fulcro.application.current_state.cljs$core$IFn$_invoke$arity$1(app);\nvar router = relative_class_or_instance;\nvar root_query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(router,state_map);\nvar ast = edn_query_language.core.query__GT_ast(root_query);\nvar root = com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_route(ast,new_route);\nvar result = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar G__72578_72798 = root;\nvar map__72579_72799 = G__72578_72798;\nvar map__72579_72800__$1 = (((((!((map__72579_72799 == null))))?(((((map__72579_72799.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72579_72799.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72579_72799):map__72579_72799);\nvar component_72801 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72579_72800__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar path_72802 = new_route;\nvar G__72578_72803__$1 = G__72578_72798;\nvar path_72804__$1 = path_72802;\nwhile(true){\nvar map__72592_72805 = G__72578_72803__$1;\nvar map__72592_72806__$1 = (((((!((map__72592_72805 == null))))?(((((map__72592_72805.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72592_72805.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72592_72805):map__72592_72805);\nvar component_72807__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72592_72806__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar path_72808__$2 = path_72804__$1;\nif(cljs.core.truth_((function (){var and__4115__auto__ = component_72807__$1;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_(component_72807__$1);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar map__72594_72809 = com.fulcrologic.fulcro.routing.dynamic_routing.route_target(component_72807__$1,path_72808__$2);\nvar map__72594_72810__$1 = (((((!((map__72594_72809 == null))))?(((((map__72594_72809.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72594_72809.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72594_72809):map__72594_72809);\nvar target_72811 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72594_72810__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar matching_prefix_72812 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72594_72810__$1,new cljs.core.Keyword(null,\"matching-prefix\",\"matching-prefix\",-539262173));\nvar target_ast_72813 = (function (){var G__72596 = target_72811;\nvar G__72596__$1 = (((G__72596 == null))?null:com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(G__72596,state_map));\nif((G__72596__$1 == null)){\nreturn null;\n} else {\nreturn edn_query_language.core.query__GT_ast(G__72596__$1);\n}\n})();\nvar prefix_length_72814 = cljs.core.count(matching_prefix_72812);\nvar remaining_path_72815 = cljs.core.vec(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(prefix_length_72814,path_72808__$2));\nvar segment_72816 = com.fulcrologic.fulcro.routing.dynamic_routing.route_segment(target_72811);\nvar params_72817 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (G__72578_72803__$1,path_72804__$1,map__72594_72809,map__72594_72810__$1,target_72811,matching_prefix_72812,target_ast_72813,prefix_length_72814,remaining_path_72815,segment_72816,map__72592_72805,map__72592_72806__$1,component_72807__$1,path_72808__$2,G__72578_72798,map__72579_72799,map__72579_72800__$1,component_72801,path_72802,app,state_map,router,root_query,ast,root,result){\nreturn (function (p,p__72597){\nvar vec__72598 = p__72597;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72598,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72598,(1),null);\nif((k instanceof cljs.core.Keyword)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p,k,v);\n} else {\nreturn p;\n}\n});})(G__72578_72803__$1,path_72804__$1,map__72594_72809,map__72594_72810__$1,target_72811,matching_prefix_72812,target_ast_72813,prefix_length_72814,remaining_path_72815,segment_72816,map__72592_72805,map__72592_72806__$1,component_72807__$1,path_72808__$2,G__72578_72798,map__72579_72799,map__72579_72800__$1,component_72801,path_72802,app,state_map,router,root_query,ast,root,result))\n,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(timeouts_and_params,new cljs.core.Keyword(null,\"error-timeout\",\"error-timeout\",-1004615840),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"deferred-timeout\",\"deferred-timeout\",1616220530)], 0)),cljs.core.map.cljs$core$IFn$_invoke$arity$3(((function (G__72578_72803__$1,path_72804__$1,map__72594_72809,map__72594_72810__$1,target_72811,matching_prefix_72812,target_ast_72813,prefix_length_72814,remaining_path_72815,segment_72816,map__72592_72805,map__72592_72806__$1,component_72807__$1,path_72808__$2,G__72578_72798,map__72579_72799,map__72579_72800__$1,component_72801,path_72802,app,state_map,router,root_query,ast,root,result){\nreturn (function (a,b){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null);\n});})(G__72578_72803__$1,path_72804__$1,map__72594_72809,map__72594_72810__$1,target_72811,matching_prefix_72812,target_ast_72813,prefix_length_72814,remaining_path_72815,segment_72816,map__72592_72805,map__72592_72806__$1,component_72807__$1,path_72808__$2,G__72578_72798,map__72579_72799,map__72579_72800__$1,component_72801,path_72802,app,state_map,router,root_query,ast,root,result))\n,segment_72816,matching_prefix_72812));\nvar target_ident_72818 = com.fulcrologic.fulcro.routing.dynamic_routing.will_enter(target_72811,app,params_72817);\nif((((!(edn_query_language.core.ident_QMARK_(target_ident_72818)))) || ((cljs.core.second(target_ident_72818) == null)))){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,412,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (G__72578_72803__$1,path_72804__$1,map__72594_72809,map__72594_72810__$1,target_72811,matching_prefix_72812,target_ast_72813,prefix_length_72814,remaining_path_72815,segment_72816,params_72817,target_ident_72818,map__72592_72805,map__72592_72806__$1,component_72807__$1,path_72808__$2,G__72578_72798,map__72579_72799,map__72579_72800__$1,component_72801,path_72802,app,state_map,router,root_query,ast,root,result){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"will-enter for router target\",com.fulcrologic.fulcro.components.component_name(target_72811),\"did not return a valid ident. Instead it returned: \",target_ident_72818], null);\n});})(G__72578_72803__$1,path_72804__$1,map__72594_72809,map__72594_72810__$1,target_72811,matching_prefix_72812,target_ast_72813,prefix_length_72814,remaining_path_72815,segment_72816,params_72817,target_ident_72818,map__72592_72805,map__72592_72806__$1,component_72807__$1,path_72808__$2,G__72578_72798,map__72579_72799,map__72579_72800__$1,component_72801,path_72802,app,state_map,router,root_query,ast,root,result))\n,null)),null,1760356249);\n} else {\n}\n\nif(((edn_query_language.core.ident_QMARK_(target_ident_72818)) && ((!(cljs.core.contains_QMARK_((function (){var G__72602 = target_ident_72818;\nif((G__72602 == null)){\nreturn null;\n} else {\nreturn cljs.core.meta(G__72602);\n}\n})(),new cljs.core.Keyword(null,\"immediate\",\"immediate\",-1684692069))))))){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,415,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (G__72578_72803__$1,path_72804__$1,map__72594_72809,map__72594_72810__$1,target_72811,matching_prefix_72812,target_ast_72813,prefix_length_72814,remaining_path_72815,segment_72816,params_72817,target_ident_72818,map__72592_72805,map__72592_72806__$1,component_72807__$1,path_72808__$2,G__72578_72798,map__72579_72799,map__72579_72800__$1,component_72801,path_72802,app,state_map,router,root_query,ast,root,result){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"will-enter for router target\",com.fulcrologic.fulcro.components.component_name(target_72811),\"did not wrap the ident in route-immediate or route-deferred.\"], null);\n});})(G__72578_72803__$1,path_72804__$1,map__72594_72809,map__72594_72810__$1,target_72811,matching_prefix_72812,target_ast_72813,prefix_length_72814,remaining_path_72815,segment_72816,params_72817,target_ident_72818,map__72592_72805,map__72592_72806__$1,component_72807__$1,path_72808__$2,G__72578_72798,map__72579_72799,map__72579_72800__$1,component_72801,path_72802,app,state_map,router,root_query,ast,root,result))\n,null)),null,-578164949);\n} else {\n}\n\nif(cljs.core.vector_QMARK_(target_ident_72818)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(result,cljs.core.conj,cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(target_ident_72818,cljs.core.assoc,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),target_72811,new cljs.core.Keyword(null,\"params\",\"params\",710516235),params_72817));\n} else {\n}\n\nif(cljs.core.seq(remaining_path_72815)){\nvar G__72819 = com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_route(target_ast_72813,remaining_path_72815);\nvar G__72820 = remaining_path_72815;\nG__72578_72803__$1 = G__72819;\npath_72804__$1 = G__72820;\ncontinue;\n} else {\n}\n} else {\n}\nbreak;\n}\n\nreturn cljs.core.deref(result);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.proposed_new_path.cljs$lang$maxFixedArity = 4);\n\n/**\n * Tell active routers that they are about to leave the screen. Returns false if any of them deny the route change.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.signal_router_leaving = (function com$fulcrologic$fulcro$routing$dynamic_routing$signal_router_leaving(var_args){\nvar G__72606 = arguments.length;\nswitch (G__72606) {\ncase 3:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.signal_router_leaving.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.signal_router_leaving.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.signal_router_leaving.cljs$core$IFn$_invoke$arity$3 = (function (app_or_comp,relative_class_or_instance,new_route){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.signal_router_leaving.cljs$core$IFn$_invoke$arity$4(app_or_comp,relative_class_or_instance,new_route,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.signal_router_leaving.cljs$core$IFn$_invoke$arity$4 = (function (app_or_comp,relative_class_or_instance,new_route,timeouts_and_params){\nvar new_path = com.fulcrologic.fulcro.routing.dynamic_routing.proposed_new_path.cljs$core$IFn$_invoke$arity$4(app_or_comp,relative_class_or_instance,new_route,timeouts_and_params);\nvar app = com.fulcrologic.fulcro.components.any__GT_app(app_or_comp);\nvar state_map = com.fulcrologic.fulcro.application.current_state.cljs$core$IFn$_invoke$arity$1(app);\nvar router = relative_class_or_instance;\nvar root_query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(router,state_map);\nvar ast = edn_query_language.core.query__GT_ast(root_query);\nvar root = com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router(app,ast);\nvar to_signal = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar to_cancel = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar _ = (function (){var G__72608 = root;\nvar map__72609 = G__72608;\nvar map__72609__$1 = (((((!((map__72609 == null))))?(((((map__72609.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72609.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72609):map__72609);\nvar node = map__72609__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72609__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72609__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar new_path_remaining = new_path;\nvar G__72608__$1 = G__72608;\nvar new_path_remaining__$1 = new_path_remaining;\nwhile(true){\nvar map__72611 = G__72608__$1;\nvar map__72611__$1 = (((((!((map__72611 == null))))?(((((map__72611.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72611.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72611):map__72611);\nvar node__$1 = map__72611__$1;\nvar component__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72611__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar children__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72611__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar new_path_remaining__$2 = new_path_remaining__$1;\nif(cljs.core.truth_((function (){var and__4115__auto__ = component__$1;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_(component__$1);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar new_target = cljs.core.first(new_path_remaining__$2);\nvar router_ident = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2(component__$1,cljs.core.PersistentArrayMap.EMPTY);\nvar active_target = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(router_ident,new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-route\",-2083218871)));\nvar map__72613 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(router_ident,new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"pending-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/pending-route\",-1358888373)));\nvar map__72613__$1 = (((((!((map__72613 == null))))?(((((map__72613.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72613.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72613):map__72613);\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72613__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar next_router = cljs.core.some(((function (G__72608__$1,new_path_remaining__$1,new_target,router_ident,active_target,map__72613,map__72613__$1,target,map__72611,map__72611__$1,node__$1,component__$1,children__$1,new_path_remaining__$2,G__72608,map__72609,map__72609__$1,node,component,children,new_path_remaining,new_path,app,state_map,router,root_query,ast,root,to_signal,to_cancel){\nreturn (function (p1__72603_SHARP_){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router(app,p1__72603_SHARP_);\n});})(G__72608__$1,new_path_remaining__$1,new_target,router_ident,active_target,map__72613,map__72613__$1,target,map__72611,map__72611__$1,node__$1,component__$1,children__$1,new_path_remaining__$2,G__72608,map__72609,map__72609__$1,node,component,children,new_path_remaining,new_path,app,state_map,router,root_query,ast,root,to_signal,to_cancel))\n,children__$1);\nif(edn_query_language.core.ident_QMARK_(target)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(to_cancel,cljs.core.conj,target);\n} else {\n}\n\nif(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new_target,active_target)) && (cljs.core.vector_QMARK_(active_target)))){\nvar mounted_target_class_72822 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (G__72608__$1,new_path_remaining__$1,new_target,router_ident,active_target,map__72613,map__72613__$1,target,next_router,map__72611,map__72611__$1,node__$1,component__$1,children__$1,new_path_remaining__$2,G__72608,map__72609,map__72609__$1,node,component,children,new_path_remaining,new_path,app,state_map,router,root_query,ast,root,to_signal,to_cancel){\nreturn (function (acc,p__72615){\nvar map__72616 = p__72615;\nvar map__72616__$1 = (((((!((map__72616 == null))))?(((((map__72616.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72616.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72616):map__72616);\nvar dispatch_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72616__$1,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510));\nvar component__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72616__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-route\",-2083218871),dispatch_key)){\nreturn cljs.core.reduced(component__$2);\n} else {\nreturn null;\n}\n});})(G__72608__$1,new_path_remaining__$1,new_target,router_ident,active_target,map__72613,map__72613__$1,target,next_router,map__72611,map__72611__$1,node__$1,component__$1,children__$1,new_path_remaining__$2,G__72608,map__72609,map__72609__$1,node,component,children,new_path_remaining,new_path,app,state_map,router,root_query,ast,root,to_signal,to_cancel))\n,null,(function (){var G__72618 = component__$1;\nvar G__72618__$1 = (((G__72618 == null))?null:com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(G__72618,state_map));\nvar G__72618__$2 = (((G__72618__$1 == null))?null:edn_query_language.core.query__GT_ast(G__72618__$1));\nif((G__72618__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(G__72618__$2);\n}\n})());\nvar mounted_targets_72823 = com.fulcrologic.fulcro.components.class__GT_all(app,mounted_target_class_72822);\nif(cljs.core.truth_((function (){var and__4115__auto__ = goog.DEBUG;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (cljs.core.count(mounted_targets_72823) > (1));\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,454,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (G__72608__$1,new_path_remaining__$1,mounted_target_class_72822,mounted_targets_72823,new_target,router_ident,active_target,map__72613,map__72613__$1,target,next_router,map__72611,map__72611__$1,node__$1,component__$1,children__$1,new_path_remaining__$2,G__72608,map__72609,map__72609__$1,node,component,children,new_path_remaining,new_path,app,state_map,router,root_query,ast,root,to_signal,to_cancel){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"More than one route target on screen of type\",mounted_target_class_72822], null);\n});})(G__72608__$1,new_path_remaining__$1,mounted_target_class_72822,mounted_targets_72823,new_target,router_ident,active_target,map__72613,map__72613__$1,target,next_router,map__72611,map__72611__$1,node__$1,component__$1,children__$1,new_path_remaining__$2,G__72608,map__72609,map__72609__$1,node,component,children,new_path_remaining,new_path,app,state_map,router,root_query,ast,root,to_signal,to_cancel))\n,null)),null,-185400254);\n} else {\n}\n\nif(cljs.core.seq(mounted_targets_72823)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(to_signal,cljs.core.into,mounted_targets_72823);\n} else {\n}\n} else {\n}\n\nif(cljs.core.truth_(next_router)){\nvar G__72824 = next_router;\nvar G__72825 = cljs.core.rest(new_path_remaining__$2);\nG__72608__$1 = G__72824;\nnew_path_remaining__$1 = G__72825;\ncontinue;\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n})();\nvar components = cljs.core.reverse(cljs.core.deref(to_signal));\nvar result = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(true);\nvar seq__72619_72826 = cljs.core.seq(components);\nvar chunk__72620_72827 = null;\nvar count__72621_72828 = (0);\nvar i__72622_72829 = (0);\nwhile(true){\nif((i__72622_72829 < count__72621_72828)){\nvar c_72830 = chunk__72620_72827.cljs$core$IIndexed$_nth$arity$2(null,i__72622_72829);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(result,((function (seq__72619_72826,chunk__72620_72827,count__72621_72828,i__72622_72829,c_72830,new_path,app,state_map,router,root_query,ast,root,to_signal,to_cancel,_,components,result){\nreturn (function (p1__72604_SHARP_){\nvar and__4115__auto__ = p1__72604_SHARP_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.will_leave(c_72830,com.fulcrologic.fulcro.components.props(c_72830));\n} else {\nreturn and__4115__auto__;\n}\n});})(seq__72619_72826,chunk__72620_72827,count__72621_72828,i__72622_72829,c_72830,new_path,app,state_map,router,root_query,ast,root,to_signal,to_cancel,_,components,result))\n);\n\n\nvar G__72831 = seq__72619_72826;\nvar G__72832 = chunk__72620_72827;\nvar G__72833 = count__72621_72828;\nvar G__72834 = (i__72622_72829 + (1));\nseq__72619_72826 = G__72831;\nchunk__72620_72827 = G__72832;\ncount__72621_72828 = G__72833;\ni__72622_72829 = G__72834;\ncontinue;\n} else {\nvar temp__5735__auto___72835 = cljs.core.seq(seq__72619_72826);\nif(temp__5735__auto___72835){\nvar seq__72619_72836__$1 = temp__5735__auto___72835;\nif(cljs.core.chunked_seq_QMARK_(seq__72619_72836__$1)){\nvar c__4556__auto___72837 = cljs.core.chunk_first(seq__72619_72836__$1);\nvar G__72838 = cljs.core.chunk_rest(seq__72619_72836__$1);\nvar G__72839 = c__4556__auto___72837;\nvar G__72840 = cljs.core.count(c__4556__auto___72837);\nvar G__72841 = (0);\nseq__72619_72826 = G__72838;\nchunk__72620_72827 = G__72839;\ncount__72621_72828 = G__72840;\ni__72622_72829 = G__72841;\ncontinue;\n} else {\nvar c_72842 = cljs.core.first(seq__72619_72836__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(result,((function (seq__72619_72826,chunk__72620_72827,count__72621_72828,i__72622_72829,c_72842,seq__72619_72836__$1,temp__5735__auto___72835,new_path,app,state_map,router,root_query,ast,root,to_signal,to_cancel,_,components,result){\nreturn (function (p1__72604_SHARP_){\nvar and__4115__auto__ = p1__72604_SHARP_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.will_leave(c_72842,com.fulcrologic.fulcro.components.props(c_72842));\n} else {\nreturn and__4115__auto__;\n}\n});})(seq__72619_72826,chunk__72620_72827,count__72621_72828,i__72622_72829,c_72842,seq__72619_72836__$1,temp__5735__auto___72835,new_path,app,state_map,router,root_query,ast,root,to_signal,to_cancel,_,components,result))\n);\n\n\nvar G__72843 = cljs.core.next(seq__72619_72836__$1);\nvar G__72844 = null;\nvar G__72845 = (0);\nvar G__72846 = (0);\nseq__72619_72826 = G__72843;\nchunk__72620_72827 = G__72844;\ncount__72621_72828 = G__72845;\ni__72622_72829 = G__72846;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(cljs.core.deref(result))){\nvar seq__72623_72847 = cljs.core.seq(cljs.core.deref(to_cancel));\nvar chunk__72624_72848 = null;\nvar count__72625_72849 = (0);\nvar i__72626_72850 = (0);\nwhile(true){\nif((i__72626_72850 < count__72625_72849)){\nvar t_72851 = chunk__72624_72848.cljs$core$IIndexed$_nth$arity$2(null,i__72626_72850);\nvar map__72633_72852 = (function (){var G__72634 = t_72851;\nif((G__72634 == null)){\nreturn null;\n} else {\nreturn cljs.core.meta(G__72634);\n}\n})();\nvar map__72633_72853__$1 = (((((!((map__72633_72852 == null))))?(((((map__72633_72852.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72633_72852.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72633_72852):map__72633_72852);\nvar component_72854 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72633_72853__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar params_72855 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72633_72853__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\ncom.fulcrologic.fulcro.routing.dynamic_routing.route_cancelled(component_72854,params_72855);\n\n\nvar G__72856 = seq__72623_72847;\nvar G__72857 = chunk__72624_72848;\nvar G__72858 = count__72625_72849;\nvar G__72859 = (i__72626_72850 + (1));\nseq__72623_72847 = G__72856;\nchunk__72624_72848 = G__72857;\ncount__72625_72849 = G__72858;\ni__72626_72850 = G__72859;\ncontinue;\n} else {\nvar temp__5735__auto___72860 = cljs.core.seq(seq__72623_72847);\nif(temp__5735__auto___72860){\nvar seq__72623_72861__$1 = temp__5735__auto___72860;\nif(cljs.core.chunked_seq_QMARK_(seq__72623_72861__$1)){\nvar c__4556__auto___72862 = cljs.core.chunk_first(seq__72623_72861__$1);\nvar G__72863 = cljs.core.chunk_rest(seq__72623_72861__$1);\nvar G__72864 = c__4556__auto___72862;\nvar G__72865 = cljs.core.count(c__4556__auto___72862);\nvar G__72866 = (0);\nseq__72623_72847 = G__72863;\nchunk__72624_72848 = G__72864;\ncount__72625_72849 = G__72865;\ni__72626_72850 = G__72866;\ncontinue;\n} else {\nvar t_72867 = cljs.core.first(seq__72623_72861__$1);\nvar map__72636_72868 = (function (){var G__72637 = t_72867;\nif((G__72637 == null)){\nreturn null;\n} else {\nreturn cljs.core.meta(G__72637);\n}\n})();\nvar map__72636_72869__$1 = (((((!((map__72636_72868 == null))))?(((((map__72636_72868.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72636_72868.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72636_72868):map__72636_72868);\nvar component_72870 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72636_72869__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar params_72871 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72636_72869__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\ncom.fulcrologic.fulcro.routing.dynamic_routing.route_cancelled(component_72870,params_72871);\n\n\nvar G__72872 = cljs.core.next(seq__72623_72861__$1);\nvar G__72873 = null;\nvar G__72874 = (0);\nvar G__72875 = (0);\nseq__72623_72847 = G__72872;\nchunk__72624_72848 = G__72873;\ncount__72625_72849 = G__72874;\ni__72626_72850 = G__72875;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n} else {\n}\n\nreturn cljs.core.deref(result);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.signal_router_leaving.cljs$lang$maxFixedArity = 4);\n\n/**\n * Returns the current active route, starting from the relative Fulcro class or instance.\n * \n *   Any component using this as a basis for rendering will need to add the following to their query to\n *   ensure the props of that component change on route changes:\n * \n *   ```\n *   [::uism/asm-id fq-router-kw]\n *   ```\n * \n *   where `fq-router-kw` is a keyword that has the exact namespace and name of the router you're interested in. If you want\n *   to just over-render you can use a quoted `_` instead.\n *   \n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.current_route = (function com$fulcrologic$fulcro$routing$dynamic_routing$current_route(var_args){\nvar G__72642 = arguments.length;\nswitch (G__72642) {\ncase 1:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.current_route.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.current_route.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.current_route.cljs$core$IFn$_invoke$arity$1 = (function (this_or_app){\nvar app = com.fulcrologic.fulcro.components.any__GT_app(this_or_app);\nvar router = com.fulcrologic.fulcro.application.root_class(app);\nvar state_map = com.fulcrologic.fulcro.application.current_state.cljs$core$IFn$_invoke$arity$1(app);\nvar root_query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(router,state_map);\nvar ast = edn_query_language.core.query__GT_ast(root_query);\nvar root = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router(app,ast);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.first(new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast));\n}\n})();\nvar result = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar G__72644_72877 = root;\nvar map__72645_72878 = G__72644_72877;\nvar map__72645_72879__$1 = (((((!((map__72645_72878 == null))))?(((((map__72645_72878.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72645_72878.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72645_72878):map__72645_72878);\nvar node_72880 = map__72645_72879__$1;\nvar component_72881 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72645_72879__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar G__72644_72882__$1 = G__72644_72877;\nwhile(true){\nvar map__72649_72883 = G__72644_72882__$1;\nvar map__72649_72884__$1 = (((((!((map__72649_72883 == null))))?(((((map__72649_72883.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72649_72883.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72649_72883):map__72649_72883);\nvar node_72885__$1 = map__72649_72884__$1;\nvar component_72886__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72649_72884__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nif(cljs.core.truth_((function (){var and__4115__auto__ = component_72886__$1;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_(component_72886__$1);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar router_ident_72887 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2(component_72886__$1,cljs.core.PersistentArrayMap.EMPTY);\nvar router_id_72888 = cljs.core.second(router_ident_72887);\nvar sm_env_72889 = com.fulcrologic.fulcro.ui_state_machines.state_machine_env.cljs$core$IFn$_invoke$arity$5(state_map,null,router_id_72888,new cljs.core.Keyword(null,\"none\",\"none\",1333468478),cljs.core.PersistentArrayMap.EMPTY);\nvar path_segment_72890 = com.fulcrologic.fulcro.ui_state_machines.retrieve.cljs$core$IFn$_invoke$arity$2(sm_env_72889,new cljs.core.Keyword(null,\"path-segment\",\"path-segment\",1516798997));\nvar next_router_72891 = cljs.core.some(((function (G__72644_72882__$1,router_ident_72887,router_id_72888,sm_env_72889,path_segment_72890,map__72649_72883,map__72649_72884__$1,node_72885__$1,component_72886__$1,G__72644_72877,map__72645_72878,map__72645_72879__$1,node_72880,component_72881,app,router,state_map,root_query,ast,root,result){\nreturn (function (p1__72639_SHARP_){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router(app,p1__72639_SHARP_);\n});})(G__72644_72882__$1,router_ident_72887,router_id_72888,sm_env_72889,path_segment_72890,map__72649_72883,map__72649_72884__$1,node_72885__$1,component_72886__$1,G__72644_72877,map__72645_72878,map__72645_72879__$1,node_72880,component_72881,app,router,state_map,root_query,ast,root,result))\n,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(node_72885__$1));\nif(cljs.core.seq(path_segment_72890)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(result,cljs.core.into,path_segment_72890);\n} else {\n}\n\nif(cljs.core.truth_(next_router_72891)){\nvar G__72892 = next_router_72891;\nG__72644_72882__$1 = G__72892;\ncontinue;\n} else {\n}\n} else {\n}\nbreak;\n}\n\nreturn cljs.core.deref(result);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.current_route.cljs$core$IFn$_invoke$arity$2 = (function (this_or_app,relative_class_or_instance){\nvar app = com.fulcrologic.fulcro.components.any__GT_app(this_or_app);\nvar state_map = com.fulcrologic.fulcro.application.current_state.cljs$core$IFn$_invoke$arity$1(app);\nvar router = relative_class_or_instance;\nvar root_query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(router,state_map);\nvar ast = edn_query_language.core.query__GT_ast(root_query);\nvar root = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router(app,ast);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.first(new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast));\n}\n})();\nvar result = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar G__72652_72893 = root;\nvar map__72653_72894 = G__72652_72893;\nvar map__72653_72895__$1 = (((((!((map__72653_72894 == null))))?(((((map__72653_72894.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72653_72894.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72653_72894):map__72653_72894);\nvar node_72896 = map__72653_72895__$1;\nvar component_72897 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72653_72895__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar G__72652_72898__$1 = G__72652_72893;\nwhile(true){\nvar map__72657_72899 = G__72652_72898__$1;\nvar map__72657_72900__$1 = (((((!((map__72657_72899 == null))))?(((((map__72657_72899.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72657_72899.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72657_72899):map__72657_72899);\nvar node_72901__$1 = map__72657_72900__$1;\nvar component_72902__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72657_72900__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nif(cljs.core.truth_((function (){var and__4115__auto__ = component_72902__$1;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_(component_72902__$1);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar router_ident_72903 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2(component_72902__$1,cljs.core.PersistentArrayMap.EMPTY);\nvar router_id_72904 = cljs.core.second(router_ident_72903);\nvar sm_env_72905 = com.fulcrologic.fulcro.ui_state_machines.state_machine_env.cljs$core$IFn$_invoke$arity$5(state_map,null,router_id_72904,new cljs.core.Keyword(null,\"none\",\"none\",1333468478),cljs.core.PersistentArrayMap.EMPTY);\nvar path_segment_72906 = com.fulcrologic.fulcro.ui_state_machines.retrieve.cljs$core$IFn$_invoke$arity$2(sm_env_72905,new cljs.core.Keyword(null,\"path-segment\",\"path-segment\",1516798997));\nvar next_router_72907 = cljs.core.some(((function (G__72652_72898__$1,router_ident_72903,router_id_72904,sm_env_72905,path_segment_72906,map__72657_72899,map__72657_72900__$1,node_72901__$1,component_72902__$1,G__72652_72893,map__72653_72894,map__72653_72895__$1,node_72896,component_72897,app,state_map,router,root_query,ast,root,result){\nreturn (function (p1__72640_SHARP_){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router(app,p1__72640_SHARP_);\n});})(G__72652_72898__$1,router_ident_72903,router_id_72904,sm_env_72905,path_segment_72906,map__72657_72899,map__72657_72900__$1,node_72901__$1,component_72902__$1,G__72652_72893,map__72653_72894,map__72653_72895__$1,node_72896,component_72897,app,state_map,router,root_query,ast,root,result))\n,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(node_72901__$1));\nif(cljs.core.seq(path_segment_72906)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(result,cljs.core.into,path_segment_72906);\n} else {\n}\n\nif(cljs.core.truth_(next_router_72907)){\nvar G__72908 = next_router_72907;\nG__72652_72898__$1 = G__72908;\ncontinue;\n} else {\n}\n} else {\n}\nbreak;\n}\n\nreturn cljs.core.deref(result);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.current_route.cljs$lang$maxFixedArity = 2);\n\ncom.fulcrologic.fulcro.routing.dynamic_routing.mounted_targets = (function com$fulcrologic$fulcro$routing$dynamic_routing$mounted_targets(app,router_class){\nvar state_map = com.fulcrologic.fulcro.application.current_state.cljs$core$IFn$_invoke$arity$1(app);\nvar mounted_target_class = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,p__72659){\nvar map__72660 = p__72659;\nvar map__72660__$1 = (((((!((map__72660 == null))))?(((((map__72660.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72660.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72660):map__72660);\nvar dispatch_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72660__$1,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510));\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72660__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-route\",-2083218871),dispatch_key)){\nreturn cljs.core.reduced(component);\n} else {\nreturn null;\n}\n}),null,(function (){var G__72662 = router_class;\nvar G__72662__$1 = (((G__72662 == null))?null:com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(G__72662,state_map));\nvar G__72662__$2 = (((G__72662__$1 == null))?null:edn_query_language.core.query__GT_ast(G__72662__$1));\nif((G__72662__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(G__72662__$2);\n}\n})());\nreturn com.fulcrologic.fulcro.components.class__GT_all(app,mounted_target_class);\n});\ncom.fulcrologic.fulcro.routing.dynamic_routing.set_force_route_flag_BANG_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$set_force_route_flag_BANG_(route_target){\nreturn goog.object.set(route_target,\"fulcro$routing$force_route\",true);\n});\n/**\n * returns true if the given route target's allow-route-change? should be ignored.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.force_route_flagged_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$force_route_flagged_QMARK_(route_target){\nreturn com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(route_target,\"fulcro$routing$force_route\");\n});\n/**\n * This function will return the first mounted instance of a route target that is currently indicating it would\n *   deny a route change.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.target_denying_route_changes = (function com$fulcrologic$fulcro$routing$dynamic_routing$target_denying_route_changes(this_or_app){\nvar app = com.fulcrologic.fulcro.components.any__GT_app(this_or_app);\nvar router = com.fulcrologic.fulcro.application.root_class(app);\nvar state_map = com.fulcrologic.fulcro.application.current_state.cljs$core$IFn$_invoke$arity$1(app);\nvar root_query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(router,state_map);\nvar ast = edn_query_language.core.query__GT_ast(root_query);\nvar root = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router(app,ast);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.first(new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast));\n}\n})();\nvar G__72665 = root;\nvar map__72666 = G__72665;\nvar map__72666__$1 = (((((!((map__72666 == null))))?(((((map__72666.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72666.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72666):map__72666);\nvar router_class = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72666__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72666__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar G__72665__$1 = G__72665;\nwhile(true){\nvar map__72670 = G__72665__$1;\nvar map__72670__$1 = (((((!((map__72670 == null))))?(((((map__72670.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72670.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72670):map__72670);\nvar router_class__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72670__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar children__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72670__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nif(cljs.core.truth_((function (){var and__4115__auto__ = router_class__$1;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_(router_class__$1);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar router_ident = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2(router_class__$1,cljs.core.PersistentArrayMap.EMPTY);\nvar active_target = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(router_ident,new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"current-route\",\"com.fulcrologic.fulcro.routing.dynamic-routing/current-route\",-2083218871)));\nvar next_router = cljs.core.some(((function (G__72665__$1,router_ident,active_target,map__72670,map__72670__$1,router_class__$1,children__$1,G__72665,map__72666,map__72666__$1,router_class,children,app,router,state_map,root_query,ast,root){\nreturn (function (p1__72663_SHARP_){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_live_router(app,p1__72663_SHARP_);\n});})(G__72665__$1,router_ident,active_target,map__72670,map__72670__$1,router_class__$1,children__$1,G__72665,map__72666,map__72666__$1,router_class,children,app,router,state_map,root_query,ast,root))\n,children__$1);\nvar rejecting_target = ((cljs.core.vector_QMARK_(active_target))?cljs.core.some(((function (G__72665__$1,router_ident,active_target,next_router,map__72670,map__72670__$1,router_class__$1,children__$1,G__72665,map__72666,map__72666__$1,router_class,children,app,router,state_map,root_query,ast,root){\nreturn (function (c){\nif(((com.fulcrologic.fulcro.routing.dynamic_routing.allow_route_change_QMARK_(c) === false) && (cljs.core.not(com.fulcrologic.fulcro.routing.dynamic_routing.force_route_flagged_QMARK_(c))))){\nreturn c;\n} else {\nreturn null;\n}\n});})(G__72665__$1,router_ident,active_target,next_router,map__72670,map__72670__$1,router_class__$1,children__$1,G__72665,map__72666,map__72666__$1,router_class,children,app,router,state_map,root_query,ast,root))\n,com.fulcrologic.fulcro.routing.dynamic_routing.mounted_targets(app,router_class__$1)):null);\nif(cljs.core.truth_(rejecting_target)){\nreturn rejecting_target;\n} else {\nif(cljs.core.truth_(next_router)){\nvar G__72909 = next_router;\nG__72665__$1 = G__72909;\ncontinue;\n} else {\nreturn null;\n}\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\n/**\n * Returns true if the active on-screen targets indicate they will allow navigation.\n * \n *   NOTE: If your route targets have an `:allow-route-change?`, then that will be used to determine if the route can\n *   be abandoned; otherwise `:will-leave` will be called to answer the question; however, this USE of `will-leave`\n *   is DEPRECATED (though the hook is NOT because it serves another purpose). If you side-effect in `:will-leave` this could cause strange\n *   behavior throughout the application.  It is recommended that your targets implement `:allow-route-change?` if they need\n *   to prevent routing, and only leverage `:will-leave` to do things like cancel in-progress loads.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.can_change_route_QMARK_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$can_change_route_QMARK_(this_or_app){\nreturn (com.fulcrologic.fulcro.routing.dynamic_routing.target_denying_route_changes(this_or_app) == null);\n});\n/**\n * Change the route, starting at the given Fulcro class or instance (scanning for the first router from there).  `new-route` is a vector\n *   of string components to pass through to the nearest child router as the new path. The first argument is any live component\n *   or the app.  The `timeouts-and-params` are as in `change-route`.\n * \n *   When possible (i.e. no circular references to components) you can maintain better code navigation by\n *   generating `new-route` via `path-to`.  This will allow readers of your code to quickly jump to the actual\n *   components that implement the targets when reading the code.\n *   \n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$change_route_relative_BANG_(var_args){\nvar G__72673 = arguments.length;\nswitch (G__72673) {\ncase 3:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (this_or_app,relative_class_or_instance,new_route){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_.cljs$core$IFn$_invoke$arity$4(this_or_app,relative_class_or_instance,new_route,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_.cljs$core$IFn$_invoke$arity$4 = (function (app_or_comp,relative_class_or_instance,new_route,timeouts_and_params){\nvar old_route = com.fulcrologic.fulcro.routing.dynamic_routing.current_route.cljs$core$IFn$_invoke$arity$2(app_or_comp,relative_class_or_instance);\nvar new_path = com.fulcrologic.fulcro.routing.dynamic_routing.proposed_new_path.cljs$core$IFn$_invoke$arity$4(app_or_comp,relative_class_or_instance,new_route,timeouts_and_params);\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(old_route,new_route)) && (cljs.core.not(new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"force?\",\"com.fulcrologic.fulcro.routing.dynamic-routing/force?\",-1506318960).cljs$core$IFn$_invoke$arity$1(timeouts_and_params))))){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,595,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Request to change route, but path is the current route. Ignoring change request.\"], null);\n}),null)),null,-1249564791);\n} else {\nif(cljs.core.truth_((function (){var and__4115__auto__ = goog.DEBUG;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not(cljs.core.seq(new_path));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,598,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Could not find route targets for new-route\",new_route], null);\n}),null)),null,1777761000);\n} else {\nif((!(com.fulcrologic.fulcro.routing.dynamic_routing.can_change_route_QMARK_(app_or_comp)))){\nvar app = com.fulcrologic.fulcro.components.any__GT_app(app_or_comp);\nvar target = com.fulcrologic.fulcro.routing.dynamic_routing.target_denying_route_changes(app);\nvar route_denied = com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(target,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"route-denied\",\"route-denied\",-1140339590)], 0));\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,604,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Route request denied by on-screen target. Calling component's :route-denied (if defined).\"], null);\n}),null)),null,254429779);\n\nif(cljs.core.truth_(route_denied)){\nreturn (route_denied.cljs$core$IFn$_invoke$arity$3 ? route_denied.cljs$core$IFn$_invoke$arity$3(target,relative_class_or_instance,new_route) : route_denied.call(null,target,relative_class_or_instance,new_route));\n} else {\nreturn null;\n}\n} else {\ncom.fulcrologic.fulcro.routing.dynamic_routing.signal_router_leaving.cljs$core$IFn$_invoke$arity$4(app_or_comp,relative_class_or_instance,new_route,timeouts_and_params);\n\nvar app = com.fulcrologic.fulcro.components.any__GT_app(app_or_comp);\nvar state_map = com.fulcrologic.fulcro.application.current_state.cljs$core$IFn$_invoke$arity$1(app);\nvar router = relative_class_or_instance;\nvar root_query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(router,state_map);\nvar ast = edn_query_language.core.query__GT_ast(root_query);\nvar root = com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_route(ast,new_route);\nvar old_route__$1 = com.fulcrologic.fulcro.routing.dynamic_routing.current_route.cljs$core$IFn$_invoke$arity$2(app,relative_class_or_instance);\nvar G__72675 = root;\nvar map__72676 = G__72675;\nvar map__72676__$1 = (((((!((map__72676 == null))))?(((((map__72676.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72676.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72676):map__72676);\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72676__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar path = new_route;\nvar G__72675__$1 = G__72675;\nvar path__$1 = path;\nwhile(true){\nvar map__72691 = G__72675__$1;\nvar map__72691__$1 = (((((!((map__72691 == null))))?(((((map__72691.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72691.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72691):map__72691);\nvar component__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72691__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar path__$2 = path__$1;\nif(cljs.core.truth_((function (){var and__4115__auto__ = component__$1;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_(component__$1);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar map__72693 = com.fulcrologic.fulcro.routing.dynamic_routing.route_target(component__$1,path__$2);\nvar map__72693__$1 = (((((!((map__72693 == null))))?(((((map__72693.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72693.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72693):map__72693);\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72693__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar matching_prefix = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72693__$1,new cljs.core.Keyword(null,\"matching-prefix\",\"matching-prefix\",-539262173));\nvar target_ast = (function (){var G__72695 = target;\nvar G__72695__$1 = (((G__72695 == null))?null:com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(G__72695,state_map));\nif((G__72695__$1 == null)){\nreturn null;\n} else {\nreturn edn_query_language.core.query__GT_ast(G__72695__$1);\n}\n})();\nvar prefix_length = cljs.core.count(matching_prefix);\nvar remaining_path = cljs.core.vec(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(prefix_length,path__$2));\nvar segment = com.fulcrologic.fulcro.routing.dynamic_routing.route_segment(target);\nvar params = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (G__72675__$1,path__$1,map__72693,map__72693__$1,target,matching_prefix,target_ast,prefix_length,remaining_path,segment,map__72691,map__72691__$1,component__$1,path__$2,G__72675,map__72676,map__72676__$1,component,path,app,state_map,router,root_query,ast,root,old_route__$1,old_route,new_path){\nreturn (function (p,p__72696){\nvar vec__72697 = p__72696;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72697,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72697,(1),null);\nif((k instanceof cljs.core.Keyword)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p,k,v);\n} else {\nreturn p;\n}\n});})(G__72675__$1,path__$1,map__72693,map__72693__$1,target,matching_prefix,target_ast,prefix_length,remaining_path,segment,map__72691,map__72691__$1,component__$1,path__$2,G__72675,map__72676,map__72676__$1,component,path,app,state_map,router,root_query,ast,root,old_route__$1,old_route,new_path))\n,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(timeouts_and_params,new cljs.core.Keyword(null,\"error-timeout\",\"error-timeout\",-1004615840),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"deferred-timeout\",\"deferred-timeout\",1616220530)], 0)),cljs.core.map.cljs$core$IFn$_invoke$arity$3(((function (G__72675__$1,path__$1,map__72693,map__72693__$1,target,matching_prefix,target_ast,prefix_length,remaining_path,segment,map__72691,map__72691__$1,component__$1,path__$2,G__72675,map__72676,map__72676__$1,component,path,app,state_map,router,root_query,ast,root,old_route__$1,old_route,new_path){\nreturn (function (a,b){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null);\n});})(G__72675__$1,path__$1,map__72693,map__72693__$1,target,matching_prefix,target_ast,prefix_length,remaining_path,segment,map__72691,map__72691__$1,component__$1,path__$2,G__72675,map__72676,map__72676__$1,component,path,app,state_map,router,root_query,ast,root,old_route__$1,old_route,new_path))\n,segment,matching_prefix));\nvar router_ident = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2(component__$1,cljs.core.PersistentArrayMap.EMPTY);\nvar router_id = cljs.core.second(router_ident);\nvar target_ident = com.fulcrologic.fulcro.routing.dynamic_routing.will_enter(target,app,params);\nvar completing_action = (function (){var or__4126__auto__ = (function (){var G__72701 = target_ident;\nvar G__72701__$1 = (((G__72701 == null))?null:cljs.core.meta(G__72701));\nif((G__72701__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204).cljs$core$IFn$_invoke$arity$1(G__72701__$1);\n}\n})();\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.constantly(true);\n}\n})();\nvar event_data = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"error-timeout\",\"error-timeout\",-1004615840),(5000),new cljs.core.Keyword(null,\"deferred-timeout\",\"deferred-timeout\",1616220530),(20)], null),timeouts_and_params,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"path-segment\",\"path-segment\",1516798997),matching_prefix,new cljs.core.Keyword(null,\"router\",\"router\",1091916230),cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(router_ident,cljs.core.assoc,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component__$1),new cljs.core.Keyword(null,\"target\",\"target\",253001721),cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(target_ident,cljs.core.assoc,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),target,new cljs.core.Keyword(null,\"params\",\"params\",710516235),params)], null)], 0));\nif(cljs.core.not(com.fulcrologic.fulcro.ui_state_machines.get_active_state(app,router_id))){\nvar state_map_72911__$1 = com.fulcrologic.fulcro.components.component__GT_state_map(app_or_comp);\nif(cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.routing.dynamic-routing\",\"id\",\"com.fulcrologic.fulcro.routing.dynamic-routing/id\",-214558961).cljs$core$IFn$_invoke$arity$1(state_map_72911__$1),router_id))){\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,643,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (G__72675__$1,path__$1,state_map_72911__$1,map__72693,map__72693__$1,target,matching_prefix,target_ast,prefix_length,remaining_path,segment,params,router_ident,router_id,target_ident,completing_action,event_data,map__72691,map__72691__$1,component__$1,path__$2,G__72675,map__72676,map__72676__$1,component,path,app,state_map,router,root_query,ast,root,old_route__$1,old_route,new_path){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"You are routing to a router \",router_id,\"whose state was not composed into the app from root. Please check your :initial-state.\"], null);\n});})(G__72675__$1,path__$1,state_map_72911__$1,map__72693,map__72693__$1,target,matching_prefix,target_ast,prefix_length,remaining_path,segment,params,router_ident,router_id,target_ident,completing_action,event_data,map__72691,map__72691__$1,component__$1,path__$2,G__72675,map__72676,map__72676__$1,component,path,app,state_map,router,root_query,ast,root,old_route__$1,old_route,new_path))\n,null)),null,723090195);\n}\n\ncom.fulcrologic.fulcro.ui_state_machines.begin_BANG_.cljs$core$IFn$_invoke$arity$5(app_or_comp,com.fulcrologic.fulcro.routing.dynamic_routing.RouterStateMachine,router_id,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"router\",\"router\",1091916230),com.fulcrologic.fulcro.ui_state_machines.with_actor_class(router_ident,component__$1)], null),event_data);\n} else {\ncom.fulcrologic.fulcro.ui_state_machines.trigger_BANG_.cljs$core$IFn$_invoke$arity$4(app,router_id,new cljs.core.Keyword(null,\"route!\",\"route!\",-1286958144),event_data);\n}\n\nvar _STAR_after_render_STAR__orig_val__72702_72912 = com.fulcrologic.fulcro.components._STAR_after_render_STAR_;\nvar _STAR_after_render_STAR__temp_val__72703_72913 = true;\n(com.fulcrologic.fulcro.components._STAR_after_render_STAR_ = _STAR_after_render_STAR__temp_val__72703_72913);\n\ntry{(completing_action.cljs$core$IFn$_invoke$arity$0 ? completing_action.cljs$core$IFn$_invoke$arity$0() : completing_action.call(null));\n}finally {(com.fulcrologic.fulcro.components._STAR_after_render_STAR_ = _STAR_after_render_STAR__orig_val__72702_72912);\n}\nif(cljs.core.seq(remaining_path)){\nvar G__72914 = com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_route(target_ast,remaining_path);\nvar G__72915 = remaining_path;\nG__72675__$1 = G__72914;\npath__$1 = G__72915;\ncontinue;\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n\n}\n}\n}\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_.cljs$lang$maxFixedArity = 4);\n\n/**\n * DEPRECATED NAME: Use change-route-relative!\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative = com.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_;\n/**\n * Retry a route that the receiving component just denied, and ignore this target's answer. All other targets will still\n *   be asked. This is primarily used when you want to be able to use js/confirm in a component to ask the user if\n *   they \"really mean to navigate away\". You MUST pass the arguments that `:route-denied` received\n *   or you can easily cause an infinite loop. Other on-screen targets can still potentially abort the route.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.retry_route_BANG_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$retry_route_BANG_(denied_target_instance,relative_root,path){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,665,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Retrying route at the request of \",com.fulcrologic.fulcro.components.component_name(denied_target_instance)], null);\n}),null)),null,-1126821710);\n\ncom.fulcrologic.fulcro.routing.dynamic_routing.set_force_route_flag_BANG_(denied_target_instance);\n\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_.cljs$core$IFn$_invoke$arity$3(denied_target_instance,relative_root,path);\n});\n/**\n * Trigger a route change.\n * \n *   * `this` - The component (or app) that is causing the route change.\n *   * `new-route` - A vector of URI components to pass to the router.\n *   * `timeouts-and-params` - A map of additional parameters and route timeouts that affect UI during deferred routes:\n *   `{:error-timeout ms :deferred-timeout ms}`.  Anything extra will appear in the `params` of `will-enter`.\n * \n *   The error timeout is how long to wait  (default 5000ms) before showing the error-ui of a route (which must be defined on the\n *   router that is having problems).  The deferred-timeout (default 100ms) is how long to wait before showing the loading-ui of\n *   a deferred router (to prevent flicker).\n *   \n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.change_route_BANG_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$change_route_BANG_(var_args){\nvar G__72705 = arguments.length;\nswitch (G__72705) {\ncase 2:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.change_route_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.change_route_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.change_route_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (this$,new_route){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.change_route_BANG_.cljs$core$IFn$_invoke$arity$3(this$,new_route,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.change_route_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (this$,new_route,timeouts_and_params){\nvar app = com.fulcrologic.fulcro.components.any__GT_app(this$);\nvar root = com.fulcrologic.fulcro.application.root_class(app);\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_.cljs$core$IFn$_invoke$arity$4(app,root,new_route,timeouts_and_params);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.change_route_BANG_.cljs$lang$maxFixedArity = 3);\n\ncom.fulcrologic.fulcro.routing.dynamic_routing.change_route = com.fulcrologic.fulcro.routing.dynamic_routing.change_route_BANG_;\n/**\n * Run a runtime validation on route targets to verify that they at least declare a route-segment that is a vector.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.validate_route_targets = (function com$fulcrologic$fulcro$routing$dynamic_routing$validate_route_targets(router_instance){\nvar seq__72707 = cljs.core.seq(com.fulcrologic.fulcro.routing.dynamic_routing.get_targets(router_instance));\nvar chunk__72709 = null;\nvar count__72710 = (0);\nvar i__72711 = (0);\nwhile(true){\nif((i__72711 < count__72710)){\nvar t = chunk__72709.cljs$core$IIndexed$_nth$arity$2(null,i__72711);\nvar segment_72917 = com.fulcrologic.fulcro.routing.dynamic_routing.route_segment(t);\nvar valid_QMARK__72918 = ((cljs.core.vector_QMARK_(segment_72917)) && ((!(cljs.core.empty_QMARK_(segment_72917)))) && (cljs.core.every_QMARK_(((function (seq__72707,chunk__72709,count__72710,i__72711,segment_72917,t){\nreturn (function (p1__72706_SHARP_){\nreturn (((p1__72706_SHARP_ instanceof cljs.core.Keyword)) || (typeof p1__72706_SHARP_ === 'string'));\n});})(seq__72707,chunk__72709,count__72710,i__72711,segment_72917,t))\n,segment_72917)));\nif(valid_QMARK__72918){\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,708,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__72707,chunk__72709,count__72710,i__72711,segment_72917,valid_QMARK__72918,t){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Route target \",com.fulcrologic.fulcro.components.component_name(t),\"of router\",com.fulcrologic.fulcro.components.component_name(router_instance),\"does not declare a valid :route-segment. Route segments must be non-empty vector that contain only strings\",\"and keywords\"], null);\n});})(seq__72707,chunk__72709,count__72710,i__72711,segment_72917,valid_QMARK__72918,t))\n,null)),null,1975495294);\n}\n\n\nvar G__72919 = seq__72707;\nvar G__72920 = chunk__72709;\nvar G__72921 = count__72710;\nvar G__72922 = (i__72711 + (1));\nseq__72707 = G__72919;\nchunk__72709 = G__72920;\ncount__72710 = G__72921;\ni__72711 = G__72922;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__72707);\nif(temp__5735__auto__){\nvar seq__72707__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__72707__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__72707__$1);\nvar G__72923 = cljs.core.chunk_rest(seq__72707__$1);\nvar G__72924 = c__4556__auto__;\nvar G__72925 = cljs.core.count(c__4556__auto__);\nvar G__72926 = (0);\nseq__72707 = G__72923;\nchunk__72709 = G__72924;\ncount__72710 = G__72925;\ni__72711 = G__72926;\ncontinue;\n} else {\nvar t = cljs.core.first(seq__72707__$1);\nvar segment_72927 = com.fulcrologic.fulcro.routing.dynamic_routing.route_segment(t);\nvar valid_QMARK__72928 = ((cljs.core.vector_QMARK_(segment_72927)) && ((!(cljs.core.empty_QMARK_(segment_72927)))) && (cljs.core.every_QMARK_(((function (seq__72707,chunk__72709,count__72710,i__72711,segment_72927,t,seq__72707__$1,temp__5735__auto__){\nreturn (function (p1__72706_SHARP_){\nreturn (((p1__72706_SHARP_ instanceof cljs.core.Keyword)) || (typeof p1__72706_SHARP_ === 'string'));\n});})(seq__72707,chunk__72709,count__72710,i__72711,segment_72927,t,seq__72707__$1,temp__5735__auto__))\n,segment_72927)));\nif(valid_QMARK__72928){\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.routing.dynamic-routing\",null,708,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__72707,chunk__72709,count__72710,i__72711,segment_72927,valid_QMARK__72928,t,seq__72707__$1,temp__5735__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Route target \",com.fulcrologic.fulcro.components.component_name(t),\"of router\",com.fulcrologic.fulcro.components.component_name(router_instance),\"does not declare a valid :route-segment. Route segments must be non-empty vector that contain only strings\",\"and keywords\"], null);\n});})(seq__72707,chunk__72709,count__72710,i__72711,segment_72927,valid_QMARK__72928,t,seq__72707__$1,temp__5735__auto__))\n,null)),null,-1298790637);\n}\n\n\nvar G__72929 = cljs.core.next(seq__72707__$1);\nvar G__72930 = null;\nvar G__72931 = (0);\nvar G__72932 = (0);\nseq__72707 = G__72929;\nchunk__72709 = G__72930;\ncount__72710 = G__72931;\ni__72711 = G__72932;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * Returns a sequence of all of the routers reachable in the query of the app.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.all_reachable_routers = (function com$fulcrologic$fulcro$routing$dynamic_routing$all_reachable_routers(state_map,component_class){\nvar root_query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(component_class,state_map);\nvar map__72714 = edn_query_language.core.query__GT_ast(root_query);\nvar map__72714__$1 = (((((!((map__72714 == null))))?(((((map__72714.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72714.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72714):map__72714);\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72714__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar get_routers = (function com$fulcrologic$fulcro$routing$dynamic_routing$all_reachable_routers_$_get_routers_STAR_(nodes){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,p__72716){\nvar map__72717 = p__72716;\nvar map__72717__$1 = (((((!((map__72717 == null))))?(((((map__72717.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72717.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72717):map__72717);\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72717__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar children__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72717__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(((com.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_(component))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,component):acc),com$fulcrologic$fulcro$routing$dynamic_routing$all_reachable_routers_$_get_routers_STAR_(children__$1));\n}),cljs.core.PersistentVector.EMPTY,nodes);\n});\nreturn get_routers(children);\n});\n/**\n * Initialize the routing system.  This ensures that all routers have state machines in app state.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.initialize_BANG_ = (function com$fulcrologic$fulcro$routing$dynamic_routing$initialize_BANG_(app){\nvar state_map = com.fulcrologic.fulcro.application.current_state.cljs$core$IFn$_invoke$arity$1(app);\nvar root = com.fulcrologic.fulcro.application.root_class(app);\nvar routers = com.fulcrologic.fulcro.routing.dynamic_routing.all_reachable_routers(state_map,root);\nvar tx = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (r){\nvar router_ident = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2(r,cljs.core.PersistentArrayMap.EMPTY);\nvar router_id = cljs.core.second(router_ident);\nvar G__72719 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"asm-id\",\"com.fulcrologic.fulcro.ui-state-machines/asm-id\",232311394),router_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"state-machine-id\",\"com.fulcrologic.fulcro.ui-state-machines/state-machine-id\",-1104142583),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"state-machine-id\",\"com.fulcrologic.fulcro.ui-state-machines/state-machine-id\",-1104142583).cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.routing.dynamic_routing.RouterStateMachine),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"event-data\",\"com.fulcrologic.fulcro.ui-state-machines/event-data\",742794031),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"path-segment\",\"path-segment\",1516798997),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"router\",\"router\",1091916230),cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(router_ident,cljs.core.assoc,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),r)], null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.ui-state-machines\",\"actor->ident\",\"com.fulcrologic.fulcro.ui-state-machines/actor->ident\",-1901210928),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"router\",\"router\",1091916230),com.fulcrologic.fulcro.ui_state_machines.with_actor_class(router_ident,r)], null)], null);\nreturn (com.fulcrologic.fulcro.ui_state_machines.begin.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.ui_state_machines.begin.cljs$core$IFn$_invoke$arity$1(G__72719) : com.fulcrologic.fulcro.ui_state_machines.begin.call(null,G__72719));\n}),routers);\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2(app,tx);\n});\n/**\n * Returns the given `prefix` with the TargetClass segment appended onto it, replacing the final elements with the\n * given (optional) path args.\n * \n *   ```\n *   (defsc X [_ _]\n *  {:route-segment [\"a\" :b]})\n * \n *   (into [\"f\" \"g\"] X \"22\") ; => [\"f\" \"g\" \"a\" \"22\"]\n *   ```\n *   \n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.into_path = (function com$fulcrologic$fulcro$routing$dynamic_routing$into_path(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___72933 = arguments.length;\nvar i__4737__auto___72934 = (0);\nwhile(true){\nif((i__4737__auto___72934 < len__4736__auto___72933)){\nargs__4742__auto__.push((arguments[i__4737__auto___72934]));\n\nvar G__72935 = (i__4737__auto___72934 + (1));\ni__4737__auto___72934 = G__72935;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.into_path.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.into_path.cljs$core$IFn$_invoke$arity$variadic = (function (prefix,TargetClass,path_args){\nvar nargs = cljs.core.count(path_args);\nvar path = (function (){var G__72723 = TargetClass;\nvar G__72723__$1 = (((G__72723 == null))?null:com.fulcrologic.fulcro.components.component_options(G__72723));\nif((G__72723__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"route-segment\",\"route-segment\",1812935886).cljs$core$IFn$_invoke$arity$1(G__72723__$1);\n}\n})();\nvar static_elements = (cljs.core.count(path) - nargs);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(prefix,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.take.cljs$core$IFn$_invoke$arity$2(static_elements,path),path_args));\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.into_path.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.routing.dynamic_routing.into_path.cljs$lang$applyTo = (function (seq72720){\nvar G__72721 = cljs.core.first(seq72720);\nvar seq72720__$1 = cljs.core.next(seq72720);\nvar G__72722 = cljs.core.first(seq72720__$1);\nvar seq72720__$2 = cljs.core.next(seq72720__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__72721,G__72722,seq72720__$2);\n}));\n\n/**\n * Returns the route segment of the given TargetClass with the trailing elements replaced by path-args.\n * \n *   ```\n *   (defsc X [_ _]\n *  {:route-segment [\"a\" :b]})\n * \n *   (subpath X \"22\") ; => [\"a\" \"22\"]\n *   ```\n *   \n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.subpath = (function com$fulcrologic$fulcro$routing$dynamic_routing$subpath(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___72936 = arguments.length;\nvar i__4737__auto___72937 = (0);\nwhile(true){\nif((i__4737__auto___72937 < len__4736__auto___72936)){\nargs__4742__auto__.push((arguments[i__4737__auto___72937]));\n\nvar G__72938 = (i__4737__auto___72937 + (1));\ni__4737__auto___72937 = G__72938;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.subpath.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.subpath.cljs$core$IFn$_invoke$arity$variadic = (function (TargetClass,path_args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.routing.dynamic_routing.into_path,cljs.core.PersistentVector.EMPTY,TargetClass,path_args);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.subpath.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.routing.dynamic_routing.subpath.cljs$lang$applyTo = (function (seq72724){\nvar G__72725 = cljs.core.first(seq72724);\nvar seq72724__$1 = cljs.core.next(seq72724);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__72725,seq72724__$1);\n}));\n\n/**\n * Convert a sequence of router targets and parameters into a vector of strings that represents the target route. Parameters\n *   can be sequenced inline:\n * \n *   ```\n *   (defsc A [_ _]\n *  {:route-segment [\"a\" :a-param]})\n * \n *   (defsc B [_ _]\n *  {:route-segment [\"b\" :b-param]})\n * \n *   (route-segment A a-param1 B b-param ...)\n *   ```\n * \n *   where the parameters for a target immediately follow the component that requires them. Alternatively\n *   one can specify all of the parameters at the end as a single map using the parameter names that are used in\n *   the component `:route-segment` itself:\n * \n *   ```\n *   (defsc A [_ _]\n *  {:route-segment [\"a\" :a-param]})\n * \n *   (route-segment A B C D {:a-param 1})\n *   ```\n *   \n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.path_to = (function com$fulcrologic$fulcro$routing$dynamic_routing$path_to(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___72939 = arguments.length;\nvar i__4737__auto___72940 = (0);\nwhile(true){\nif((i__4737__auto___72940 < len__4736__auto___72939)){\nargs__4742__auto__.push((arguments[i__4737__auto___72940]));\n\nvar G__72941 = (i__4737__auto___72940 + (1));\ni__4737__auto___72940 = G__72941;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.path_to.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.path_to.cljs$core$IFn$_invoke$arity$variadic = (function (targets_and_params){\nvar segments = cljs.core.seq(cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2((function (p1__72726_SHARP_){\nif(cljs.core.fn_QMARK_(p1__72726_SHARP_)){\nvar or__4126__auto__ = (com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__72726_SHARP_) : com.fulcrologic.fulcro.components.component_QMARK_.call(null,p1__72726_SHARP_));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.components.component_class_QMARK_(p1__72726_SHARP_);\n}\n} else {\nreturn false;\n}\n}),targets_and_params));\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(segments))) && (cljs.core.map_QMARK_(cljs.core.first(cljs.core.second(segments)))))){\nvar path = cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__72727_SHARP_){\nreturn com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(p1__72727_SHARP_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"route-segment\",\"route-segment\",1812935886)], 0));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.first(segments)], 0));\nvar params = cljs.core.first(cljs.core.second(segments));\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (i){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(params,i,i);\n}),path);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (path,p__72730){\nvar vec__72731 = p__72730;\nvar classes = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72731,(0),null);\nvar params = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72731,(1),null);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.into.cljs$core$IFn$_invoke$arity$2(path,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__72728_SHARP_){\nreturn com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(p1__72728_SHARP_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"route-segment\",\"route-segment\",1812935886)], 0));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.butlast(classes)], 0))),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.routing.dynamic_routing.subpath,cljs.core.last(classes),params));\n}),cljs.core.PersistentVector.EMPTY,cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2((2),segments));\n}\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.path_to.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.routing.dynamic_routing.path_to.cljs$lang$applyTo = (function (seq72729){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq72729));\n}));\n\ncom.fulcrologic.fulcro.routing.dynamic_routing.resolve_path_components = (function com$fulcrologic$fulcro$routing$dynamic_routing$resolve_path_components(StartingClass,RouteTarget){\nif(cljs.core.truth_(com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(RouteTarget,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"route-segment\",\"route-segment\",1812935886)], 0)))){\nvar query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1(StartingClass);\nvar root_node = edn_query_language.core.query__GT_ast(query);\nvar zipper = clojure.zip.zipper((function (p1__72734_SHARP_){\nreturn cljs.core.contains_QMARK_(p1__72734_SHARP_,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\n}),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),(function (n,children){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(n,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),children);\n}),root_node);\nvar node = cljs.core.first(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (n){\nvar map__72735 = clojure.zip.node(n);\nvar map__72735__$1 = (((((!((map__72735 == null))))?(((((map__72735.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72735.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72735):map__72735);\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72735__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nreturn ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(component,RouteTarget)) && ((!(clojure.zip.end_QMARK_(n)))));\n}),cljs.core.iterate(clojure.zip.next,zipper)));\nvar found_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(RouteTarget,(function (){var G__72737 = node;\nvar G__72737__$1 = (((G__72737 == null))?null:clojure.zip.node(G__72737));\nif((G__72737__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(G__72737__$1);\n}\n})());\nif(found_QMARK_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"component\",\"component\",1555936782),clojure.zip.path(node))),RouteTarget);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Attempts to resolve a path from StartingClass to the given RouteTarget. Can also be passed `resolved-components`, which\n *   is the output of `resolve-path-components`.\n * \n * Returns a vector of route segments. Any keywords in the result will be replaced by the values from `params`, if present.\n * \n * Returns nil if no path can be found.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.resolve_path = (function com$fulcrologic$fulcro$routing$dynamic_routing$resolve_path(var_args){\nvar G__72740 = arguments.length;\nswitch (G__72740) {\ncase 2:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.resolve_path.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.resolve_path.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.resolve_path.cljs$core$IFn$_invoke$arity$2 = (function (resolved_components,params){\nif(cljs.core.seq(resolved_components)){\nvar base_path = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1((function (p1__72738_SHARP_){\nreturn com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(p1__72738_SHARP_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"route-segment\",\"route-segment\",1812935886)], 0));\n})),resolved_components);\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (ele){\nif(cljs.core.contains_QMARK_(params,ele)){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(params,ele));\n} else {\nreturn ele;\n}\n}),base_path);\n} else {\nreturn null;\n}\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.resolve_path.cljs$core$IFn$_invoke$arity$3 = (function (StartingClass,RouteTarget,params){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.resolve_path.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.routing.dynamic_routing.resolve_path_components(StartingClass,RouteTarget),params);\n}));\n\n(com.fulcrologic.fulcro.routing.dynamic_routing.resolve_path.cljs$lang$maxFixedArity = 3);\n\n/**\n * Given a new-route path (vector of strings): resolves the target (class) that is the ultimate target of that path.\n */\ncom.fulcrologic.fulcro.routing.dynamic_routing.resolve_target = (function com$fulcrologic$fulcro$routing$dynamic_routing$resolve_target(app,new_route){\nvar state_map = com.fulcrologic.fulcro.application.current_state.cljs$core$IFn$_invoke$arity$1(app);\nvar root_query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.application.root_class(app),state_map);\nvar ast = edn_query_language.core.query__GT_ast(root_query);\nvar root = com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_route(ast,new_route);\nvar G__72742 = root;\nvar map__72743 = G__72742;\nvar map__72743__$1 = (((((!((map__72743 == null))))?(((((map__72743.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72743.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72743):map__72743);\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72743__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar path = new_route;\nvar G__72742__$1 = G__72742;\nvar path__$1 = path;\nwhile(true){\nvar map__72750 = G__72742__$1;\nvar map__72750__$1 = (((((!((map__72750 == null))))?(((((map__72750.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72750.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72750):map__72750);\nvar component__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72750__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar path__$2 = path__$1;\nif(cljs.core.truth_((function (){var and__4115__auto__ = component__$1;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn com.fulcrologic.fulcro.routing.dynamic_routing.router_QMARK_(component__$1);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar map__72752 = com.fulcrologic.fulcro.routing.dynamic_routing.route_target(component__$1,path__$2);\nvar map__72752__$1 = (((((!((map__72752 == null))))?(((((map__72752.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__72752.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__72752):map__72752);\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72752__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar matching_prefix = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72752__$1,new cljs.core.Keyword(null,\"matching-prefix\",\"matching-prefix\",-539262173));\nvar target_ast = (function (){var G__72754 = target;\nvar G__72754__$1 = (((G__72754 == null))?null:com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(G__72754,state_map));\nif((G__72754__$1 == null)){\nreturn null;\n} else {\nreturn edn_query_language.core.query__GT_ast(G__72754__$1);\n}\n})();\nvar prefix_length = cljs.core.count(matching_prefix);\nvar remaining_path = cljs.core.vec(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(prefix_length,path__$2));\nif(cljs.core.seq(remaining_path)){\nvar G__72943 = com.fulcrologic.fulcro.routing.dynamic_routing.ast_node_for_route(target_ast,remaining_path);\nvar G__72944 = remaining_path;\nG__72742__$1 = G__72943;\npath__$1 = G__72944;\ncontinue;\n} else {\nreturn target;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A router that uses Fulcro dynamic queries to optimize query performance on rendering and provides a number of useful\n  features such as easy composition, control over route targeting, on-screen component vetoes of routing requests, etc.\n\n  NOTE: This router is *not* concerned with HTML5 history events or URL management. This router is intended to be usable\n  in server-side rendering, React Native, and anywhere else Fulcro might be used. Therefore it is not tied to a particular\n  rendering platform's idea of location management (i.e. URLs).\n\n  The structure of the route composition (and its representation as a sequence of string path components) is intended to\n  be easy to integrate with HTML5 history and URL control.","~:file","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",51],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async.interop","~$cljs.core.async.interop","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$>fdef","~$com.fulcrologic.guardrails.core","~$?","^K","~$defstatemachine","~$com.fulcrologic.fulcro.ui-state-machines","~$defmutation","~$com.fulcrologic.fulcro.mutations"],"~:excludes",["~#set",[]],"~:macros",["^ ","~$defrouter",["^ ","~:arglists",["~#list",[["~$router-sym","~$arglist","~$options","~$&","~$body"]]],"^6","Define a router.\n\n     The arglist is `[this props]`, which are just like defsc. The props will contains :current-state and :pending-path-segment.\n\n     The options are:\n\n     `:router-targets` - (REQUIRED) A *vector* of ui components that are router targets. The first one is considered the \"default\".\n     Other defsc options - (LIMITED) You may not specify query/initial-state/protocols/ident, but you can define things like react\n     lifecycle methods. See defsc.\n     `:always-render-body?` - (OPTIONAL) When true this router expects that you will supply a render body, and\n     it will always be rendered. The props available in the body will include:\n\n     - `:current-state` - The state of the routing state machine. (:initial, :pending, :failed, :routed)\n     - `:route-factory` - A factory that can generate the current route.\n     - `:route-props` -  The props that should be passed to the route factory. You can augment these with computed if you\n     wish. The router normally passes computed through like so: `(route-factory (comp/computed route-props (comp/get-computed this)))`\n     - `:pending-path-segment` - The route that we're going to (when in pending state).\n\n     The optional body, if defined, will *only* be used if the router has the `:always-render-body?` option set or\n     it is in one of the following states:\n\n     - `:initial` - No route is set.\n     - `:pending` - A deferred route is taking longer than expected (configurable timeout, default 100ms)\n     - `:failed` - A deferred route took longer than can reasonably be expected (configurable timeout, default 5s)\n\n     otherwise the actual active route target will be rendered.\n     ","^8",785,"^9",4,"^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","~:name","~$com.fulcrologic.fulcro.routing.dynamic-routing/defrouter","~:ns","~$com.fulcrologic.fulcro.routing.dynamic-routing","~:macro",true]],"^Z","^11","~:op","^10","~:imports",null,"~:requires",["^ ","~$edn-query-language.core","^16","^?","^@","^K","^K","~$log","~$taoensso.timbre","^M","^M","~$clojure.zip","^19","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^16","~$cljs.core","^1=","~$gobj","~$goog.object","~$goog","^1@","^1?","^1?","~$indexing","~$com.fulcrologic.fulcro.algorithms.indexing","^O","^O","~$s","^@","~$com.fulcrologic.fulcro.application","^1C","~$merge","~$com.fulcrologic.fulcro.algorithms.merge","^1;","^1;","^18","^18","^1E","^1E","~$zip","^19","~$uism","^M","^@","^@","~$app","^1C","^1B","^1B"],"~:seen",["^Q",["~:require","~:require-macros"]],"~:uses",["^ ","^J","^K","~$=>","^K","~$?","^K","^L","^M","^N","^O"],"^1K",["^ ","^11","^11","^?","^@","^K","^K","^17","^18","^M","^M","^1:","^1;","^1=","^1=","^O","^O","~$s","^@","^1;","^1;","^18","^18","^1G","^M","^@","^@"],"~:form",["^U",["~$ns","^11","A router that uses Fulcro dynamic queries to optimize query performance on rendering and provides a number of useful\n  features such as easy composition, control over route targeting, on-screen component vetoes of routing requests, etc.\n\n  NOTE: This router is *not* concerned with HTML5 history events or URL management. This router is intended to be usable\n  in server-side rendering, React Native, and anywhere else Fulcro might be used. Therefore it is not tied to a particular\n  rendering platform's idea of location management (i.e. URLs).\n\n  The structure of the route composition (and its representation as a sequence of string path components) is intended to\n  be easy to integrate with HTML5 history and URL control.",["^U",["^1K",["^11"]]],["^U",["^1J",["^1?","~:as","^1>"],["^19","^1P","^1F"],["^K","~:refer",["^J","^1M","~$?"]],["^M","^1P","^1G","^1Q",["^L"]],["^1E","^1P","^1D"],["^1;","^1P","^1:"],["^1C","^1P","^1H"],["^O","^1Q",["^N"]],["^16","^1P","^1<"],["^18","^1P","^17"],["^?","^1P","~$s"],["^1B","^1P","^1A"]]]]],"~:flags",["^ ","^1K",["^Q",[]],"^1J",["^Q",[]]],"~:js-deps",["^ "],"~:deps",["^1@","^1=","^1?","^19","^K","^M","^1E","^1;","^1C","^O","^16","^18","^@","^1B"]],"^10","^11","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/routing/dynamic_routing.cljc"],"~:compiled-at",1599160998324,"~:resource-name","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.routing.dynamic-routing\n  \"A router that uses Fulcro dynamic queries to optimize query performance on rendering and provides a number of useful\n  features such as easy composition, control over route targeting, on-screen component vetoes of routing requests, etc.\n\n  NOTE: This router is *not* concerned with HTML5 history events or URL management. This router is intended to be usable\n  in server-side rendering, React Native, and anywhere else Fulcro might be used. Therefore it is not tied to a particular\n  rendering platform's idea of location management (i.e. URLs).\n\n  The structure of the route composition (and its representation as a sequence of string path components) is intended to\n  be easy to integrate with HTML5 history and URL control.\"\n  #?(:cljs (:require-macros [com.fulcrologic.fulcro.routing.dynamic-routing]))\n  (:require\n    #?(:cljs [goog.object :as gobj])\n    [clojure.zip :as zip]\n    [com.fulcrologic.guardrails.core :refer [>fdef => ?]]\n    [com.fulcrologic.fulcro.ui-state-machines :as uism :refer [defstatemachine]]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.mutations :refer [defmutation]]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]\n    [clojure.spec.alpha :as s]\n    #?(:clj [cljs.analyzer :as ana])\n    [com.fulcrologic.fulcro.algorithms.indexing :as indexing]))\n\n(def ^:dynamic *target-class*\n  \"INTERNAL USE ONLY. Not guaranteed to be available at runtime in production builds. This is used to aid in giving\n   development-time warnings/errors.\n\n   Class of the routing target component, available in the notifications fns\n   (:will-enter, :route-cancelled, :will-leave)\"\n  nil)\n\n(declare route-immediate)\n\n(defn route-segment\n  \"Returns a vector that describes the sub-path that a given route target represents. String elements represent\n  explicit path elements, and keywords represent variable values (which are always pulled as strings).\"\n  [class]\n  (comp/component-options class :route-segment))\n\n(defn get-route-cancelled\n  \"Returns the function that should be called if this target was in a deferred state and a different routing choice was made. Is given the same route parameters that were sent to `will-enter`.\"\n  [class]\n  (comp/component-options class :route-cancelled))\n\n(defn route-cancelled\n  \"Universal CLJC version of route-cancelled.  Don't use the protocol method in CLJ.\"\n  [class route-params]\n  (when-let [f (get-route-cancelled class)]\n    (binding [*target-class* class]\n      (f route-params))))\n\n(defn get-will-enter\n  \"Returns the function that is called before a route target is activated (if the route segment of interest has changed and the\n  target of the result is this target).  MUST return (r/route-immediate ident) or (r/route-deferred ident) to indicate\n  what ident should be used in app state to connect the router's join.  If deferred, the router must cause a call to\n  the r/target-ready mutation (or use the target-ready* mutation helper) with a {:target ident} parameter to indicate\n  that the route target is loaded and ready for display.\n\n  `params` will be a map from any keywords found in `route-segment` to the string value of that path element.\n\n  WARNING: This method MUST be side-effect free.\"\n  [class]\n  (if-let [will-enter (comp/component-options class :will-enter)]\n    will-enter\n    (let [ident (comp/get-ident class {})]\n      (when-not ident (log/error \"Component must have an ident for routing to work properly:\" (comp/component-name class)))\n      (fn [_ _] (route-immediate ident)))))\n\n(defn will-enter\n  \"Universal CLJC version of will-enter.\"\n  [class app params]\n  (when-let [will-enter (get-will-enter class)]\n    (binding [*target-class* class]\n      (will-enter app params))))\n\n(defn route-target? [component] (boolean (comp/component-options component :route-segment)))\n\n(defn get-will-leave\n  \"Returns the function of a route target to be called with\n  the current component and props. If it returns `true` then the routing operation will continue.  If it returns `false`\n  then whatever new route was requested will be completely abandoned. If this component has a `allow-route-change?`\n  then the return value of will-leave will be ignored.\"\n  [this]\n  (or (comp/component-options this :will-leave) (constantly true)))\n\n(defn will-leave [c props]\n  (when-let [f (get-will-leave c)]\n    (binding [*target-class* (comp/isoget c :type)]\n      (f c props))))\n\n(defn get-allow-route-change?\n  \"Returns the function of a route target to be called with the current component and props.\n   If it returns `true` then the routing operation can continue.  If it returns `false`\n   then whatever new route was requested will be completely abandoned. This handler MUST NOT side-effect, and\n   may be called multiple times on a single route request.\"\n  [this]\n  (or\n    (comp/component-options this :allow-route-change?)\n    (when-let [will-leave (comp/component-options this :will-leave)]\n      (log/warn \"DEPRECATED USE OF `:will-leave` to check for allowable routing. You should add :allow-route-change? to: \" (comp/component-name this))\n      (fn [] (will-leave this (comp/props this))))\n    (constantly true)))\n\n(defn allow-route-change? [c]\n  (try\n    (when-let [f (get-allow-route-change? c)]\n      (binding [*target-class* (comp/isoget c :type)]\n        (f c)))\n    (catch #?(:clj Exception :cljs :default) e\n      (log/error \"Cannot evalutate route change. Assuming ok. Exception message: \" (ex-message e))\n      true)))\n\n(defn route-lifecycle? [component] (boolean (comp/component-options component :will-leave)))\n\n(defn get-targets\n  \"Returns a set of classes to which this router routes.\"\n  [router]\n  (set (comp/component-options router :router-targets)))\n\n(defn- ident-matches-expectation? [[expected-table maybe-expected-id] [table id]]\n  ;; NOTE: If the `id` of the ident is hardcoded then maybe-expected-id will be set,\n  ;; but if it depends on props then it will be nil\n  (and (= expected-table table)\n    (or (nil? maybe-expected-id) (= maybe-expected-id id))))\n\n(defn- check-ident-matches-expectation? [fn-name ident]\n  (when (and #?(:clj false :cljs goog.DEBUG)\n          *target-class*\n          (not (ident-matches-expectation? (comp/ident *target-class* {}) ident)))\n    (log/error fn-name \" was invoked with the ident \" ident\n      \" which doesn't seem to match the ident of the wrapping component (class \"\n      *target-class* \" , ident [\"\n      (first (comp/ident *target-class* {})) \" ...])\")))\n\n(defn route-immediate [ident]\n  (check-ident-matches-expectation? \"route-immediate\" ident)\n  (with-meta ident {:immediate true}))\n\n(defn route-deferred [ident completion-fn]\n  (check-ident-matches-expectation? \"route-deferred\" ident)\n  (with-meta ident {:immediate false\n                    :fn        completion-fn}))\n(defn immediate? [ident] (some-> ident meta :immediate))\n\n(defn- apply-route* [state-map {:keys [router target]}]\n  (let [router-class (-> router meta :component)\n        router-id    (second router)\n        target-class (-> target meta :component)]\n    (log/debug \"Applying route ident\" target \"to router\" router-id)\n    (when (nil? router-class)\n      (log/error \"apply-route* was called without a proper :router argument.\"))\n    (when (nil? target-class)\n      (log/error \"apply-route* for router \" router-class \"was given a target that did not have a component. \"\n        \"Did you remember to call route-deferred or route-immediate?\"))\n    (-> state-map\n      (assoc-in (conj router ::current-route) target)\n      (update-in router dissoc ::pending-route)\n      (comp/set-query* router-class {:query [::id [::uism/asm-id router-id] {::current-route (comp/get-query target-class state-map)}]}))))\n\n(defn router-for-pending-target [state-map target]\n  (let [routers   (some-> state-map ::id vals)\n        router-id (reduce (fn [_ r]\n                            (when (and #?(:clj true :cljs goog.DEBUG) (nil? (::id r)))\n                              (log/error \"There is a router in state that is missing an ID. This indicates that\"\n                                \"you forgot to compose it into your initial state! It will fail to operate properly.\"))\n                            (when (= target (some-> r ::pending-route :target))\n                              (reduced (::id r))))\n                    nil\n                    routers)]\n    router-id))\n\n(defmutation target-ready\n  \"Mutation: Indicate that a target is ready.\"\n  [{:keys [target]}]\n  (action [{:keys [app]}]\n    (let [state-map (app/current-state app)\n          router-id (router-for-pending-target state-map target)]\n      (if router-id\n        (do\n          (log/debug \"Router\" router-id \"notified that pending route is ready.\")\n          (when (and #?(:clj false :cljs goog.DEBUG) (nil? (get-in state-map target)))\n            (log/error `target-ready \"should route to\" target \"but there is no data in the DB for the ident.\"\n              \"Perhaps you supplied a wrong ident?\"))\n          (uism/trigger! app router-id :ready!))\n        (log/error \"dr/target-ready! was called but there was no router waiting for the target listed: \" target\n          \"This could mean you sent one ident, and indicated ready on another.\"))))\n  (refresh [_] [::current-route]))\n\n(defn target-ready!\n  \"Indicate a target is ready.  Safe to use from within mutations.\n\n  target - The ident that was originally listed as a deferred target.\"\n  [component-or-app target]\n  (comp/transact! component-or-app [(target-ready {:target target})]))\n\n(defn router? [component] (boolean (comp/component-options component :router-targets)))\n\n(defn matching-prefix\n  \"Returns the elements of actual-path that match the route-segment definition.\"\n  [route-segment actual-path]\n  (let [matching-segment (reduce\n                           (fn [result [expected actual]]\n                             (cond\n                               (and (string? expected) (= expected actual))\n                               (conj result actual)\n\n                               (and (keyword? expected) (seq (str actual)))\n                               (conj result (str actual))\n\n                               :otherwise result))\n                           []\n                           (map (fn [a b] [a b]) route-segment actual-path))]\n    (when (= (count matching-segment) (count route-segment))\n      matching-segment)))\n\n(defn current-route-class\n  \"Get the class of the component that is currently being routed to.\"\n  [this]\n  (let [state-map (comp/component->state-map this)\n        class     (some->> (comp/get-query this state-map) eql/query->ast :children\n                    (filter #(= ::current-route (:key %))) first :component)\n        ;; Hot code reload support to avoid getting the cached class from old metadata\n        class     (if #?(:cljs goog.DEBUG :clj false)\n                    (-> class comp/class->registry-key comp/registry-key->class)\n                    class)]\n\n    class))\n\n(defn route-target\n  \"Given a router class and a path segment, returns the class of *that router's* target that accepts the given URI path,\n  which is a vector of (string) URI components.\n\n  Returns nil if there is no target that accepts the path, or a map containing:\n\n  {:target class\n   :matching-prefix prefix}\n\n  where `class` is the component class that accepts the path (the target, NOT the router), and `matching-prefix` is the\n  portion of the path that is accepted by that class.\n\n  NOTE: If more than one target matches, then the target with the longest match will be returned. A warning will be\n  printed if more than one match of equal length is found.\n  \"\n  [router-class path]\n  (when (and router-class (router? router-class))\n    (let [targets    (get-targets router-class)\n          matches    (->> (reduce (fn [result target-class]\n                                    (let [prefix (and target-class (route-target? target-class)\n                                                   (some-> target-class (route-segment) (matching-prefix path)))]\n                                      (if (and prefix (seq prefix))\n                                        (conj result {:length          (count prefix)\n                                                      :matching-prefix prefix\n                                                      :target          target-class})\n                                        result))) [] targets)\n                       (sort-by :length)\n                       reverse)\n          max-length (some-> matches first :length)\n          match      (filter #(= max-length (:length %)) matches)]\n      (when (second match)\n        (log/warn \"More than one route target matches\" path))\n      (first match))))\n\n(defn accepts-route?\n  \"Returns true if the given component is a router that manages a route target that will accept the given path.\"\n  [component path]\n  (boolean (route-target component path)))\n\n(defn ast-node-for-route\n  \"Returns the AST node for a query that represents the router that has a target that can accept the given path. This is a breadth-first\n  search.\n\n  ast - A query AST node\n  path - A vector of the current URI segments.\n\n  Returns an AST node or nil if none is found.\"\n  [{:keys [component children] :as ast-node} path]\n  (or\n    (and (accepts-route? component path) ast-node)\n    (some #(and (accepts-route? (:component %) path) %) children)\n    (some #(ast-node-for-route % path) children)))\n\n(defn ast-node-for-live-router\n  \"Returns the AST node for a query that represents the closest \\\"live\\\" (on-screen) router\n\n  ast - A query AST node\n\n  Returns an AST node or nil if none is found.\"\n  [app {:keys [component children] :as ast-node}]\n  (letfn [(live-router? [c] (and (router? c) (boolean (comp/class->any app c))))]\n    (or\n      (and (live-router? component) ast-node)\n      (some #(and (live-router? (:component %)) %) children)\n      (some #(ast-node-for-live-router app %) children))))\n\n\n(defmutation apply-route\n  \"Mutation: Indicate that a given route is ready and should show the result.\n\n  router - The ident of the router, with metadata :component that is the class of the router.\n  target - The ident of the target route, with metadata :component that is the class of the target.\"\n  [{:keys [router target] :as params}]\n  (action [{:keys [app state]}]\n    (swap! state apply-route* params)))\n\n(defn mark-route-pending* [state-map {:keys [router target] :as params}]\n  (assoc-in state-map (conj router ::pending-route) params))\n\n(letfn [(target-ready*\n          [state-map target]\n          (let [router-id (router-for-pending-target state-map target)]\n            (if router-id\n              (apply-route* state-map (get-in state-map [::id router-id ::pending-route]))\n              state-map)))]\n  (defn ready-handler [env]\n    (let [new-env (-> env\n                    (uism/store :path-segment (uism/retrieve env :pending-path-segment))\n                    (uism/store :pending-path-segment [])\n                    (uism/apply-action target-ready* (uism/retrieve env :target)))\n          app     (::uism/app env)]\n      (when app\n        (comp/transact! app [(indexing/reindex)]))\n      new-env)))\n\n(defn fail-handler [env] env)\n\n(defn route-handler [{::uism/keys [app event-data] :as env}]\n  (let [{:keys [router target error-timeout deferred-timeout path-segment] :or {error-timeout 5000 deferred-timeout 20}} event-data\n        immediate? (immediate? target)]\n    (-> (if immediate?\n          (let [new-env (-> env\n                          (uism/store :path-segment path-segment)\n                          (uism/apply-action apply-route* event-data)\n                          (uism/activate :routed))]\n            (when app\n              (comp/transact! app [(indexing/reindex)]))\n            new-env)\n          (-> env\n            (uism/store :pending-path-segment path-segment)\n            (uism/apply-action mark-route-pending* event-data)\n            (uism/set-timeout :error-timer :timeout! {} error-timeout #{:ready! :route!})\n            (uism/set-timeout :delay-timer :waiting! {} deferred-timeout #{:ready! :route!})\n            (uism/activate :deferred)))\n      (uism/store :target target))))\n\n(defstatemachine RouterStateMachine\n  {::uism/actors\n   #{:router}\n\n   ::uism/aliases\n   {:current-route [:router ::current-route]\n    :state         [:router ::current-state]}\n\n   ::uism/states\n   {:initial  {::uism/handler route-handler}\n\n    :deferred {::uism/events\n               {:waiting! {::uism/target-state :pending}\n                :route!   {::uism/handler route-handler}\n                :ready!   {::uism/target-state :routed\n                           ::uism/handler      ready-handler}\n                :timeout! {::uism/target-state :failed\n                           ::uism/handler      fail-handler}}}\n\n    :pending  {::uism/events\n               {:waiting! {::uism/target-state :pending}\n                :route!   {::uism/handler route-handler}\n                :ready!   {::uism/target-state :routed\n                           ::uism/handler      ready-handler}\n                :timeout! {::uism/target-state :failed\n                           ::uism/handler      fail-handler}}}\n\n    ;; failed may potentially resolve (just very late), so it must accept ready! events\n    :failed   {::uism/events\n               {:route! {::uism/handler route-handler}\n                :ready! {::uism/target-state :routed\n                         ::uism/handler      ready-handler}}}\n\n    :routed   {::uism/events {:waiting! {::uism/handler identity} ; in case we fail to cancel timer\n                              :timeout! {::uism/handler identity}\n                              :route!   {::uism/handler route-handler}}}}})\n\n;; TODO: This algorithm is repeated in more than one place in slightly different forms...refactor it.\n(defn proposed-new-path\n  \"Internal algorithm: Returns a sequence of idents of the targets that the `new-route` goes through by analyzing the current\n  application query and state.\"\n  ([this-or-app relative-class-or-instance new-route]\n   (proposed-new-path this-or-app relative-class-or-instance new-route {}))\n  ([this-or-app relative-class-or-instance new-route timeouts-and-params]\n  (let [app        (comp/any->app this-or-app)\n        state-map  (app/current-state app)\n        router     relative-class-or-instance\n        root-query (comp/get-query router state-map)\n        ast        (eql/query->ast root-query)\n        root       (ast-node-for-route ast new-route)\n        result     (atom [])]\n    (loop [{:keys [component]} root path new-route]\n      (when (and component (router? component))\n        (let [{:keys [target matching-prefix]} (route-target component path)\n              target-ast     (some-> target (comp/get-query state-map) eql/query->ast)\n              prefix-length  (count matching-prefix)\n              remaining-path (vec (drop prefix-length path))\n              segment        (route-segment target)\n              params         (reduce\n                               (fn [p [k v]] (if (keyword? k) (assoc p k v) p))\n                                (dissoc timeouts-and-params :error-timeout :deferred-timeout)\n                               (map (fn [a b] [a b]) segment matching-prefix))\n              target-ident   (will-enter target app params)]\n          (when (or (not (eql/ident? target-ident)) (nil? (second target-ident)))\n            (log/error \"will-enter for router target\" (comp/component-name target) \"did not return a valid ident. Instead it returned: \" target-ident))\n          (when (and (eql/ident? target-ident)\n                  (not (contains? (some-> target-ident meta) :immediate)))\n            (log/error \"will-enter for router target\" (comp/component-name target) \"did not wrap the ident in route-immediate or route-deferred.\"))\n          (when (vector? target-ident)\n            (swap! result conj (vary-meta target-ident assoc :component target :params params)))\n          (when (seq remaining-path)\n            (recur (ast-node-for-route target-ast remaining-path) remaining-path)))))\n     @result)))\n\n(defn signal-router-leaving\n  \"Tell active routers that they are about to leave the screen. Returns false if any of them deny the route change.\"\n  ([app-or-comp relative-class-or-instance new-route]\n   (signal-router-leaving app-or-comp relative-class-or-instance new-route {}))\n  ([app-or-comp relative-class-or-instance new-route timeouts-and-params]\n   (let [new-path   (proposed-new-path app-or-comp relative-class-or-instance new-route timeouts-and-params)\n        app        (comp/any->app app-or-comp)\n        state-map  (app/current-state app)\n        router     relative-class-or-instance\n        root-query (comp/get-query router state-map)\n        ast        (eql/query->ast root-query)\n        root       (ast-node-for-live-router app ast)\n        to-signal  (atom [])\n        to-cancel  (atom [])\n        _          (loop [{:keys [component children] :as node} root new-path-remaining new-path]\n                     (when (and component (router? component))\n                       (let [new-target    (first new-path-remaining)\n                             router-ident  (comp/get-ident component {})\n                             active-target (get-in state-map (conj router-ident ::current-route))\n                             {:keys [target]} (get-in state-map (conj router-ident ::pending-route))\n                             next-router   (some #(ast-node-for-live-router app %) children)]\n                         (when (eql/ident? target)\n                           (swap! to-cancel conj target))\n                         (when (and (not= new-target active-target) (vector? active-target))\n                           (let [mounted-target-class (reduce (fn [acc {:keys [dispatch-key component]}]\n                                                                (when (= ::current-route dispatch-key)\n                                                                  (reduced component)))\n                                                        nil\n                                                        (some-> component (comp/get-query state-map)\n                                                          eql/query->ast :children))\n                                 mounted-targets      (comp/class->all app mounted-target-class)]\n                             (when (and #?(:cljs goog.DEBUG :clj true) (> (count mounted-targets) 1))\n                               (log/error \"More than one route target on screen of type\" mounted-target-class))\n                             (when (seq mounted-targets)\n                               (swap! to-signal into mounted-targets))))\n                         (when next-router\n                           (recur next-router (rest new-path-remaining))))))\n        components (reverse @to-signal)\n        result     (atom true)]\n    (doseq [c components]\n      (swap! result #(and % (will-leave c (comp/props c)))))\n    (when @result\n      (doseq [t @to-cancel]\n        (let [{:keys [component params]} (some-> t meta)]\n          (route-cancelled component params))))\n     @result)))\n\n(defn current-route\n  \"Returns the current active route, starting from the relative Fulcro class or instance.\n\n  Any component using this as a basis for rendering will need to add the following to their query to\n  ensure the props of that component change on route changes:\n\n  ```\n  [::uism/asm-id fq-router-kw]\n  ```\n\n  where `fq-router-kw` is a keyword that has the exact namespace and name of the router you're interested in. If you want\n  to just over-render you can use a quoted `_` instead.\n  \"\n  ([this-or-app]\n   (let [app        (comp/any->app this-or-app)\n         router     (app/root-class app)\n         state-map  (app/current-state app)\n         root-query (comp/get-query router state-map)\n         ast        (eql/query->ast root-query)\n         root       (or (ast-node-for-live-router app ast)\n                      (-> ast :children first))\n         result     (atom [])]\n     (loop [{:keys [component] :as node} root]\n       (when (and component (router? component))\n         (let [router-ident (comp/get-ident component {})\n               router-id    (-> router-ident second)\n               sm-env       (uism/state-machine-env state-map nil router-id :none {})\n               path-segment (uism/retrieve sm-env :path-segment)\n               next-router  (some #(ast-node-for-live-router app %) (:children node))]\n           (when (seq path-segment)\n             (swap! result into path-segment))\n           (when next-router\n             (recur next-router)))))\n     @result))\n  ([this-or-app relative-class-or-instance]\n   (let [app        (comp/any->app this-or-app)\n         state-map  (app/current-state app)\n         router     relative-class-or-instance\n         root-query (comp/get-query router state-map)\n         ast        (eql/query->ast root-query)\n         root       (or (ast-node-for-live-router app ast)\n                      (-> ast :children first))\n         result     (atom [])]\n     (loop [{:keys [component] :as node} root]\n       (when (and component (router? component))\n         (let [router-ident (comp/get-ident component {})\n               router-id    (-> router-ident second)\n               sm-env       (uism/state-machine-env state-map nil router-id :none {})\n               path-segment (uism/retrieve sm-env :path-segment)\n               next-router  (some #(ast-node-for-live-router app %) (:children node))]\n           (when (seq path-segment)\n             (swap! result into path-segment))\n           (when next-router\n             (recur next-router)))))\n     @result)))\n\n(defn- mounted-targets [app router-class]\n  (let [state-map            (app/current-state app)\n        mounted-target-class (reduce (fn [acc {:keys [dispatch-key component]}]\n                                       (when (= ::current-route dispatch-key)\n                                         (reduced component)))\n                               nil\n                               (some-> router-class (comp/get-query state-map)\n                                 eql/query->ast :children))]\n    (comp/class->all app mounted-target-class)))\n\n(defn- set-force-route-flag! [route-target]\n  #?(:cljs (gobj/set route-target \"fulcro$routing$force_route\" true)))\n\n(defn- force-route-flagged?\n  \"returns true if the given route target's allow-route-change? should be ignored.\"\n  [route-target]\n  (comp/isoget route-target \"fulcro$routing$force_route\"))\n\n(defn target-denying-route-changes\n  \"This function will return the first mounted instance of a route target that is currently indicating it would\n  deny a route change.\"\n  [this-or-app]\n  (let [app        (comp/any->app this-or-app)\n        router     (app/root-class app)\n        state-map  (app/current-state app)\n        root-query (comp/get-query router state-map)\n        ast        (eql/query->ast root-query)\n        root       (or (ast-node-for-live-router app ast)\n                     (-> ast :children first))]\n    (loop [{router-class :component\n            :keys        [children]} root]\n      (when (and router-class (router? router-class))\n        (let [router-ident     (comp/get-ident router-class {})\n              active-target    (get-in state-map (conj router-ident ::current-route))\n              next-router      (some #(ast-node-for-live-router app %) children)\n              rejecting-target (when (vector? active-target)\n                                 (some (fn [c] (when (and\n                                                       (false? (allow-route-change? c))\n                                                       (not (force-route-flagged? c))) c)) (mounted-targets app router-class)))]\n          (cond\n            rejecting-target rejecting-target\n            next-router (recur next-router)))))))\n\n(defn can-change-route?\n  \"Returns true if the active on-screen targets indicate they will allow navigation.\n\n  NOTE: If your route targets have an `:allow-route-change?`, then that will be used to determine if the route can\n  be abandoned; otherwise `:will-leave` will be called to answer the question; however, this USE of `will-leave`\n  is DEPRECATED (though the hook is NOT because it serves another purpose). If you side-effect in `:will-leave` this could cause strange\n  behavior throughout the application.  It is recommended that your targets implement `:allow-route-change?` if they need\n  to prevent routing, and only leverage `:will-leave` to do things like cancel in-progress loads.\"\n  [this-or-app]\n  (nil? (target-denying-route-changes this-or-app)))\n\n(defn change-route-relative!\n  \"Change the route, starting at the given Fulcro class or instance (scanning for the first router from there).  `new-route` is a vector\n  of string components to pass through to the nearest child router as the new path. The first argument is any live component\n  or the app.  The `timeouts-and-params` are as in `change-route`.\n\n  When possible (i.e. no circular references to components) you can maintain better code navigation by\n  generating `new-route` via `path-to`.  This will allow readers of your code to quickly jump to the actual\n  components that implement the targets when reading the code.\n  \"\n  ([this-or-app relative-class-or-instance new-route]\n   (change-route-relative! this-or-app relative-class-or-instance new-route {}))\n  ([app-or-comp relative-class-or-instance new-route timeouts-and-params]\n   (let [old-route (current-route app-or-comp relative-class-or-instance)\n         new-path  (proposed-new-path app-or-comp relative-class-or-instance new-route timeouts-and-params)]\n     (cond\n       (and (= old-route new-route) (not (::force? timeouts-and-params)))\n       (log/debug \"Request to change route, but path is the current route. Ignoring change request.\")\n\n       (and #?(:clj true :cljs goog.DEBUG) (not (seq new-path)))\n       (log/error \"Could not find route targets for new-route\" new-route)\n\n       (not (can-change-route? app-or-comp))\n       (let [app          (comp/any->app app-or-comp)\n             target       (target-denying-route-changes app)\n             route-denied (comp/component-options target :route-denied)]\n         (log/debug \"Route request denied by on-screen target. Calling component's :route-denied (if defined).\")\n         (when route-denied\n           (route-denied target relative-class-or-instance new-route)))\n\n       :otherwise\n       (do\n         (signal-router-leaving app-or-comp relative-class-or-instance new-route timeouts-and-params)\n         (let [app        (comp/any->app app-or-comp)\n               state-map  (app/current-state app)\n               router     relative-class-or-instance\n               root-query (comp/get-query router state-map)\n               ast        (eql/query->ast root-query)\n               root       (ast-node-for-route ast new-route)\n               old-route  (current-route app relative-class-or-instance)]\n           (loop [{:keys [component]} root path new-route]\n             (when (and component (router? component))\n               (let [{:keys [target matching-prefix]} (route-target component path)\n                     target-ast        (some-> target (comp/get-query state-map) eql/query->ast)\n                     prefix-length     (count matching-prefix)\n                     remaining-path    (vec (drop prefix-length path))\n                     segment           (route-segment target)\n                     params            (reduce\n                                         (fn [p [k v]] (if (keyword? k) (assoc p k v) p))\n                                         (dissoc timeouts-and-params :error-timeout :deferred-timeout)\n                                         (map (fn [a b] [a b]) segment matching-prefix))\n                     router-ident      (comp/get-ident component {})\n                     router-id         (-> router-ident second)\n                     target-ident      (will-enter target app params)\n                     completing-action (or (some-> target-ident meta :fn) (constantly true))\n                     event-data        (merge\n                                         {:error-timeout 5000 :deferred-timeout 20}\n                                         timeouts-and-params\n                                         {:path-segment matching-prefix\n                                          :router       (vary-meta router-ident assoc :component component)\n                                          :target       (vary-meta target-ident assoc :component target :params params)})]\n                 (if-not (uism/get-active-state app router-id)\n                   (do\n                     (let [state-map (comp/component->state-map app-or-comp)]\n                       (when-not (-> state-map ::id (get router-id))\n                         (log/error \"You are routing to a router \" router-id \"whose state was not composed into the app from root. Please check your :initial-state.\")))\n                     (uism/begin! app-or-comp RouterStateMachine router-id\n                       {:router (uism/with-actor-class router-ident component)}\n                       event-data))\n                   (uism/trigger! app router-id :route! event-data))\n                 ;; make sure any transactions submitted from the completing action wait for a render of the state machine's\n                 ;; startup or route effects before running.\n                 (binding [comp/*after-render* true]\n                   (completing-action))\n                 (when (seq remaining-path)\n                   (recur (ast-node-for-route target-ast remaining-path) remaining-path)))))))))))\n\n(def change-route-relative \"DEPRECATED NAME: Use change-route-relative!\" change-route-relative!)\n\n(defn retry-route!\n  \"Retry a route that the receiving component just denied, and ignore this target's answer. All other targets will still\n  be asked. This is primarily used when you want to be able to use js/confirm in a component to ask the user if\n  they \\\"really mean to navigate away\\\". You MUST pass the arguments that `:route-denied` received\n  or you can easily cause an infinite loop. Other on-screen targets can still potentially abort the route.\"\n  [denied-target-instance relative-root path]\n  #?(:cljs\n     (do\n       (log/debug \"Retrying route at the request of \" (comp/component-name denied-target-instance))\n       (set-force-route-flag! denied-target-instance)\n       (change-route-relative! denied-target-instance relative-root path))))\n\n(defn change-route!\n  \"Trigger a route change.\n\n  * `this` - The component (or app) that is causing the route change.\n  * `new-route` - A vector of URI components to pass to the router.\n  * `timeouts-and-params` - A map of additional parameters and route timeouts that affect UI during deferred routes:\n  `{:error-timeout ms :deferred-timeout ms}`.  Anything extra will appear in the `params` of `will-enter`.\n\n  The error timeout is how long to wait  (default 5000ms) before showing the error-ui of a route (which must be defined on the\n  router that is having problems).  The deferred-timeout (default 100ms) is how long to wait before showing the loading-ui of\n  a deferred router (to prevent flicker).\n  \"\n  ([this new-route]\n   (change-route! this new-route {}))\n  ([this new-route timeouts-and-params]\n   (let [app  (comp/any->app this)\n         root (app/root-class app)]\n     (change-route-relative! app root new-route timeouts-and-params))))\n\n(def change-route change-route!)\n\n#?(:clj\n   (defn compile-error [env form message]\n     (throw (ana/error (merge env (some-> form meta)) message {}))))\n\n#?(:clj (s/def ::router-targets (s/coll-of symbol? :type vector?)))\n#?(:clj (s/def ::always-render-body? boolean?))\n#?(:clj (s/def ::defrouter-options (s/keys :req-un [::router-targets] :opt-un [::always-render-body?])))\n\n(defn validate-route-targets\n  \"Run a runtime validation on route targets to verify that they at least declare a route-segment that is a vector.\"\n  [router-instance]\n  (doseq [t (get-targets router-instance)\n          :let [segment (route-segment t)\n                valid?  (and\n                          (vector? segment)\n                          (not (empty? segment))\n                          (every? #(or (keyword? %) (string? %)) segment))]]\n    (when-not valid?\n      (log/error \"Route target \"\n        (comp/component-name t)\n        \"of router\"\n        (comp/component-name router-instance)\n        \"does not declare a valid :route-segment. Route segments must be non-empty vector that contain only strings\"\n        \"and keywords\"))))\n\n#?(:clj\n   (defn defrouter* [env router-ns router-sym arglist options body]\n     (when-not (and (vector? arglist) (= 2 (count arglist)))\n       (compile-error env options \"defrouter argument list must have an entry for this and props.\"))\n     (when-not (map? options)\n       (compile-error env options \"defrouter requires a literal map of options.\"))\n     (when-not (s/valid? ::defrouter-options options)\n       (compile-error env options (str \"defrouter options are invalid: \" (s/explain-str ::defrouter-options options))))\n     (let [{:keys [router-targets]} options\n           _                      (when (empty? router-targets)\n                                    (compile-error env options \"defrouter requires at least one router-target\"))\n           id                     (keyword router-ns (name router-sym))\n           getq                   (fn [s] `(or (comp/get-query ~s)\n                                             (throw (ex-info (str \"Route target has no query! \"\n                                                               (comp/component-name ~s)) {}))))\n           query                  (into [::id\n                                         [::uism/asm-id id]\n                                         {::current-route (getq (first router-targets))}]\n                                    (map-indexed\n                                      (fn [idx s]\n                                        (when (nil? s)\n                                          (compile-error env options \"defrouter :target contains nil!\"))\n                                        {(keyword (str \"alt\" idx)) (getq s)})\n                                      (rest router-targets)))\n           initial-state-map      (into {::id            id\n                                         ::current-route `(comp/get-initial-state ~(first router-targets) ~'params)}\n                                    (map-indexed\n                                      (fn [idx s] [(keyword (str \"alt\" idx)) `(comp/get-initial-state ~s {})])\n                                      (rest router-targets)))\n           ident-method           (apply list `(fn [] [::id ~id]))\n           initial-state-lambda   (apply list `(fn [~'params] ~initial-state-map))\n           states-to-render-route (if (seq body)\n                                    #{:routed :deferred}\n                                    `(constantly true))\n           always-render-body?    (and (map? options) (:always-render-body? options))\n           render-cases           (if always-render-body?\n                                    (apply list `(let [~'class (current-route-class ~'this)]\n                                                   (let [~(first arglist) ~'this\n                                                         ~(second arglist) {:pending-path-segment ~'pending-path-segment\n                                                                            :route-props          ~'current-route\n                                                                            :route-factory        (when ~'class (comp/factory ~'class))\n                                                                            :current-state        ~'current-state}]\n                                                     ~@body)))\n                                    (apply list `(let [~'class (current-route-class ~'this)]\n                                                   (if (~states-to-render-route ~'current-state)\n                                                     (when ~'class\n                                                       (let [~'factory (comp/factory ~'class)]\n                                                         (~'factory (comp/computed ~'current-route (comp/get-computed ~'this)))))\n                                                     (let [~(first arglist) ~'this\n                                                           ~(second arglist) {:pending-path-segment ~'pending-path-segment\n                                                                              :route-props          ~'current-route\n                                                                              :route-factory        (when ~'class (comp/factory ~'class))\n                                                                              :current-state        ~'current-state}]\n                                                       ~@body)))))\n           options                (merge\n                                    `{:componentDidMount (fn [this#] (validate-route-targets this#))}\n                                    options\n                                    `{:query         ~query\n                                      :ident         ~ident-method\n                                      :use-hooks?    false\n                                      :initial-state ~initial-state-lambda})]\n       `(comp/defsc ~router-sym [~'this {::keys [~'id ~'current-route] :as ~'props}]\n          ~options\n          (let [~'current-state (uism/get-active-state ~'this ~id)\n                ~'state-map (comp/component->state-map ~'this)\n                ~'sm-env (uism/state-machine-env ~'state-map nil ~id :fake {})\n                ~'pending-path-segment (uism/retrieve ~'sm-env :pending-path-segment)]\n            ~render-cases)))))\n\n#?(:clj\n   (defmacro defrouter\n     \"Define a router.\n\n     The arglist is `[this props]`, which are just like defsc. The props will contains :current-state and :pending-path-segment.\n\n     The options are:\n\n     `:router-targets` - (REQUIRED) A *vector* of ui components that are router targets. The first one is considered the \\\"default\\\".\n     Other defsc options - (LIMITED) You may not specify query/initial-state/protocols/ident, but you can define things like react\n     lifecycle methods. See defsc.\n     `:always-render-body?` - (OPTIONAL) When true this router expects that you will supply a render body, and\n     it will always be rendered. The props available in the body will include:\n\n     - `:current-state` - The state of the routing state machine. (:initial, :pending, :failed, :routed)\n     - `:route-factory` - A factory that can generate the current route.\n     - `:route-props` -  The props that should be passed to the route factory. You can augment these with computed if you\n     wish. The router normally passes computed through like so: `(route-factory (comp/computed route-props (comp/get-computed this)))`\n     - `:pending-path-segment` - The route that we're going to (when in pending state).\n\n     The optional body, if defined, will *only* be used if the router has the `:always-render-body?` option set or\n     it is in one of the following states:\n\n     - `:initial` - No route is set.\n     - `:pending` - A deferred route is taking longer than expected (configurable timeout, default 100ms)\n     - `:failed` - A deferred route took longer than can reasonably be expected (configurable timeout, default 5s)\n\n     otherwise the actual active route target will be rendered.\n     \"\n     [router-sym arglist options & body]\n     (defrouter* &env (str (ns-name *ns*)) router-sym arglist options body)))\n\n#?(:clj\n   (s/fdef defrouter\n     :args (s/cat :sym symbol? :arglist vector? :options map? :body (s/* any?))))\n\n(defn all-reachable-routers\n  \"Returns a sequence of all of the routers reachable in the query of the app.\"\n  [state-map component-class]\n  (let [root-query  (comp/get-query component-class state-map)\n        {:keys [children]} (eql/query->ast root-query)\n        get-routers (fn get-routers* [nodes]\n                      (reduce\n                        (fn [acc {:keys [component children]}]\n                          (into (if (router? component)\n                                  (conj acc component)\n                                  acc)\n                            (get-routers* children)))\n                        []\n                        nodes))]\n    (get-routers children)))\n\n\n(defn initialize!\n  \"Initialize the routing system.  This ensures that all routers have state machines in app state.\"\n  [app]\n  (let [state-map (app/current-state app)\n        root      (app/root-class app)\n        routers   (all-reachable-routers state-map root)\n        tx        (mapv (fn [r]\n                          (let [router-ident (comp/get-ident r {})\n                                router-id    (second router-ident)]\n                            (uism/begin {::uism/asm-id           router-id\n                                         ::uism/state-machine-id (::uism/state-machine-id RouterStateMachine)\n                                         ::uism/event-data       {:path-segment []\n                                                                  :router       (vary-meta router-ident assoc :component r)}\n                                         ::uism/actor->ident     {:router (uism/with-actor-class router-ident r)}}))) routers)]\n    (comp/transact! app tx)))\n\n(defn into-path\n  \"Returns the given `prefix` with the TargetClass segment appended onto it, replacing the final elements with the\n   given (optional) path args.\n\n  ```\n  (defsc X [_ _]\n    {:route-segment [\\\"a\\\" :b]})\n\n  (into [\\\"f\\\" \\\"g\\\"] X \\\"22\\\") ; => [\\\"f\\\" \\\"g\\\" \\\"a\\\" \\\"22\\\"]\n  ```\n  \"\n  [prefix TargetClass & path-args]\n  (let [nargs           (count path-args)\n        path            (some-> TargetClass comp/component-options :route-segment)\n        static-elements (- (count path) nargs)]\n    (into prefix (concat (take static-elements path) path-args))))\n\n(defn subpath\n  \"Returns the route segment of the given TargetClass with the trailing elements replaced by path-args.\n\n  ```\n  (defsc X [_ _]\n    {:route-segment [\\\"a\\\" :b]})\n\n  (subpath X \\\"22\\\") ; => [\\\"a\\\" \\\"22\\\"]\n  ```\n  \"\n  [TargetClass & path-args]\n  (apply into-path [] TargetClass path-args))\n\n(defn path-to\n  \"Convert a sequence of router targets and parameters into a vector of strings that represents the target route. Parameters\n  can be sequenced inline:\n\n  ```\n  (defsc A [_ _]\n    {:route-segment [\\\"a\\\" :a-param]})\n\n  (defsc B [_ _]\n    {:route-segment [\\\"b\\\" :b-param]})\n\n  (route-segment A a-param1 B b-param ...)\n  ```\n\n  where the parameters for a target immediately follow the component that requires them. Alternatively\n  one can specify all of the parameters at the end as a single map using the parameter names that are used in\n  the component `:route-segment` itself:\n\n  ```\n  (defsc A [_ _]\n    {:route-segment [\\\"a\\\" :a-param]})\n\n  (route-segment A B C D {:a-param 1})\n  ```\n  \"\n  ([& targets-and-params]\n   (let [segments (seq (partition-by #(and\n                                        #?(:clj true :cljs (fn? %))\n                                        (or\n                                          (comp/component? %)\n                                          (comp/component-class? %))) targets-and-params))]\n     (if (and (= 2 (count segments)) (map? (first (second segments))))\n       (let [path   (mapcat #(comp/component-options % :route-segment) (first segments))\n             params (first (second segments))]\n         (mapv (fn [i] (get params i i)) path))\n       (reduce\n         (fn [path [classes params]]\n           (-> path\n             (into (mapcat #(comp/component-options % :route-segment) (butlast classes)))\n             (into (apply subpath (last classes) params))))\n         []\n         (partition-all 2 segments))))))\n\n(defn resolve-path-components\n  [StartingClass RouteTarget]\n  (if (comp/component-options RouteTarget :route-segment)\n    (let [query     (comp/get-query StartingClass)\n          root-node (eql/query->ast query)\n          zipper    (zip/zipper #(contains? % :children) :children (fn [n children] (assoc n :children children)) root-node)\n          node      (->> zipper\n                      (iterate zip/next)\n                      (drop-while (fn [n]\n                                    (let [{:keys [component]} (zip/node n)]\n                                      (and\n                                        (not= component RouteTarget)\n                                        (not (zip/end? n))))))\n                      first)\n          found?    (= RouteTarget (some-> node zip/node :component))]\n      (when found?\n        (conj (->> node zip/path (map :component) vec) RouteTarget)))\n    nil))\n\n(defn resolve-path\n  \"Attempts to resolve a path from StartingClass to the given RouteTarget. Can also be passed `resolved-components`, which\n  is the output of `resolve-path-components`.\n\n   Returns a vector of route segments. Any keywords in the result will be replaced by the values from `params`, if present.\n\n   Returns nil if no path can be found.\"\n  ([resolved-components params]\n   (when (seq resolved-components)\n     (let [base-path (into []\n                       (mapcat #(comp/component-options % :route-segment))\n                       resolved-components)]\n       (mapv (fn [ele]\n               (if (contains? params ele)\n                 (str (get params ele))\n                 ele)) base-path))))\n  ([StartingClass RouteTarget params]\n   (resolve-path (resolve-path-components StartingClass RouteTarget) params)))\n\n(defn resolve-target\n  \"Given a new-route path (vector of strings): resolves the target (class) that is the ultimate target of that path.\"\n  [app new-route]\n  (let [state-map  (app/current-state app)\n        root-query (comp/get-query (app/root-class app) state-map)\n        ast        (eql/query->ast root-query)\n        root       (ast-node-for-route ast new-route)]\n    (loop [{:keys [component]} root path new-route]\n      (when (and component (router? component))\n        (let [{:keys [target matching-prefix]} (route-target component path)\n              target-ast     (some-> target (comp/get-query state-map) eql/query->ast)\n              prefix-length  (count matching-prefix)\n              remaining-path (vec (drop prefix-length path))]\n          (if (seq remaining-path)\n            (recur (ast-node-for-route target-ast remaining-path) remaining-path)\n            target))))))\n","~:reader-features",["^Q",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.routing.dynamic-routing/*target-class*","com.fulcrologic.fulcro.routing.dynamic-routing/route-segment","class","com.fulcrologic.fulcro.components.component_options","com.fulcrologic.fulcro.routing.dynamic-routing/get-route-cancelled","com.fulcrologic.fulcro.routing.dynamic-routing/route-cancelled","route-params","temp__5735__auto__","f","*target-class*-orig-val__72501","*target-class*-temp-val__72502","com.fulcrologic.fulcro.routing.dynamic-routing/get-will-enter","temp__5733__auto__","will-enter","ident","com.fulcrologic.fulcro.components.get_ident","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.components/component-name","_","com.fulcrologic.fulcro.routing.dynamic-routing/route-immediate","com.fulcrologic.fulcro.routing.dynamic-routing/will-enter","app","params","*target-class*-orig-val__72503","*target-class*-temp-val__72504","com.fulcrologic.fulcro.routing.dynamic-routing/route-target?","component","cljs.core/boolean","com.fulcrologic.fulcro.routing.dynamic-routing/get-will-leave","this","or__4126__auto__","cljs.core/constantly","com.fulcrologic.fulcro.routing.dynamic-routing/will-leave","c","props","*target-class*-orig-val__72505","*target-class*-temp-val__72506","com.fulcrologic.fulcro.components.isoget","com.fulcrologic.fulcro.routing.dynamic-routing/get-allow-route-change?","will-leave","G__72509","G__72510","com.fulcrologic.fulcro.components/props","com.fulcrologic.fulcro.routing.dynamic-routing/allow-route-change?","e72511","*target-class*-orig-val__72512","*target-class*-temp-val__72513","e","cljs.core/ex-message","com.fulcrologic.fulcro.routing.dynamic-routing/route-lifecycle?","com.fulcrologic.fulcro.routing.dynamic-routing/get-targets","router","cljs.core/set","p__72514","p__72515","vec__72516","cljs.core.nth","vec__72519","com.fulcrologic.fulcro.routing.dynamic-routing/ident-matches-expectation?","expected-table","maybe-expected-id","table","id","cljs.core._EQ_","com.fulcrologic.fulcro.routing.dynamic-routing/check-ident-matches-expectation?","fn-name","and__4115__auto__","js/goog.DEBUG","com.fulcrologic.fulcro.components/ident","cljs.core/first","cljs.core/with-meta","com.fulcrologic.fulcro.routing.dynamic-routing/route-deferred","completion-fn","com.fulcrologic.fulcro.routing.dynamic-routing/immediate?","G__72522","cljs.core/meta","p__72523","map__72524","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.fulcrologic.fulcro.routing.dynamic-routing/apply-route*","state-map","target","router-class","router-id","cljs.core/second","target-class","cljs.core/assoc-in","cljs.core.conj","cljs.core.update_in","cljs.core/dissoc","com.fulcrologic.fulcro.components/set-query*","com.fulcrologic.fulcro.components.get_query","com.fulcrologic.fulcro.routing.dynamic-routing/router-for-pending-target","routers","G__72526","cljs.core/vals","cljs.core.reduce","r","G__72527","cljs.core/reduced","com.fulcrologic.fulcro.routing.dynamic-routing/target-ready","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__72528","p__72530","map__72531","*after-render*-orig-val__72533","com.fulcrologic.fulcro.components/*after-render*","*after-render*-temp-val__72534","env","*after-render*-orig-val__72535","*after-render*-temp-val__72536","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","com.fulcrologic.fulcro.application.current_state","cljs.core.get_in","com.fulcrologic.fulcro.ui_state_machines.trigger_BANG_","com.fulcrologic.fulcro.routing.dynamic-routing/target-ready!","component-or-app","com.fulcrologic.fulcro.components.transact_BANG_","G__72537","com.fulcrologic.fulcro.routing.dynamic-routing/router?","com.fulcrologic.fulcro.routing.dynamic-routing/matching-prefix","route-segment","actual-path","matching-segment","p__72538","vec__72539","result","expected","actual","cljs.core/Keyword","cljs.core/seq","cljs.core.map","a","b","cljs.core/count","com.fulcrologic.fulcro.routing.dynamic-routing/current-route-class","com.fulcrologic.fulcro.components/component->state-map","G__72543","edn-query-language.core/query->ast","p1__72542#","cljs.core.filter","com.fulcrologic.fulcro.components/class->registry-key","com.fulcrologic.fulcro.components/registry-key->class","com.fulcrologic.fulcro.routing.dynamic-routing/route-target","path","targets","matches","prefix","G__72546","cljs.core.sort_by","cljs.core/reverse","max-length","G__72547","match","p1__72544#","com.fulcrologic.fulcro.routing.dynamic-routing/accepts-route?","p__72550","map__72551","com.fulcrologic.fulcro.routing.dynamic-routing/ast-node-for-route","children","ast-node","p1__72548#","cljs.core/some","p1__72549#","p__72555","map__72556","com.fulcrologic.fulcro.routing.dynamic-routing/ast-node-for-live-router","com.fulcrologic.fulcro.components/class->any","live-router?","p1__72553#","p1__72554#","com.fulcrologic.fulcro.routing.dynamic-routing/apply-route","map__72558","p__72560","map__72561","*after-render*-orig-val__72563","*after-render*-temp-val__72564","*after-render*-orig-val__72565","*after-render*-temp-val__72566","state","cljs.core.swap_BANG_","p__72567","map__72568","com.fulcrologic.fulcro.routing.dynamic-routing/mark-route-pending*","com.fulcrologic.fulcro.routing.dynamic-routing/ready-handler","new-env","com.fulcrologic.fulcro.ui-state-machines/store","com.fulcrologic.fulcro.ui_state_machines.retrieve","com.fulcrologic.fulcro.ui_state_machines.apply_action","target-ready*","com.fulcrologic.fulcro.algorithms.indexing/reindex","com.fulcrologic.fulcro.routing.dynamic-routing/fail-handler","p__72570","map__72571","com.fulcrologic.fulcro.routing.dynamic-routing/route-handler","event-data","map__72573","error-timeout","deferred-timeout","path-segment","immediate?","com.fulcrologic.fulcro.ui-state-machines/activate","com.fulcrologic.fulcro.ui_state_machines.set_timeout","cljs.core.assoc","com.fulcrologic.fulcro.ui-state-machines/register-state-machine!","com.fulcrologic.fulcro.routing.dynamic-routing/RouterStateMachine","cljs.core/identity","var_args","G__72576","com.fulcrologic.fulcro.routing.dynamic-routing/proposed-new-path","js/Error","this-or-app","relative-class-or-instance","new-route","com.fulcrologic.fulcro.routing.dynamic_routing.proposed_new_path","timeouts-and-params","cljs.core/deref","com.fulcrologic.fulcro.components/any->app","root-query","ast","root","cljs.core.atom","G__72578","map__72579","map__72592","map__72594","matching-prefix","target-ast","G__72596","prefix-length","remaining-path","cljs.core/vec","cljs.core.drop","segment","p__72597","vec__72598","p","k","v","cljs.core.dissoc","target-ident","edn-query-language.core/ident?","cljs.core/contains?","G__72602","cljs.core/vector?","cljs.core/conj","cljs.core.vary_meta","cljs.core/assoc","G__72606","com.fulcrologic.fulcro.routing.dynamic-routing/signal-router-leaving","app-or-comp","com.fulcrologic.fulcro.routing.dynamic_routing.signal_router_leaving","new-path","to-signal","to-cancel","G__72608","map__72609","map__72611","node","new-path-remaining","map__72613","new-target","router-ident","active-target","next-router","p1__72603#","cljs.core.not_EQ_","mounted-target-class","p__72615","map__72616","acc","dispatch-key","G__72618","mounted-targets","com.fulcrologic.fulcro.components/class->all","cljs.core/into","cljs.core/rest","components","seq__72619","chunk__72620","count__72621","i__72622","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","p1__72604#","seq__72623","chunk__72624","count__72625","i__72626","t","map__72633","map__72636","G__72634","G__72637","G__72642","com.fulcrologic.fulcro.routing.dynamic-routing/current-route","com.fulcrologic.fulcro.application/root-class","G__72644","map__72645","map__72649","sm-env","com.fulcrologic.fulcro.ui_state_machines.state_machine_env","p1__72639#","G__72652","map__72653","map__72657","p1__72640#","com.fulcrologic.fulcro.routing.dynamic-routing/mounted-targets","p__72659","map__72660","G__72662","com.fulcrologic.fulcro.routing.dynamic-routing/set-force-route-flag!","route-target","goog.object/set","com.fulcrologic.fulcro.routing.dynamic-routing/force-route-flagged?","com.fulcrologic.fulcro.routing.dynamic-routing/target-denying-route-changes","G__72665","map__72666","map__72670","p1__72663#","rejecting-target","cljs.core/not","com.fulcrologic.fulcro.routing.dynamic-routing/can-change-route?","G__72673","com.fulcrologic.fulcro.routing.dynamic-routing/change-route-relative!","com.fulcrologic.fulcro.routing.dynamic_routing.change_route_relative_BANG_","old-route","com.fulcrologic.fulcro.routing.dynamic_routing.current_route","route-denied","G__72675","map__72676","map__72691","map__72693","G__72695","p__72696","vec__72697","completing-action","G__72701","cljs.core.merge","com.fulcrologic.fulcro.ui-state-machines/get-active-state","com.fulcrologic.fulcro.ui_state_machines.begin_BANG_","com.fulcrologic.fulcro.ui-state-machines/with-actor-class","*after-render*-orig-val__72702","*after-render*-temp-val__72703","com.fulcrologic.fulcro.routing.dynamic-routing/change-route-relative","com.fulcrologic.fulcro.routing.dynamic-routing/retry-route!","denied-target-instance","relative-root","G__72705","com.fulcrologic.fulcro.routing.dynamic-routing/change-route!","com.fulcrologic.fulcro.routing.dynamic_routing.change_route_BANG_","com.fulcrologic.fulcro.routing.dynamic-routing/change-route","com.fulcrologic.fulcro.routing.dynamic-routing/validate-route-targets","router-instance","seq__72707","chunk__72709","count__72710","i__72711","valid?","cljs.core/empty?","p1__72706#","cljs.core/every?","com.fulcrologic.fulcro.routing.dynamic-routing/all-reachable-routers","component-class","map__72714","get-routers","nodes","p__72716","map__72717","cljs.core.into","get-routers*","com.fulcrologic.fulcro.routing.dynamic-routing/initialize!","tx","cljs.core.mapv","G__72719","com.fulcrologic.fulcro.ui-state-machines/begin","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro.routing.dynamic-routing/into-path","seq72720","G__72721","G__72722","self__4723__auto__","TargetClass","path-args","nargs","G__72723","com.fulcrologic.fulcro.components/component-options","static-elements","cljs.core.concat","cljs.core.take","com.fulcrologic.fulcro.routing.dynamic-routing/subpath","seq72724","G__72725","com.fulcrologic.fulcro.routing.dynamic-routing/path-to","seq72729","self__4724__auto__","targets-and-params","segments","p1__72726#","cljs.core.partition_by","cljs.core/fn?","com.fulcrologic.fulcro.components/component?","com.fulcrologic.fulcro.components/component-class?","cljs.core/map?","p1__72727#","cljs.core.mapcat","i","p__72730","vec__72731","classes","p1__72728#","cljs.core/butlast","cljs.core/last","cljs.core.partition_all","com.fulcrologic.fulcro.routing.dynamic-routing/resolve-path-components","StartingClass","RouteTarget","query","root-node","zipper","p1__72734#","clojure.zip/zipper","n","cljs.core/iterate","clojure.zip/next","cljs.core.drop_while","map__72735","clojure.zip/node","clojure.zip/end?","found?","G__72737","clojure.zip/path","G__72740","com.fulcrologic.fulcro.routing.dynamic-routing/resolve-path","resolved-components","base-path","p1__72738#","ele","com.fulcrologic.fulcro.routing.dynamic_routing.resolve_path","com.fulcrologic.fulcro.routing.dynamic-routing/resolve-target","G__72742","map__72743","map__72750","map__72752","G__72754"]],"~:used-vars",["^Q",["~$com.fulcrologic.fulcro.routing.dynamic-routing/check-ident-matches-expectation?","~$cljs.core/mapcat","~$com.fulcrologic.fulcro.routing.dynamic-routing/change-route!","~$com.fulcrologic.fulcro.algorithms.indexing/reindex","~$cljs.core/ex-message","~$com.fulcrologic.fulcro.routing.dynamic-routing/get-targets","~$cljs.core/vector?","~$cljs.core/=","~$com.fulcrologic.fulcro.routing.dynamic-routing/change-route-relative!","~$com.fulcrologic.fulcro.routing.dynamic-routing/route-target?","~$com.fulcrologic.fulcro.routing.dynamic-routing/force-route-flagged?","~$com.fulcrologic.fulcro.routing.dynamic-routing/resolve-path","~$com.fulcrologic.fulcro.ui-state-machines/get-active-state","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.mutations/mutate","~$edn-query-language.core/ident?","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/props","~$com.fulcrologic.fulcro.ui-state-machines/store","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$com.fulcrologic.fulcro.routing.dynamic-routing/allow-route-change?","~$cljs.core/identity","~$com.fulcrologic.fulcro.routing.dynamic-routing/subpath","~$cljs.core/take","~$com.fulcrologic.fulcro.routing.dynamic-routing/resolve-path-components","~$cljs.core/partition-all","~$cljs.core/last","~$cljs.core/mapv","~$com.fulcrologic.fulcro.routing.dynamic-routing/current-route-class","~$cljs.core/dissoc","~$com.fulcrologic.fulcro.routing.dynamic-routing/proposed-new-path","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$com.fulcrologic.fulcro.routing.dynamic-routing/get-route-cancelled","~$cljs.core/concat","~$com.fulcrologic.fulcro.routing.dynamic-routing/all-reachable-routers","~$com.fulcrologic.fulcro.routing.dynamic-routing/router-for-pending-target","~$cljs.core/set","~$com.fulcrologic.fulcro.routing.dynamic-routing/ast-node-for-route","~$com.fulcrologic.fulcro.routing.dynamic-routing/*target-class*","~$com.fulcrologic.fulcro.routing.dynamic-routing/matching-prefix","~$com.fulcrologic.fulcro.routing.dynamic-routing/apply-route*","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$com.fulcrologic.fulcro.components/component-name","~$taoensso.timbre/*config*","~$com.fulcrologic.fulcro.routing.dynamic-routing/route-deferred","~$com.fulcrologic.fulcro.routing.dynamic-routing/route-cancelled","~$com.fulcrologic.fulcro.ui-state-machines/apply-action","~$cljs.core/vary-meta","~$cljs.core/with-meta","~$cljs.core/map","~$com.fulcrologic.fulcro.routing.dynamic-routing/will-leave","~$com.fulcrologic.fulcro.routing.dynamic-routing/current-route","~$com.fulcrologic.fulcro.routing.dynamic-routing/signal-router-leaving","~$cljs.core/get-in","~$com.fulcrologic.fulcro.routing.dynamic-routing/route-segment","~$cljs.core/swap!","~$com.fulcrologic.fulcro.ui-state-machines/register-state-machine!","~$cljs.core/-add-method","~$com.fulcrologic.fulcro.routing.dynamic-routing/get-will-enter","~$com.fulcrologic.fulcro.ui-state-machines/set-timeout","~$cljs.core/get","~$goog.object/set","~$cljs.core/constantly","~$com.fulcrologic.fulcro.routing.dynamic-routing/can-change-route?","~$com.fulcrologic.fulcro.components/set-query*","~$com.fulcrologic.fulcro.routing.dynamic-routing/accepts-route?","~$com.fulcrologic.fulcro.ui-state-machines/begin!","~$com.fulcrologic.fulcro.routing.dynamic-routing/route-handler","~$com.fulcrologic.fulcro.routing.dynamic-routing/fail-handler","~$com.fulcrologic.fulcro.ui-state-machines/activate","~$com.fulcrologic.fulcro.routing.dynamic-routing/change-route-relative","~$com.fulcrologic.fulcro.routing.dynamic-routing/get-will-leave","~$com.fulcrologic.fulcro.routing.dynamic-routing/ast-node-for-live-router","~$com.fulcrologic.fulcro.components/transact!","~$com.fulcrologic.fulcro.routing.dynamic-routing/apply-route","~$com.fulcrologic.fulcro.routing.dynamic-routing/will-enter","~$com.fulcrologic.fulcro.routing.dynamic-routing/target-denying-route-changes","~$com.fulcrologic.fulcro.routing.dynamic-routing/route-target","~$com.fulcrologic.fulcro.routing.dynamic-routing/router?","~$com.fulcrologic.fulcro.routing.dynamic-routing/target-ready!","~$com.fulcrologic.fulcro.routing.dynamic-routing/set-force-route-flag!","~$cljs.core/meta","~$com.fulcrologic.fulcro.routing.dynamic-routing/route-lifecycle?","~$cljs.core/second","~$com.fulcrologic.fulcro.routing.dynamic-routing/target-ready","~$com.fulcrologic.fulcro.routing.dynamic-routing/mark-route-pending*","~$com.fulcrologic.fulcro.routing.dynamic-routing/get-allow-route-change?","~$cljs.core/next","~$cljs.core/vec","~$com.fulcrologic.fulcro.components/get-query","~$com.fulcrologic.fulcro.routing.dynamic-routing/initialize!","~$com.fulcrologic.fulcro.routing.dynamic-routing/resolve-target","~$cljs.core/not","~$com.fulcrologic.fulcro.components/isoget","~$com.fulcrologic.fulcro.components/class->all","~$com.fulcrologic.fulcro.ui-state-machines/trigger!","~$cljs.core/assoc","~$com.fulcrologic.fulcro.routing.dynamic-routing/into-path","~$cljs.core/assoc-in","~$com.fulcrologic.fulcro.routing.dynamic-routing/mounted-targets","~$com.fulcrologic.fulcro.mutations/->Mutation","~$com.fulcrologic.fulcro.routing.dynamic-routing/retry-route!","~$com.fulcrologic.fulcro.routing.dynamic-routing/ready-handler","~$com.fulcrologic.fulcro.components/ident","~$com.fulcrologic.fulcro.components/component-options","~$cljs.core/first","~$cljs.core/butlast","~$com.fulcrologic.fulcro.ui-state-machines/with-actor-class","~$cljs.core/update-in","~$com.fulcrologic.fulcro.routing.dynamic-routing/change-route","~$com.fulcrologic.fulcro.routing.dynamic-routing/validate-route-targets","~$clojure.zip/path","~$com.fulcrologic.fulcro.routing.dynamic-routing/ident-matches-expectation?","~$js/Error","~$com.fulcrologic.fulcro.routing.dynamic-routing/route-immediate","~$cljs.core/boolean","~$com.fulcrologic.fulcro.components/*after-render*","~$cljs.core/some","~$com.fulcrologic.fulcro.routing.dynamic-routing/RouterStateMachine","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.routing.dynamic-routing/immediate?","~$com.fulcrologic.fulcro.routing.dynamic-routing/path-to"]]],"~:cache-keys",["~#cmap",[["^1V","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^Q",[]],"~:deps-syms",["^1@","^1=","~$com.fulcrologic.fulcro.algorithms.do-not-use","^16","^18","^1;"]]],["^1V","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.dom.HtmlElement"]]],["^1V","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","cljs/core/async/impl/ioc_helpers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$cljs.core.async.impl.protocols"]]],["^1V","com/fulcrologic/fulcro/routing/dynamic_routing.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^1?","^19","^K","^M","^1E","^1;","^1C","^O","^16","^18","^@","^1B"]]],["^1V","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.labs.userAgent.util","~$goog.string"]]],["^1V","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1="]]],["^1V","goog/crypt/crypt.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.array","~$goog.asserts"]]],["^1V","cljs/core/async.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5;","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","^5>"]]],["^1V","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.Promise","~$goog.events.EventTarget"]]],["^1V","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^18"]]],["^1V","cljs/spec/gen/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$goog.Uri"]]],["^1V","com/fulcrologic/fulcro/algorithms/indexing.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^1;","^59","~$com.fulcrologic.fulcro.algorithms.denormalize","^O","^K","~$clojure.set","^16","~$taoensso.encore","^18"]]],["^1V","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$clojure.string","^5="]]],["^1V","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5?"]]],["^1V","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5="]]],["^1V","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1V","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5<","^1?","~$goog.string.internal"]]],["^1V","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5N"]]],["^1V","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1V","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^18","^5K","^16","^1?","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1V","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$expound.paths","^@"]]],["^1V","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5<","~$goog.reflect","^5="]]],["^1V","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1V","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1V","com/cognitect/transit/impl/reader.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1V","taoensso/encore.cljs"],["30c096c80ac45227d869087a80755500fca98346","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5K","^5I","~$cljs.reader","~$cljs.tools.reader.edn","^1?","^5=","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1V","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","~$goog.async.FreeList"]]],["^1V","com/fulcrologic/fulcro/dom/events.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1="]]],["^1V","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^5L","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1V","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5M"]]],["^1V","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^5=","^6="]]],["^1V","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.structs.Heap"]]],["^1V","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.Timer","^5>","^5?","^6F","^5F","~$goog.json.hybrid","~$goog.log","^6C","^6B","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^1?","^5=","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^5M"]]],["^1V","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","com/fulcrologic/fulcro/application.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$com.fulcrologic.fulcro.algorithms.lookup","~$com.fulcrologic.fulcro.data-fetch","^5H","^1B","^1E","^59","~$com.fulcrologic.fulcro.algorithms.tempid","~$com.fulcrologic.fulcro.algorithms.normalize","~$com.fulcrologic.fulcro.algorithms.scheduling","~$com.fulcrologic.fulcro.algorithms.tx-processing","^1;","^O","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer","~$com.fulcrologic.fulcro.inspect.inspect-client","^16","^5K","~$com.fulcrologic.fulcro.specs","^K","^1?","~$goog.functions","~$goog.dom","^5J","^18"]]],["^1V","com/fulcrologic/fulcro/algorithms/transit.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$cognitect.transit","^6Z"]]],["^1V","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1="]]],["^1V","com/cognitect/transit/util.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1?"]]],["^1V","cljs/pprint.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5K","^5=","^6="]]],["^1V","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^@","^5I","^K","^18","^16"]]],["^1V","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^6K","^6L","^6M","^6J","^5>","^5=","^6="]]],["^1V","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$expound.problems","^@","^5K","^5I","~$clojure.walk","~$expound.printer","~$expound.util","~$expound.ansi","^D"]]],["^1V","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1V","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.Disposable","^5?","^6>","~$goog.events.Event","^6H","^6I","^1?"]]],["^1V","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5K","^18","^@","~$expound.alpha"]]],["^1V","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.disposable.IDisposable"]]],["^1V","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5K"]]],["^1V","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^5U","node_modules/react/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^5V","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1V","shadow/js.js"],["bc0862a18183110802758387126e17faaedc1895","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?"]]],["^1V","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^6U","~$goog.structs.Collection","^6V"]]],"~:SHADOW-TIMESTAMP",[1598567487000,1598567487000,1592012038000],["^5U","node_modules/react/cjs/react.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","ea9e9a66370bbe35b404f4de02d009d42a753e6d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^5V","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1V","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","^62"]]],["^1V","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.events.ListenableKey"]]],["^1V","com/fulcrologic/fulcro/ui_state_machines.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^75","^5I","^@","^5K","^79","^K","^18","^16","^1C","^6Y","^71","~$com.fulcrologic.fulcro.algorithms.data-targeting","^O","^1;","^59","^70","^6Z","^6X"]]],["^1V","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","~$goog.html.trustedtypes","^5Q","^5R","^5S","^5T"]]],["^1V","cljs/core/async/impl/channels.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5;","^5C","^5A"]]],["^1V","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","~$goog.events.Listener","^1?"]]],["^1V","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$taoensso.truss.impl"]]],["^1V","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","com/fulcrologic/fulcro/algorithms/merge.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^7J","^1;","^6X","^6[","^5H","^59","^16","^18","^6Z"]]],["^1V","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^@"]]],["^1V","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$com.fulcrologic.fulcro.rendering.keyframe-render","~$com.fulcrologic.fulcro.rendering.ident-optimized-render","^5H","^1;","^6X","^16","^18","~$cljsjs.react","^1?"]]],["^1V","cljs/core/async/impl/dispatch.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5A","^66"]]],["^1V","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5?","~$goog.html.SafeUrl","^5S","^5T","^5N"]]],["^1V","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","~$goog.dom.asserts","^75","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^7Q","^5P","~$goog.html.uncheckedconversions","^5S","^5N"]]],["^1V","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^@","^7;"]]],["^1V","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5I"]]],["^1V","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1="]]],["^1V","goog/useragent/product.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5[","^61","^5M"]]],["^1V","cljs/core/async/impl/protocols.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1="]]],["^1V","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1V","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^6?","~$goog.structs.PriorityPool"]]],["^1V","com/cognitect/transit/delimiters.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5?","~$goog.dom.TagName","~$goog.dom.tags","^7T","^7U","~$goog.html.SafeStyleSheet","^7Q","^5P","^7K","^5Q","^5R","^5[","^1?","^5S","^5T","^5N"]]],["^1V","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1?"]]],["^1V","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>"]]],["^1V","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5<","^5="]]],["^1V","com/fulcrologic/fulcro/inspect/transit.cljs"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^77","~$com.cognitect.transit.types","~$com.fulcrologic.fulcro.algorithms.transit","^18"]]],["^1V","com/cognitect/transit/impl/decoder.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^69","^81"]]],["^1V","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5K","^5J"]]],["^1V","cljs/reader.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^1?","^6N","^6;","^6="]]],["^1V","com/fulcrologic/fulcro/mutations.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^1;","~$com.fulcrologic.fulcro.dom.events","^K","^16","^18","^5J","^@","^7J","^1E","^6X","^6Z","^5K"]]],["^1V","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5?","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^7Z","~$goog.dom.safe","^7S","^7V","~$goog.math.Coordinate","~$goog.math.Size","^1?","^5=","~$goog.string.Unicode","^5M"]]],["^1V","com/fulcrologic/fulcro/components.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^1?","^7P","^16","^@","^18","^79","^5K","^59","^5H","^6X","^K","^5I"]]],["^1V","com/fulcrologic/fulcro/specs.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^@","^K","^59","^16"]]],["^1V","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.debug.Error","^87"]]],["^1V","cljs/core/async/impl/buffers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5;"]]],["^1V","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","~$goog.debug.LogRecord"]]],["^1V","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5?","^5=","^6U","^6V","^6W","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1V","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^5U","node_modules/object-assign/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","519ffd5a4c91b67302cc9947b794966d629860cd","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^5V"]]],["^1V","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.Thenable","^5?","^6E","~$goog.async.run","^67","^8<","~$goog.promise.Resolver"]]],["^1V","cljs/core/async/impl/timers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5;","^5@","^5C"]]],["^1V","cljs/spec/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^1?","^79","^D","^5K"]]],["^1V","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",[]]],["^1V","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","~$goog.json"]]],["^1V","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^1?"]]],["^1V","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^6K","^5K","~$cljs.tools.reader.impl.inspect"]]],["^1V","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^K","^B","^18"]]],["^1V","cljsjs/react.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$module$node_modules$react$index"]]],["^1V","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5=","^6="]]],["^1V","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^18","^79"]]],["^1V","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^7?","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1V","com/fulcrologic/fulcro/inspect/diff.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^@"]]],["^5U","node_modules/react/cjs/react.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","32f2924b22daf411bb2b61bc45a3540aca73e0b2","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^5V","^7G"]]],["^1V","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","com/cognitect/transit/handlers.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^83","^81","~$goog.math.Long"]]],["^1V","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^1?","~$goog.structs.Node"]]],["^1V","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?"]]],["^1V","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^88","^7V","^5S","^5N"]]],["^1V","com/cognitect/transit/types.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^83","~$com.cognitect.transit.eq","^8H"]]],["^1V","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5H","^6X","^1;"]]],["^1V","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5N"]]],["^1V","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5K","^@","^H","^5I","^7;","^7<","^5Z","^79","^6<","^5="]]],["^1V","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5I","^@","^6X","^6Z","^5H","^59","^70","^O","^1;","^74","^73","^K","^16","^5J","^18"]]],["^1V","com/cognitect/transit/eq.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^83"]]],["^1V","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","~$goog.debug.errorcontext","^5M"]]],["^1V","clojure/zip.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1="]]],["^1V","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","~$goog.math"]]],["^1V","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^6L","^5=","^6="]]],["^1V","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5?","^75","^8L"]]],["^1V","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^6F","^76","^7Z","^88","^75","^7S","^5P","^5[","^60","^5S"]]],["^1V","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","^7S","^7T","^7U","^80","^7Q","^5P","^5S","^5N"]]],["^1V","com/fulcrologic/fulcro/data_fetch.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^79","^59","^7J","^71","^1E","^1;","^O","^@","^K","^16","^18","^6X"]]],["^1V","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5?","~$goog.debug","~$goog.debug.LogBuffer","^8="]]],["^1V","com/cognitect/transit/caching.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^84"]]],["^5U","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^5V"]]],["^1V","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^7?","~$goog.events.EventId"]]],["^1V","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^6J","^6K","^6L"]]],["^1V","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^8H","~$goog.math.Integer","^5=","^1?","^5>","^5G","^6="]]],["^1V","com/cognitect/transit.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^83","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^81","^8J","^68","^69"]]],["^1V","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","^7K","^5S","^5T"]]],["^1V","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^8M","~$goog.debug.LogManager","^8=","~$goog.debug.Logger"]]],["^1V","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5?","^7U","^1?","^5S","^5T","^5N"]]],["^1V","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^8M","^5L","^7@","~$goog.events.EventType","^62","^5M"]]],["^1V","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^62"]]],["^1V","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5M"]]],["^1V","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1="]]],["^1V","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5>","^5?","^5="]]],["^1V","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","^5T"]]],["^1V","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^5K","^5J","~$taoensso.timbre.appenders.core"]]],["^1V","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^7N","^5H","^1;","^5I","^16","^18"]]],["^1V","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^8O"]]],["^1V","com/cognitect/transit/impl/writer.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^83","^69","~$com.cognitect.transit.handlers","^81","^84","^8H"]]],["^1V","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^7="]]],["^1V","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^16"]]],["^1V","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","~$goog.net.WrapperXmlHttpFactory","^7>"]]],["^1V","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","^16","^6X","^1?","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^B","^5J","^18"]]],["^1V","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@"]]],["^1V","cognitect/transit.cljs"],["ad84ab433eb8b60faeacb580428cb748997b0ff3","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^1=","~$com.cognitect.transit","^81","^8J","^8H"]]],["^1V","goog/crypt/base64.js"],["6025affb7181cd40418600864f58eed1ea80055d","^55",["^ ","^56",null,"^57",["^Q",[]],"^58",["^1@","^5?","^5X","^5=","^5M","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1580742522000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/rendering/keyframe_render.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1598567491000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1580245266000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/mutex.clj",1598567494000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/data_fetch.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/zip.clj",1580245266000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1580246397000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1580742522000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/tx_processing.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/mutations.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/buffers.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/routing/dynamic_routing.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/gen/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/reflect.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/dom/events.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/scheduling.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/gen/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/protocols.clj",1598567494000,"jar:file:/home/patro/.m2/repository/com/taoensso/encore/2.117.0/encore-2.117.0.jar!/taoensso/encore.clj",1597755175000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/timers.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/utils.clj",1589469725000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/application.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/ast.clj",1589469725000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async/impl/ioc_macros.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.analyzer.jvm/1.1.0/tools.analyzer.jvm-1.1.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1598567485000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/dispatch.clj",1598567494000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1580246397000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/ioc_macros.clj",1598567494000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/ui_state_machines.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1580246694000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/indexing.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1580245266000,"jar:file:/home/patro/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1592144842000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/exec/threadpool.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1580246694000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/concurrent.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer.clj",1589469725000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async.clj",1598567494000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/components.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1589469725000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/main.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/env.clj",1589469725000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/reader.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.analyzer.jvm/1.1.0/tools.analyzer.jvm-1.1.0.jar!/clojure/tools/analyzer/jvm.clj",1598567485000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/channels.clj",1598567494000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/pprint.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1580245266000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A router that uses Fulcro dynamic queries to optimize query performance on rendering and provides a number of useful\n  features such as easy composition, control over route targeting, on-screen component vetoes of routing requests, etc.\n\n  NOTE: This router is *not* concerned with HTML5 history events or URL management. This router is intended to be usable\n  in server-side rendering, React Native, and anywhere else Fulcro might be used. Therefore it is not tied to a particular\n  rendering platform's idea of location management (i.e. URLs).\n\n  The structure of the route composition (and its representation as a sequence of string path components) is intended to\n  be easy to integrate with HTML5 history and URL control.","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",1,"^9",5,"^:",1,"^;",51],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",["^ ","^J","^K","~$?","^K","^L","^M","^N","^O"],"^P",["^Q",[]],"^R",["^ ","^S",["^ ","^T",["^U",[["^V","^W","^X","~$&","^Y"]]],"^6","Define a router.\n\n     The arglist is `[this props]`, which are just like defsc. The props will contains :current-state and :pending-path-segment.\n\n     The options are:\n\n     `:router-targets` - (REQUIRED) A *vector* of ui components that are router targets. The first one is considered the \"default\".\n     Other defsc options - (LIMITED) You may not specify query/initial-state/protocols/ident, but you can define things like react\n     lifecycle methods. See defsc.\n     `:always-render-body?` - (OPTIONAL) When true this router expects that you will supply a render body, and\n     it will always be rendered. The props available in the body will include:\n\n     - `:current-state` - The state of the routing state machine. (:initial, :pending, :failed, :routed)\n     - `:route-factory` - A factory that can generate the current route.\n     - `:route-props` -  The props that should be passed to the route factory. You can augment these with computed if you\n     wish. The router normally passes computed through like so: `(route-factory (comp/computed route-props (comp/get-computed this)))`\n     - `:pending-path-segment` - The route that we're going to (when in pending state).\n\n     The optional body, if defined, will *only* be used if the router has the `:always-render-body?` option set or\n     it is in one of the following states:\n\n     - `:initial` - No route is set.\n     - `:pending` - A deferred route is taking longer than expected (configurable timeout, default 100ms)\n     - `:failed` - A deferred route took longer than can reasonably be expected (configurable timeout, default 5s)\n\n     otherwise the actual active route target will be rendered.\n     ","^8",785,"^9",4,"^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^Z","^[","^10","^11","^12",true]],"^Z","^11","^14",null,"^15",["^ ","^16","^16","^?","^@","^K","^K","^17","^18","^M","^M","^19","^19","^1:","^1;","^1<","^16","^1=","^1=","^1>","^1?","^1@","^1@","^1?","^1?","^1A","^1B","^O","^O","~$s","^@","^1C","^1C","^1D","^1E","^1;","^1;","^18","^18","^1E","^1E","^1F","^19","^1G","^M","^@","^@","^1H","^1C","^1B","^1B"],"^1I",["^Q",["^1J","^1K"]],"~:shadow/js-access-global",["^Q",["Error"]],"^1L",["^ ","^J","^K","^1M","^K","~$?","^K","^L","^M","^N","^O"],"~:defs",["^ ","~$allow-route-change?",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",107,"^9",7,"^:",107,"^;",26,"^T",["^U",["~$quote",["^U",[["~$c"]]]]]],"^Z","^2M","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",26,"~:method-params",["^U",[["~$c"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^9",1,"~:variadic?",false,"^8",107,"^:",107,"~:max-fixed-arity",1,"~:fn-var",true,"^T",["^U",["^;>",["^U",[["~$c"]]]]]],"~$*target-class*",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",27,"^9",16,"^:",27,"^;",30,"~:dynamic",true],"^Z","^34","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",30,"^9",1,"^;F",true,"^8",27,"^:",27,"~:tag","~$any","^6","INTERNAL USE ONLY. Not guaranteed to be available at runtime in production builds. This is used to aid in giving\n   development-time warnings/errors.\n\n   Class of the routing target component, available in the notifications fns\n   (:will-enter, :route-cancelled, :will-leave)"],"~$mounted-targets",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",525,"^9",8,"^:",525,"^;",23,"~:private",true,"^T",["^U",["^;>",["^U",[["^1H","~$router-class"]]]]]],"^;J",true,"^Z","^4H","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",23,"^;?",["^U",[["^1H","^;K"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",525,"~:ret-tag",["^Q",["^;H","~$clj-nil"]],"^:",525,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^1H","^;K"]]]]]],"~$path-to",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",883,"^9",7,"^:",883,"^;",14,"^T",["^U",["^;>",["^U",[["~$&","~$targets-and-params"]]]]],"^6","Convert a sequence of router targets and parameters into a vector of strings that represents the target route. Parameters\n  can be sequenced inline:\n\n  ```\n  (defsc A [_ _]\n    {:route-segment [\"a\" :a-param]})\n\n  (defsc B [_ _]\n    {:route-segment [\"b\" :b-param]})\n\n  (route-segment A a-param1 B b-param ...)\n  ```\n\n  where the parameters for a target immediately follow the component that requires them. Alternatively\n  one can specify all of the parameters at the end as a single map using the parameter names that are used in\n  the component `:route-segment` itself:\n\n  ```\n  (defsc A [_ _]\n    {:route-segment [\"a\" :a-param]})\n\n  (route-segment A B C D {:a-param 1})\n  ```\n  ","~:top-fn",["^ ","^;B",true,"~:fixed-arity",0,"^;C",0,"^;?",[["^U",["^;O"]]],"^T",["^U",[["~$&","^;O"]]],"^;A",["^U",[null]]]],"^Z","^52","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",14,"^;P",["^ ","^;B",true,"^;Q",0,"^;C",0,"^;?",[["^U",["^;O"]]],"^T",["^U",[["~$&","^;O"]]],"^;A",["^U",[null]]],"^;?",[["^U",["^;O"]]],"^;@",null,"^;Q",0,"^;A",["^U",[null]],"^9",1,"^;B",true,"~:methods",[["^ ","^;Q",0,"^;B",true,"^;G",["^Q",[null,"~$clj","^;H"]]]],"^8",883,"^;L","^;H","^:",883,"^;C",0,"^;D",true,"^T",["^U",[["~$&","^;O"]]],"^6","Convert a sequence of router targets and parameters into a vector of strings that represents the target route. Parameters\n  can be sequenced inline:\n\n  ```\n  (defsc A [_ _]\n    {:route-segment [\"a\" :a-param]})\n\n  (defsc B [_ _]\n    {:route-segment [\"b\" :b-param]})\n\n  (route-segment A a-param1 B b-param ...)\n  ```\n\n  where the parameters for a target immediately follow the component that requires them. Alternatively\n  one can specify all of the parameters at the end as a single map using the parameter names that are used in\n  the component `:route-segment` itself:\n\n  ```\n  (defsc A [_ _]\n    {:route-segment [\"a\" :a-param]})\n\n  (route-segment A B C D {:a-param 1})\n  ```\n  "],"~$route-deferred",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",142,"^9",7,"^:",142,"^;",21,"^T",["^U",["^;>",["^U",[["~$ident","~$completion-fn"]]]]]],"^Z","^3=","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",21,"^;?",["^U",[["^;U","^;V"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",142,"^;L",["^Q",["^;S","~$cljs.core/MetaFn","^;M"]],"^:",142,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^;U","^;V"]]]]]],"~$validate-route-targets",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",698,"^9",7,"^:",698,"^;",29,"^T",["^U",["^;>",["^U",[["~$router-instance"]]]]],"^6","Run a runtime validation on route targets to verify that they at least declare a route-segment that is a vector."],"^Z","^4S","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",29,"^;?",["^U",[["^;Y"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",698,"^;L","^;M","^:",698,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^;Y"]]]]],"^6","Run a runtime validation on route targets to verify that they at least declare a route-segment that is a vector."],"~$resolve-target",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",964,"^9",7,"^:",964,"^;",21,"^T",["^U",["^;>",["^U",[["^1H","~$new-route"]]]]],"^6","Given a new-route path (vector of strings): resolves the target (class) that is the ultimate target of that path."],"^Z","^4@","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",21,"^;?",["^U",[["^1H","^;["]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",964,"^;L",["^Q",["^;H","^;M"]],"^:",964,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^1H","^;["]]]]],"^6","Given a new-route path (vector of strings): resolves the target (class) that is the ultimate target of that path."],"~$get-targets",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",118,"^9",7,"^:",118,"^;",18,"^T",["^U",["^;>",["^U",[["~$router"]]]]],"^6","Returns a set of classes to which this router routes."],"^Z","^2;","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",18,"^;?",["^U",[["^<1"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",118,"^;L",["^Q",["^;S","^;H","~$cljs.core/ISet","^;W","^;M"]],"^:",118,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^<1"]]]]],"^6","Returns a set of classes to which this router routes."],"~$RouterStateMachine",["^ ","^Z","^4[","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",348,"^9",1,"^:",348,"^;",36,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",348,"^9",18,"^:",348,"^;",36],"^;G",["^Q",["^;S","^;H"]]],"~$immediate?",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",146,"^9",7,"^:",146,"^;",17,"^T",["^U",["^;>",["^U",[["^;U"]]]]]],"^Z","^51","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",17,"^;?",["^U",[["^;U"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",146,"^;L",["^Q",["^;H","^;M"]],"^:",146,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^;U"]]]]]],"~$all-reachable-routers",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",820,"^9",7,"^:",820,"^;",28,"^T",["^U",["^;>",["^U",[["~$state-map","~$component-class"]]]]],"^6","Returns a sequence of all of the routers reachable in the query of the app."],"^Z","^30","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",28,"^;?",["^U",[["^<6","^<7"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",820,"^;L",["^Q",[null,"^;H"]],"^:",820,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^<6","^<7"]]]]],"^6","Returns a sequence of all of the routers reachable in the query of the app."],"~$check-ident-matches-expectation?",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",129,"^9",8,"^:",129,"^;",40,"^;J",true,"^T",["^U",["^;>",["^U",[["~$fn-name","^;U"]]]]]],"^;J",true,"^Z","^26","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",40,"^;?",["^U",[["^<9","^;U"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",129,"^;L","^;M","^:",129,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^<9","^;U"]]]]]],"~$change-route!",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",669,"^9",7,"^:",669,"^;",20,"^T",["^U",["^;>",["^U",[["~$this","^;["],["^<;","^;[","~$timeouts-and-params"]]]]],"^6","Trigger a route change.\n\n  * `this` - The component (or app) that is causing the route change.\n  * `new-route` - A vector of URI components to pass to the router.\n  * `timeouts-and-params` - A map of additional parameters and route timeouts that affect UI during deferred routes:\n  `{:error-timeout ms :deferred-timeout ms}`.  Anything extra will appear in the `params` of `will-enter`.\n\n  The error timeout is how long to wait  (default 5000ms) before showing the error-ui of a route (which must be defined on the\n  router that is having problems).  The deferred-timeout (default 100ms) is how long to wait before showing the loading-ui of\n  a deferred router (to prevent flicker).\n  ","^;P",["^ ","^;B",false,"^;Q",3,"^;C",3,"^;?",[["^<;","^;["],["^<;","^;[","^<<"]],"^T",["^U",[["^<;","^;["],["^<;","^;[","^<<"]]],"^;A",["^U",[null,null]]]],"^Z","^28","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",20,"^;P",["^ ","^;B",false,"^;Q",3,"^;C",3,"^;?",[["^<;","^;["],["^<;","^;[","^<<"]],"^T",["^U",[["^<;","^;["],["^<;","^;[","^<<"]]],"^;A",["^U",[null,null]]],"^;?",[["^<;","^;["],["^<;","^;[","^<<"]],"^;@",null,"^;Q",3,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^;R",[["^ ","^;Q",2,"^;B",false,"^;G","^;H"],["^ ","^;Q",3,"^;B",false,"^;G",["^Q",["^;H","^;M"]]]],"^8",669,"^:",669,"^;C",3,"^;D",true,"^T",["^U",[["^<;","^;["],["^<;","^;[","^<<"]]],"^6","Trigger a route change.\n\n  * `this` - The component (or app) that is causing the route change.\n  * `new-route` - A vector of URI components to pass to the router.\n  * `timeouts-and-params` - A map of additional parameters and route timeouts that affect UI during deferred routes:\n  `{:error-timeout ms :deferred-timeout ms}`.  Anything extra will appear in the `params` of `will-enter`.\n\n  The error timeout is how long to wait  (default 5000ms) before showing the error-ui of a route (which must be defined on the\n  router that is having problems).  The deferred-timeout (default 100ms) is how long to wait before showing the loading-ui of\n  a deferred router (to prevent flicker).\n  "],"~$route-immediate",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",138,"^9",7,"^:",138,"^;",22,"^T",["^U",["^;>",["^U",[["^;U"]]]]]],"^Z","^4W","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",22,"^;?",["^U",[["^;U"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",138,"^;L",["^Q",["^;S","^;W","^;M"]],"^:",138,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^;U"]]]]]],"~$resolve-path-components",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",926,"^9",7,"^:",926,"^;",30,"^T",["^U",["^;>",["^U",[["~$StartingClass","~$RouteTarget"]]]]]],"^Z","^2Q","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",30,"^;?",["^U",[["^<?","^<@"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",926,"^;L",["^Q",["^;S","^;M"]],"^:",926,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^<?","^<@"]]]]]],"~$subpath",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",870,"^9",7,"^:",870,"^;",14,"^T",["^U",["^;>",["^U",[["~$TargetClass","~$&","~$path-args"]]]]],"^6","Returns the route segment of the given TargetClass with the trailing elements replaced by path-args.\n\n  ```\n  (defsc X [_ _]\n    {:route-segment [\"a\" :b]})\n\n  (subpath X \"22\") ; => [\"a\" \"22\"]\n  ```\n  ","^;P",["^ ","^;B",true,"^;Q",1,"^;C",1,"^;?",[["^U",["^<B","^<C"]]],"^T",["^U",[["^<B","~$&","^<C"]]],"^;A",["^U",[null]]]],"^Z","^2O","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",14,"^;P",["^ ","^;B",true,"^;Q",1,"^;C",1,"^;?",[["^U",["^<B","^<C"]]],"^T",["^U",[["^<B","~$&","^<C"]]],"^;A",["^U",[null]]],"^;?",[["^U",["^<B","^<C"]]],"^;@",null,"^;Q",1,"^;A",["^U",[null]],"^9",1,"^;B",true,"^;R",[["^ ","^;Q",1,"^;B",true,"^;G","^;H"]],"^8",870,"^;L","^;H","^:",870,"^;C",1,"^;D",true,"^T",["^U",[["^<B","~$&","^<C"]]],"^6","Returns the route segment of the given TargetClass with the trailing elements replaced by path-args.\n\n  ```\n  (defsc X [_ _]\n    {:route-segment [\"a\" :b]})\n\n  (subpath X \"22\") ; => [\"a\" \"22\"]\n  ```\n  "],"~$route-target?",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",79,"^9",7,"^:",79,"^;",20,"^T",["^U",["^;>",["^U",[["~$component"]]]]]],"^Z","^2?","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",20,"^;?",["^U",[["^<E"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",79,"^;L","~$boolean","^:",79,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^<E"]]]]]],"~$route-cancelled",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",48,"^9",7,"^:",48,"^;",22,"^T",["^U",["^;>",["^U",[["~$class","~$route-params"]]]]],"^6","Universal CLJC version of route-cancelled.  Don't use the protocol method in CLJ."],"^Z","^3>","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",22,"^;?",["^U",[["^<H","^<I"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",48,"^;L",["^Q",[null,"^;M"]],"^:",48,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^<H","^<I"]]]]],"^6","Universal CLJC version of route-cancelled.  Don't use the protocol method in CLJ."],"~$ast-node-for-live-router",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",285,"^9",7,"^:",285,"^;",31,"^T",["^U",["^;>",["^U",[["^1H",["^ ","~:keys",["^<E","~$children"],"^1P","~$ast-node"]]]]]],"^6","Returns the AST node for a query that represents the closest \"live\" (on-screen) router\n\n  ast - A query AST node\n\n  Returns an AST node or nil if none is found."],"^Z","^3Y","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",31,"^;?",["^U",[["^1H","~$p__72555"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",285,"^:",285,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^1H",["^ ","^<K",["^<E","^<L"],"^1P","^<M"]]]]]],"^6","Returns the AST node for a query that represents the closest \"live\" (on-screen) router\n\n  ast - A query AST node\n\n  Returns an AST node or nil if none is found."],"~$matching-prefix",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",201,"^9",7,"^:",201,"^;",22,"^T",["^U",["^;>",["^U",[["~$route-segment","~$actual-path"]]]]],"^6","Returns the elements of actual-path that match the route-segment definition."],"^Z","^35","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",22,"^;?",["^U",[["^<P","^<Q"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",201,"^;L",["^Q",[null,"^;H","^;M"]],"^:",201,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^<P","^<Q"]]]]],"^6","Returns the elements of actual-path that match the route-segment definition."],"~$apply-route*",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",148,"^9",8,"^:",148,"^;",20,"^;J",true,"^T",["^U",["^;>",["^U",[["^<6",["^ ","^<K",["^<1","~$target"]]]]]]]],"^;J",true,"^Z","^36","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",20,"^;?",["^U",[["^<6","~$p__72523"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",148,"^;L",["^Q",[null,"^;S","^;H","^;M"]],"^:",148,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^<6",["^ ","^<K",["^<1","^<S"]]]]]]]],"~$ast-node-for-route",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",271,"^9",7,"^:",271,"^;",25,"^T",["^U",["^;>",["^U",[[["^ ","^<K",["^<E","^<L"],"^1P","^<M"],"~$path"]]]]],"^6","Returns the AST node for a query that represents the router that has a target that can accept the given path. This is a breadth-first\n  search.\n\n  ast - A query AST node\n  path - A vector of the current URI segments.\n\n  Returns an AST node or nil if none is found."],"^Z","^33","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",25,"^;?",["^U",[["~$p__72550","^<V"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",271,"^;L",["^Q",[null,"^<F","^;H","^;M"]],"^:",271,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[[["^ ","^<K",["^<E","^<L"],"^1P","^<M"],"^<V"]]]]],"^6","Returns the AST node for a query that represents the router that has a target that can accept the given path. This is a breadth-first\n  search.\n\n  ast - A query AST node\n  path - A vector of the current URI segments.\n\n  Returns an AST node or nil if none is found."],"~$current-route-class",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",219,"^9",7,"^:",219,"^;",26,"^T",["^U",["^;>",["^U",[["^<;"]]]]],"^6","Get the class of the component that is currently being routed to."],"^Z","^2U","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",26,"^;?",["^U",[["^<;"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",219,"^;L",["^Q",["^;H","^;M"]],"^:",219,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^<;"]]]]],"^6","Get the class of the component that is currently being routed to."],"~$get-will-leave",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",81,"^9",7,"^:",81,"^;",21,"^T",["^U",["^;>",["^U",[["^<;"]]]]],"^6","Returns the function of a route target to be called with\n  the current component and props. If it returns `true` then the routing operation will continue.  If it returns `false`\n  then whatever new route was requested will be completely abandoned. If this component has a `allow-route-change?`\n  then the return value of will-leave will be ignored."],"^Z","^3X","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",21,"^;?",["^U",[["^<;"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",81,"^;L",["^Q",[null,"^;H","~$function"]],"^:",81,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^<;"]]]]],"^6","Returns the function of a route target to be called with\n  the current component and props. If it returns `true` then the routing operation will continue.  If it returns `false`\n  then whatever new route was requested will be completely abandoned. If this component has a `allow-route-change?`\n  then the return value of will-leave will be ignored."],"~$proposed-new-path",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",386,"^9",7,"^:",386,"^;",24,"^T",["^U",["^;>",["^U",[["~$this-or-app","~$relative-class-or-instance","^;["],["^=0","^=1","^;[","^<<"]]]]],"^6","Internal algorithm: Returns a sequence of idents of the targets that the `new-route` goes through by analyzing the current\n  application query and state.","^;P",["^ ","^;B",false,"^;Q",4,"^;C",4,"^;?",[["^=0","^=1","^;["],["^=0","^=1","^;[","^<<"]],"^T",["^U",[["^=0","^=1","^;["],["^=0","^=1","^;[","^<<"]]],"^;A",["^U",[null,null]]]],"^Z","^2W","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",24,"^;P",["^ ","^;B",false,"^;Q",4,"^;C",4,"^;?",[["^=0","^=1","^;["],["^=0","^=1","^;[","^<<"]],"^T",["^U",[["^=0","^=1","^;["],["^=0","^=1","^;[","^<<"]]],"^;A",["^U",[null,null]]],"^;?",[["^=0","^=1","^;["],["^=0","^=1","^;[","^<<"]],"^;@",null,"^;Q",4,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^;R",[["^ ","^;Q",3,"^;B",false,"^;G","^;H"],["^ ","^;Q",4,"^;B",false,"^;G","^;H"]],"^8",386,"^:",386,"^;C",4,"^;D",true,"^T",["^U",[["^=0","^=1","^;["],["^=0","^=1","^;[","^<<"]]],"^6","Internal algorithm: Returns a sequence of idents of the targets that the `new-route` goes through by analyzing the current\n  application query and state."],"~$resolve-path",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",945,"^9",7,"^:",945,"^;",19,"^T",["^U",["^;>",["^U",[["~$resolved-components","~$params"],["^<?","^<@","^=4"]]]]],"^6","Attempts to resolve a path from StartingClass to the given RouteTarget. Can also be passed `resolved-components`, which\n  is the output of `resolve-path-components`.\n\n   Returns a vector of route segments. Any keywords in the result will be replaced by the values from `params`, if present.\n\n   Returns nil if no path can be found.","^;P",["^ ","^;B",false,"^;Q",3,"^;C",3,"^;?",[["^=3","^=4"],["^<?","^<@","^=4"]],"^T",["^U",[["^=3","^=4"],["^<?","^<@","^=4"]]],"^;A",["^U",[null,null]]]],"^Z","^2A","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",19,"^;P",["^ ","^;B",false,"^;Q",3,"^;C",3,"^;?",[["^=3","^=4"],["^<?","^<@","^=4"]],"^T",["^U",[["^=3","^=4"],["^<?","^<@","^=4"]]],"^;A",["^U",[null,null]]],"^;?",[["^=3","^=4"],["^<?","^<@","^=4"]],"^;@",null,"^;Q",3,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^;R",[["^ ","^;Q",2,"^;B",false,"^;G",["^Q",["^;S","^;M"]]],["^ ","^;Q",3,"^;B",false,"^;G",["^Q",["^;S","^;M"]]]],"^8",945,"^:",945,"^;C",3,"^;D",true,"^T",["^U",[["^=3","^=4"],["^<?","^<@","^=4"]]],"^6","Attempts to resolve a path from StartingClass to the given RouteTarget. Can also be passed `resolved-components`, which\n  is the output of `resolve-path-components`.\n\n   Returns a vector of route segments. Any keywords in the result will be replaced by the values from `params`, if present.\n\n   Returns nil if no path can be found."],"~$change-route-relative!",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",579,"^9",7,"^:",579,"^;",29,"^T",["^U",["^;>",["^U",[["^=0","^=1","^;["],["~$app-or-comp","^=1","^;[","^<<"]]]]],"^6","Change the route, starting at the given Fulcro class or instance (scanning for the first router from there).  `new-route` is a vector\n  of string components to pass through to the nearest child router as the new path. The first argument is any live component\n  or the app.  The `timeouts-and-params` are as in `change-route`.\n\n  When possible (i.e. no circular references to components) you can maintain better code navigation by\n  generating `new-route` via `path-to`.  This will allow readers of your code to quickly jump to the actual\n  components that implement the targets when reading the code.\n  ","^;P",["^ ","^;B",false,"^;Q",4,"^;C",4,"^;?",[["^=0","^=1","^;["],["^=6","^=1","^;[","^<<"]],"^T",["^U",[["^=0","^=1","^;["],["^=6","^=1","^;[","^<<"]]],"^;A",["^U",[null,null]]]],"^Z","^2>","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",29,"^;P",["^ ","^;B",false,"^;Q",4,"^;C",4,"^;?",[["^=0","^=1","^;["],["^=6","^=1","^;[","^<<"]],"^T",["^U",[["^=0","^=1","^;["],["^=6","^=1","^;[","^<<"]]],"^;A",["^U",[null,null]]],"^;?",[["^=0","^=1","^;["],["^=6","^=1","^;[","^<<"]],"^;@",null,"^;Q",4,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^;R",[["^ ","^;Q",3,"^;B",false,"^;G","^;H"],["^ ","^;Q",4,"^;B",false,"^;G",["^Q",["^;H","^;M"]]]],"^8",579,"^:",579,"^;C",4,"^;D",true,"^T",["^U",[["^=0","^=1","^;["],["^=6","^=1","^;[","^<<"]]],"^6","Change the route, starting at the given Fulcro class or instance (scanning for the first router from there).  `new-route` is a vector\n  of string components to pass through to the nearest child router as the new path. The first argument is any live component\n  or the app.  The `timeouts-and-params` are as in `change-route`.\n\n  When possible (i.e. no circular references to components) you can maintain better code navigation by\n  generating `new-route` via `path-to`.  This will allow readers of your code to quickly jump to the actual\n  components that implement the targets when reading the code.\n  "],"~$get-will-enter",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",55,"^9",7,"^:",55,"^;",21,"^T",["^U",["^;>",["^U",[["^<H"]]]]],"^6","Returns the function that is called before a route target is activated (if the route segment of interest has changed and the\n  target of the result is this target).  MUST return (r/route-immediate ident) or (r/route-deferred ident) to indicate\n  what ident should be used in app state to connect the router's join.  If deferred, the router must cause a call to\n  the r/target-ready mutation (or use the target-ready* mutation helper) with a {:target ident} parameter to indicate\n  that the route target is loaded and ready for display.\n\n  `params` will be a map from any keywords found in `route-segment` to the string value of that path element.\n\n  WARNING: This method MUST be side-effect free."],"^Z","^3K","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",21,"^;?",["^U",[["^<H"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",55,"^;L",["^Q",[null,"^;H","^<Z"]],"^:",55,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^<H"]]]]],"^6","Returns the function that is called before a route target is activated (if the route segment of interest has changed and the\n  target of the result is this target).  MUST return (r/route-immediate ident) or (r/route-deferred ident) to indicate\n  what ident should be used in app state to connect the router's join.  If deferred, the router must cause a call to\n  the r/target-ready mutation (or use the target-ready* mutation helper) with a {:target ident} parameter to indicate\n  that the route target is loaded and ready for display.\n\n  `params` will be a map from any keywords found in `route-segment` to the string value of that path element.\n\n  WARNING: This method MUST be side-effect free."],"~$router-for-pending-target",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",163,"^9",7,"^:",163,"^;",32,"^T",["^U",["^;>",["^U",[["^<6","^<S"]]]]]],"^Z","^31","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",32,"^;?",["^U",[["^<6","^<S"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",163,"^;L",["^Q",[null,"^;H"]],"^:",163,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^<6","^<S"]]]]]],"~$current-route",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",469,"^9",7,"^:",469,"^;",20,"^T",["^U",["^;>",["^U",[["^=0"],["^=0","^=1"]]]]],"^6","Returns the current active route, starting from the relative Fulcro class or instance.\n\n  Any component using this as a basis for rendering will need to add the following to their query to\n  ensure the props of that component change on route changes:\n\n  ```\n  [::uism/asm-id fq-router-kw]\n  ```\n\n  where `fq-router-kw` is a keyword that has the exact namespace and name of the router you're interested in. If you want\n  to just over-render you can use a quoted `_` instead.\n  ","^;P",["^ ","^;B",false,"^;Q",2,"^;C",2,"^;?",[["^=0"],["^=0","^=1"]],"^T",["^U",[["^=0"],["^=0","^=1"]]],"^;A",["^U",[null,null]]]],"^Z","^3D","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",20,"^;P",["^ ","^;B",false,"^;Q",2,"^;C",2,"^;?",[["^=0"],["^=0","^=1"]],"^T",["^U",[["^=0"],["^=0","^=1"]]],"^;A",["^U",[null,null]]],"^;?",[["^=0"],["^=0","^=1"]],"^;@",null,"^;Q",2,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^;R",[["^ ","^;Q",1,"^;B",false,"^;G","^;H"],["^ ","^;Q",2,"^;B",false,"^;G","^;H"]],"^8",469,"^:",469,"^;C",2,"^;D",true,"^T",["^U",[["^=0"],["^=0","^=1"]]],"^6","Returns the current active route, starting from the relative Fulcro class or instance.\n\n  Any component using this as a basis for rendering will need to add the following to their query to\n  ensure the props of that component change on route changes:\n\n  ```\n  [::uism/asm-id fq-router-kw]\n  ```\n\n  where `fq-router-kw` is a keyword that has the exact namespace and name of the router you're interested in. If you want\n  to just over-render you can use a quoted `_` instead.\n  "],"~$mark-route-pending*",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",308,"^9",7,"^:",308,"^;",26,"^T",["^U",["^;>",["^U",[["^<6",["^ ","^<K",["^<1","^<S"],"^1P","^=4"]]]]]]],"^Z","^4:","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",26,"^;?",["^U",[["^<6","~$p__72567"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",308,"^;L",["^Q",["^;S","^;H"]],"^:",308,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^<6",["^ ","^<K",["^<1","^<S"],"^1P","^=4"]]]]]]],"~$get-route-cancelled",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",43,"^9",7,"^:",43,"^;",26,"^T",["^U",["^;>",["^U",[["^<H"]]]]],"^6","Returns the function that should be called if this target was in a deferred state and a different routing choice was made. Is given the same route parameters that were sent to `will-enter`."],"^Z","^2Z","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",26,"^;?",["^U",[["^<H"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",43,"^;L",["^Q",[null,"^;H"]],"^:",43,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^<H"]]]]],"^6","Returns the function that should be called if this target was in a deferred state and a different routing choice was made. Is given the same route parameters that were sent to `will-enter`."],"~$target-ready",["^ ","^Z","^49","^6","Mutation: Indicate that a target is ready.","^5",["^ ","^6","Mutation: Indicate that a target is ready.","^7",null],"^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",175,"^9",1,"^;G","~$com.fulcrologic.fulcro.mutations/Mutation"],"~$will-leave",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",89,"^9",7,"^:",89,"^;",17,"^T",["^U",["^;>",["^U",[["~$c","~$props"]]]]]],"^Z","^3C","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",17,"^;?",["^U",[["~$c","^=@"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",89,"^;L",["^Q",[null,"^;M"]],"^:",89,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["~$c","^=@"]]]]]],"~$route-target",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",232,"^9",7,"^:",232,"^;",19,"^T",["^U",["^;>",["^U",[["^;K","^<V"]]]]],"^6","Given a router class and a path segment, returns the class of *that router's* target that accepts the given URI path,\n  which is a vector of (string) URI components.\n\n  Returns nil if there is no target that accepts the path, or a map containing:\n\n  {:target class\n   :matching-prefix prefix}\n\n  where `class` is the component class that accepts the path (the target, NOT the router), and `matching-prefix` is the\n  portion of the path that is accepted by that class.\n\n  NOTE: If more than one target matches, then the target with the longest match will be returned. A warning will be\n  printed if more than one match of equal length is found.\n  "],"^Z","^42","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",19,"^;?",["^U",[["^;K","^<V"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",232,"^;L",["^Q",["^;H","^;M"]],"^:",232,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^;K","^<V"]]]]],"^6","Given a router class and a path segment, returns the class of *that router's* target that accepts the given URI path,\n  which is a vector of (string) URI components.\n\n  Returns nil if there is no target that accepts the path, or a map containing:\n\n  {:target class\n   :matching-prefix prefix}\n\n  where `class` is the component class that accepts the path (the target, NOT the router), and `matching-prefix` is the\n  portion of the path that is accepted by that class.\n\n  NOTE: If more than one target matches, then the target with the longest match will be returned. A warning will be\n  printed if more than one match of equal length is found.\n  "],"~$ident-matches-expectation?",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",123,"^9",8,"^:",123,"^;",34,"^;J",true,"^T",["^U",["^;>",["^U",[[["~$expected-table","~$maybe-expected-id"],["~$table","~$id"]]]]]]],"^;J",true,"^Z","^4U","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",34,"^;?",["^U",[["~$p__72514","~$p__72515"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",123,"^;L","^<F","^:",123,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[[["^=C","^=D"],["^=E","^=F"]]]]]]],"~$apply-route",["^ ","^Z","^3[","^6","Mutation: Indicate that a given route is ready and should show the result.\n\n  router - The ident of the router, with metadata :component that is the class of the router.\n  target - The ident of the target route, with metadata :component that is the class of the target.","^5",["^ ","^6","Mutation: Indicate that a given route is ready and should show the result.\n\n  router - The ident of the router, with metadata :component that is the class of the router.\n  target - The ident of the target route, with metadata :component that is the class of the target.","^7",null],"^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",299,"^9",1,"^;G","^=>"],"~$target-denying-route-changes",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",543,"^9",7,"^:",543,"^;",35,"^T",["^U",["^;>",["^U",[["^=0"]]]]],"^6","This function will return the first mounted instance of a route target that is currently indicating it would\n  deny a route change."],"^Z","^41","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",35,"^;?",["^U",[["^=0"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",543,"^;L",["^Q",["^;H","^;M"]],"^:",543,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^=0"]]]]],"^6","This function will return the first mounted instance of a route target that is currently indicating it would\n  deny a route change."],"~$ready-handler",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",317,"^9",9,"^:",317,"^;",22,"^T",["^U",["^;>",["^U",[["~$env"]]]]]],"^Z","^4K","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",22,"^;?",["^U",[["^=L"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",3,"^;B",false,"^8",317,"^;L","^;H","^:",317,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^=L"]]]]]],"~$signal-router-leaving",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",422,"^9",7,"^:",422,"^;",28,"^T",["^U",["^;>",["^U",[["^=6","^=1","^;["],["^=6","^=1","^;[","^<<"]]]]],"^6","Tell active routers that they are about to leave the screen. Returns false if any of them deny the route change.","^;P",["^ ","^;B",false,"^;Q",4,"^;C",4,"^;?",[["^=6","^=1","^;["],["^=6","^=1","^;[","^<<"]],"^T",["^U",[["^=6","^=1","^;["],["^=6","^=1","^;[","^<<"]]],"^;A",["^U",[null,null]]]],"^Z","^3E","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",28,"^;P",["^ ","^;B",false,"^;Q",4,"^;C",4,"^;?",[["^=6","^=1","^;["],["^=6","^=1","^;[","^<<"]],"^T",["^U",[["^=6","^=1","^;["],["^=6","^=1","^;[","^<<"]]],"^;A",["^U",[null,null]]],"^;?",[["^=6","^=1","^;["],["^=6","^=1","^;[","^<<"]],"^;@",null,"^;Q",4,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^;R",[["^ ","^;Q",3,"^;B",false,"^;G","^;H"],["^ ","^;Q",4,"^;B",false,"^;G","^;H"]],"^8",422,"^:",422,"^;C",4,"^;D",true,"^T",["^U",[["^=6","^=1","^;["],["^=6","^=1","^;[","^<<"]]],"^6","Tell active routers that they are about to leave the screen. Returns false if any of them deny the route change."],"~$retry-route!",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",657,"^9",7,"^:",657,"^;",19,"^T",["^U",["^;>",["^U",[["~$denied-target-instance","~$relative-root","^<V"]]]]],"^6","Retry a route that the receiving component just denied, and ignore this target's answer. All other targets will still\n  be asked. This is primarily used when you want to be able to use js/confirm in a component to ask the user if\n  they \"really mean to navigate away\". You MUST pass the arguments that `:route-denied` received\n  or you can easily cause an infinite loop. Other on-screen targets can still potentially abort the route."],"^Z","^4J","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",19,"^;?",["^U",[["^=O","^=P","^<V"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",657,"^;L","^;H","^:",657,"^;C",3,"^;D",true,"^T",["^U",["^;>",["^U",[["^=O","^=P","^<V"]]]]],"^6","Retry a route that the receiving component just denied, and ignore this target's answer. All other targets will still\n  be asked. This is primarily used when you want to be able to use js/confirm in a component to ask the user if\n  they \"really mean to navigate away\". You MUST pass the arguments that `:route-denied` received\n  or you can easily cause an infinite loop. Other on-screen targets can still potentially abort the route."],"^<P",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",37,"^9",7,"^:",37,"^;",20,"^T",["^U",["^;>",["^U",[["^<H"]]]]],"^6","Returns a vector that describes the sub-path that a given route target represents. String elements represent\n  explicit path elements, and keywords represent variable values (which are always pulled as strings)."],"^Z","^3G","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",20,"^;?",["^U",[["^<H"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",37,"^;L",["^Q",[null,"^;H"]],"^:",37,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^<H"]]]]],"^6","Returns a vector that describes the sub-path that a given route target represents. String elements represent\n  explicit path elements, and keywords represent variable values (which are always pulled as strings)."],"~$route-handler",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",329,"^9",7,"^:",329,"^;",20,"^T",["^U",["^;>",["^U",[[["^ ","~:com.fulcrologic.fulcro.ui-state-machines/keys",["^1H","~$event-data"],"^1P","^=L"]]]]]]],"^Z","^3T","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",20,"^;?",["^U",[["~$p__72570"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",329,"^;L",["^Q",["^;S","^;H"]],"^:",329,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[[["^ ","^=R",["^1H","^=S"],"^1P","^=L"]]]]]]],"~$into-path",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",853,"^9",7,"^:",853,"^;",16,"^T",["^U",["^;>",["^U",[["~$prefix","^<B","~$&","^<C"]]]]],"^6","Returns the given `prefix` with the TargetClass segment appended onto it, replacing the final elements with the\n   given (optional) path args.\n\n  ```\n  (defsc X [_ _]\n    {:route-segment [\"a\" :b]})\n\n  (into [\"f\" \"g\"] X \"22\") ; => [\"f\" \"g\" \"a\" \"22\"]\n  ```\n  ","^;P",["^ ","^;B",true,"^;Q",2,"^;C",2,"^;?",[["^U",["^=V","^<B","^<C"]]],"^T",["^U",[["^=V","^<B","~$&","^<C"]]],"^;A",["^U",[null]]]],"^Z","^4F","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",16,"^;P",["^ ","^;B",true,"^;Q",2,"^;C",2,"^;?",[["^U",["^=V","^<B","^<C"]]],"^T",["^U",[["^=V","^<B","~$&","^<C"]]],"^;A",["^U",[null]]],"^;?",[["^U",["^=V","^<B","^<C"]]],"^;@",null,"^;Q",2,"^;A",["^U",[null]],"^9",1,"^;B",true,"^;R",[["^ ","^;Q",2,"^;B",true,"^;G",["^Q",[null,"^;S","^;H"]]]],"^8",853,"^;L","^;H","^:",853,"^;C",2,"^;D",true,"^T",["^U",[["^=V","^<B","~$&","^<C"]]],"^6","Returns the given `prefix` with the TargetClass segment appended onto it, replacing the final elements with the\n   given (optional) path args.\n\n  ```\n  (defsc X [_ _]\n    {:route-segment [\"a\" :b]})\n\n  (into [\"f\" \"g\"] X \"22\") ; => [\"f\" \"g\" \"a\" \"22\"]\n  ```\n  "],"~$fail-handler",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",327,"^9",7,"^:",327,"^;",19,"^T",["^U",["^;>",["^U",[["^=L"]]]]]],"^Z","^3U","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",19,"^;?",["^U",[["^=L"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",327,"^:",327,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^=L"]]]]]],"~$change-route-relative",["^ ","^Z","^3W","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",655,"^9",1,"^:",655,"^;",27,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",655,"^9",6,"^:",655,"^;",27],"^6","DEPRECATED NAME: Use change-route-relative!"],"~$accepts-route?",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",266,"^9",7,"^:",266,"^;",21,"^T",["^U",["^;>",["^U",[["^<E","^<V"]]]]],"^6","Returns true if the given component is a router that manages a route target that will accept the given path."],"^Z","^3R","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",21,"^;?",["^U",[["^<E","^<V"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",266,"^;L","^<F","^:",266,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^<E","^<V"]]]]],"^6","Returns true if the given component is a router that manages a route target that will accept the given path."],"~$can-change-route?",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",568,"^9",7,"^:",568,"^;",24,"^T",["^U",["^;>",["^U",[["^=0"]]]]],"^6","Returns true if the active on-screen targets indicate they will allow navigation.\n\n  NOTE: If your route targets have an `:allow-route-change?`, then that will be used to determine if the route can\n  be abandoned; otherwise `:will-leave` will be called to answer the question; however, this USE of `will-leave`\n  is DEPRECATED (though the hook is NOT because it serves another purpose). If you side-effect in `:will-leave` this could cause strange\n  behavior throughout the application.  It is recommended that your targets implement `:allow-route-change?` if they need\n  to prevent routing, and only leverage `:will-leave` to do things like cancel in-progress loads."],"^Z","^3P","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",24,"^;?",["^U",[["^=0"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",568,"^;L","^<F","^:",568,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^=0"]]]]],"^6","Returns true if the active on-screen targets indicate they will allow navigation.\n\n  NOTE: If your route targets have an `:allow-route-change?`, then that will be used to determine if the route can\n  be abandoned; otherwise `:will-leave` will be called to answer the question; however, this USE of `will-leave`\n  is DEPRECATED (though the hook is NOT because it serves another purpose). If you side-effect in `:will-leave` this could cause strange\n  behavior throughout the application.  It is recommended that your targets implement `:allow-route-change?` if they need\n  to prevent routing, and only leverage `:will-leave` to do things like cancel in-progress loads."],"~$initialize!",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",837,"^9",7,"^:",837,"^;",18,"^T",["^U",["^;>",["^U",[["^1H"]]]]],"^6","Initialize the routing system.  This ensures that all routers have state machines in app state."],"^Z","^4?","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",18,"^;?",["^U",[["^1H"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",837,"^;L",["^Q",["^;H","^;M"]],"^:",837,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^1H"]]]]],"^6","Initialize the routing system.  This ensures that all routers have state machines in app state."],"~$set-force-route-flag!",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",535,"^9",8,"^:",535,"^;",29,"^;J",true,"^T",["^U",["^;>",["^U",[["^=A"]]]]]],"^;J",true,"^Z","^45","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",29,"^;?",["^U",[["^=A"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",535,"^;L","^;H","^:",535,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^=A"]]]]]],"~$force-route-flagged?",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",538,"^9",8,"^:",538,"^;",28,"^;J",true,"^T",["^U",["^;>",["^U",[["^=A"]]]]],"^6","returns true if the given route target's allow-route-change? should be ignored."],"^;J",true,"^Z","^2@","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",28,"^;?",["^U",[["^=A"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",538,"^;L","^;H","^:",538,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^=A"]]]]],"^6","returns true if the given route target's allow-route-change? should be ignored."],"~$change-route",["^ ","^Z","^4R","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",688,"^9",1,"^:",688,"^;",18,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",688,"^9",6,"^:",688,"^;",18]],"~$get-allow-route-change?",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",94,"^9",7,"^:",94,"^;",30,"^T",["^U",["^;>",["^U",[["^<;"]]]]],"^6","Returns the function of a route target to be called with the current component and props.\n   If it returns `true` then the routing operation can continue.  If it returns `false`\n   then whatever new route was requested will be completely abandoned. This handler MUST NOT side-effect, and\n   may be called multiple times on a single route request."],"^Z","^4;","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",30,"^;?",["^U",[["^<;"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",94,"^;L",["^Q",[null,"^;H","^<Z"]],"^:",94,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^<;"]]]]],"^6","Returns the function of a route target to be called with the current component and props.\n   If it returns `true` then the routing operation can continue.  If it returns `false`\n   then whatever new route was requested will be completely abandoned. This handler MUST NOT side-effect, and\n   may be called multiple times on a single route request."],"~$route-lifecycle?",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",116,"^9",7,"^:",116,"^;",23,"^T",["^U",["^;>",["^U",[["^<E"]]]]]],"^Z","^47","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",23,"^;?",["^U",[["^<E"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",116,"^;L","^<F","^:",116,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^<E"]]]]]],"~$router?",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",199,"^9",7,"^:",199,"^;",14,"^T",["^U",["^;>",["^U",[["^<E"]]]]]],"^Z","^43","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",14,"^;?",["^U",[["^<E"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",199,"^;L","^<F","^:",199,"^;C",1,"^;D",true,"^T",["^U",["^;>",["^U",[["^<E"]]]]]],"~$target-ready!",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",192,"^9",7,"^:",192,"^;",20,"^T",["^U",["^;>",["^U",[["~$component-or-app","^<S"]]]]],"^6","Indicate a target is ready.  Safe to use from within mutations.\n\n  target - The ident that was originally listed as a deferred target."],"^Z","^44","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",20,"^;?",["^U",[["^>7","^<S"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",192,"^;L",["^Q",["^;H","^;M"]],"^:",192,"^;C",2,"^;D",true,"^T",["^U",["^;>",["^U",[["^>7","^<S"]]]]],"^6","Indicate a target is ready.  Safe to use from within mutations.\n\n  target - The ident that was originally listed as a deferred target."],"~$will-enter",["^ ","^;=",null,"^5",["^ ","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^8",72,"^9",7,"^:",72,"^;",17,"^T",["^U",["^;>",["^U",[["^<H","^1H","^=4"]]]]],"^6","Universal CLJC version of will-enter."],"^Z","^40","^7","com/fulcrologic/fulcro/routing/dynamic_routing.cljc","^;",17,"^;?",["^U",[["^<H","^1H","^=4"]]],"^;@",null,"^;A",["^U",[null,null]],"^9",1,"^;B",false,"^8",72,"^;L",["^Q",[null,"^;M"]],"^:",72,"^;C",3,"^;D",true,"^T",["^U",["^;>",["^U",[["^<H","^1H","^=4"]]]]],"^6","Universal CLJC version of will-enter."]],"^1K",["^ ","^11","^11","^?","^@","^K","^K","^17","^18","^M","^M","^1:","^1;","^1=","^1=","^O","^O","~$s","^@","^1;","^1;","^18","^18","^1G","^M","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1I",["^Q",["~:com.fulcrologic.fulcro.ui-state-machines/actors","~:error-timeout","~:route!","~:children","~:route-cancelled","~:com.fulcrologic.fulcro.ui-state-machines/asm-id","~:router-targets","~:com.fulcrologic.fulcro.ui-state-machines/events","~:matching-prefix","~:fn","~:com.fulcrologic.fulcro.ui-state-machines/aliases","~:com.fulcrologic.fulcro.routing.dynamic-routing/current-state","~:key","~:refresh","~:router","~:timeout!","~:current-route","~:warn","~:pending","~:com.fulcrologic.fulcro.routing.dynamic-routing/current-route","~:com.fulcrologic.fulcro.ui-state-machines/state-machine-id","~:error-timer","~:params","~:com.fulcrologic.fulcro.routing.dynamic-routing/pending-route","~:will-leave","~:ast","~:type","~:debug","~:state","~:com.fulcrologic.fulcro.ui-state-machines/target-state","~:route-segment","~:com.fulcrologic.fulcro.ui-state-machines/handler","~:component","~:otherwise","~:com.fulcrologic.fulcro.routing.dynamic-routing/id","~:com.fulcrologic.fulcro.ui-state-machines/event-data","~:deferred","~:com.fulcrologic.fulcro.routing.dynamic-routing/force?","~:com.fulcrologic.fulcro.ui-state-machines/actor->ident","~:deferred-timeout","~:pending-path-segment","^3[","~:com.fulcrologic.fulcro.ui-state-machines/states","~:path-segment","~:delay-timer","~:app","~:routed","~:dispatch-key","~:length","~:initial","^49","~:waiting!","~:action","~:ready!","~:error","~:will-enter","~:allow-route-change?","~:target","~:route-denied","~:default-result-action!","~:result-action","~:query","~:immediate","~:auto","~:p","~:none","~:failed","^4[","~:com.fulcrologic.fulcro.ui-state-machines/app"]],"~:order",["^>X","^>>","^?C","^?B","~:p~:ns-specs",["^ "],"~:ns-spec-vars",["^Q",[]],"~:compiler-options",["^54",[["^?R","~:static-fns"],true,["^?R","~:shadow-tweaks"],null,["^?R","~:source-map-inline"],null,["^?R","~:elide-asserts"],false,["^?R","~:optimize-constants"],null,["^?R","^1Y"],null,["^?R","~:external-config"],["^ ","~:fulcro",["^ ","~:wrap-inputs?",false]],["^?R","~:tooling-config"],null,["^?R","~:emit-constants"],null,["^?R","~:load-tests"],null,["^?R","~:form-size-threshold"],null,["^?R","~:data-readers"],null,["^?R","~:infer-externs"],"^?K",["^?R","^1["],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^?R","~:fn-invoke-direct"],null,["^?R","~:source-map"],true]]]