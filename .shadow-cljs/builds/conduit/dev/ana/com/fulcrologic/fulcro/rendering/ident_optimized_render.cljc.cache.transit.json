["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.rendering.ident_optimized_render');\n/**\n * Checks the given `idents` and returns a subset of them where the data they refer to has changed\n * between `old-state` and `new-state`.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.dirty_table_entries = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$dirty_table_entries(old_state,new_state,idents){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,ident){\nif((cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_state,ident) === cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_state,ident))){\nreturn result;\n} else {\nreturn cljs.core.cons(ident,result);\n}\n}),cljs.core.List.EMPTY,idents);\n});\n/**\n * Uses the component's query and the current application state to query for the current value of that component's\n *   props (subtree). It then sends those props to the component via \"props tunnelling\" (setting them on a well-known key in\n *   component-local state).\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_component_BANG_(app,ident,c){\nif(cljs.core.truth_((function (){var and__4115__auto__ = c;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn ident;\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar map__66157 = app;\nvar map__66157__$1 = (((((!((map__66157 == null))))?(((((map__66157.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66157.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66157):map__66157);\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66157__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar state_map = cljs.core.deref(state_atom);\nvar query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(c,state_map);\nvar q = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([ident,query])], null);\nvar data_tree = (cljs.core.truth_(query)?com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(q,state_map,state_map):null);\nvar new_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(data_tree,ident);\nif(cljs.core.truth_(query)){\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.ident-optimized-render\",null,41,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Query was empty. Refresh failed for \",cljs.core.type(c)], null);\n}),null)),null,-173313056);\n}\n\nreturn com.fulcrologic.fulcro.components.tunnel_props_BANG_(c,new_props);\n} else {\nvar root = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app-root\",\"com.fulcrologic.fulcro.application/app-root\",835379005).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app)));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(c,root)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.rendering.ident-optimized-render\",null,45,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Failed to do optimized update. Component\",com.fulcrologic.fulcro.components.class__GT_registry_key(com.fulcrologic.fulcro.components.react_type(c)),\"queries for data that changed, but does not have an ident.\"], null);\n}),null)),null,2058868641);\n} else {\n}\n\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Targeted update failed\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n/**\n * Renders *only* components that *have* the given ident.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_components_with_ident_BANG_(app,ident){\nvar seq__66160 = cljs.core.seq(com.fulcrologic.fulcro.components.ident__GT_components(app,ident));\nvar chunk__66161 = null;\nvar count__66162 = (0);\nvar i__66163 = (0);\nwhile(true){\nif((i__66163 < count__66162)){\nvar c = chunk__66161.cljs$core$IIndexed$_nth$arity$2(null,i__66163);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app,ident,c);\n\n\nvar G__66307 = seq__66160;\nvar G__66308 = chunk__66161;\nvar G__66309 = count__66162;\nvar G__66310 = (i__66163 + (1));\nseq__66160 = G__66307;\nchunk__66161 = G__66308;\ncount__66162 = G__66309;\ni__66163 = G__66310;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__66160);\nif(temp__5735__auto__){\nvar seq__66160__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__66160__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__66160__$1);\nvar G__66313 = cljs.core.chunk_rest(seq__66160__$1);\nvar G__66314 = c__4556__auto__;\nvar G__66315 = cljs.core.count(c__4556__auto__);\nvar G__66316 = (0);\nseq__66160 = G__66313;\nchunk__66161 = G__66314;\ncount__66162 = G__66315;\ni__66163 = G__66316;\ncontinue;\n} else {\nvar c = cljs.core.first(seq__66160__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app,ident,c);\n\n\nvar G__66318 = cljs.core.next(seq__66160__$1);\nvar G__66319 = null;\nvar G__66320 = (0);\nvar G__66321 = (0);\nseq__66160 = G__66318;\nchunk__66161 = G__66319;\ncount__66162 = G__66320;\ni__66163 = G__66321;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * Renders components that have, or query for, the given ident.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_dependents_of_ident_BANG_(app,ident){\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app,ident);\n\nvar map__66170 = app;\nvar map__66170__$1 = (((((!((map__66170 == null))))?(((((map__66170.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66170.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66170):map__66170);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66170__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__66171 = cljs.core.deref(runtime_atom);\nvar map__66171__$1 = (((((!((map__66171 == null))))?(((((map__66171.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66171.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66171):map__66171);\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66171__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nvar map__66172 = indexes;\nvar map__66172__$1 = (((((!((map__66172 == null))))?(((((map__66172.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66172.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66172):map__66172);\nvar prop__GT_classes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66172__$1,new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717));\nvar idents_in_joins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66172__$1,new cljs.core.Keyword(null,\"idents-in-joins\",\"idents-in-joins\",-1556962035));\nvar class__GT_components = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66172__$1,new cljs.core.Keyword(null,\"class->components\",\"class->components\",436435919));\nvar idents_in_joins__$1 = (function (){var or__4126__auto__ = idents_in_joins;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n})();\nif(cljs.core.contains_QMARK_(idents_in_joins__$1,ident)){\nvar classes = (prop__GT_classes.cljs$core$IFn$_invoke$arity$1 ? prop__GT_classes.cljs$core$IFn$_invoke$arity$1(ident) : prop__GT_classes.call(null,ident));\nif(cljs.core.seq(classes)){\nvar seq__66177 = cljs.core.seq(classes);\nvar chunk__66178 = null;\nvar count__66179 = (0);\nvar i__66180 = (0);\nwhile(true){\nif((i__66180 < count__66179)){\nvar class$ = chunk__66178.cljs$core$IIndexed$_nth$arity$2(null,i__66180);\nvar seq__66205_66327 = cljs.core.seq((class__GT_components.cljs$core$IFn$_invoke$arity$1 ? class__GT_components.cljs$core$IFn$_invoke$arity$1(class$) : class__GT_components.call(null,class$)));\nvar chunk__66207_66328 = null;\nvar count__66208_66329 = (0);\nvar i__66209_66330 = (0);\nwhile(true){\nif((i__66209_66330 < count__66208_66329)){\nvar component_66331 = chunk__66207_66328.cljs$core$IIndexed$_nth$arity$2(null,i__66209_66330);\nvar component_ident_66332 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_66331);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app,component_ident_66332,component_66331);\n\n\nvar G__66333 = seq__66205_66327;\nvar G__66334 = chunk__66207_66328;\nvar G__66335 = count__66208_66329;\nvar G__66336 = (i__66209_66330 + (1));\nseq__66205_66327 = G__66333;\nchunk__66207_66328 = G__66334;\ncount__66208_66329 = G__66335;\ni__66209_66330 = G__66336;\ncontinue;\n} else {\nvar temp__5735__auto___66337 = cljs.core.seq(seq__66205_66327);\nif(temp__5735__auto___66337){\nvar seq__66205_66338__$1 = temp__5735__auto___66337;\nif(cljs.core.chunked_seq_QMARK_(seq__66205_66338__$1)){\nvar c__4556__auto___66340 = cljs.core.chunk_first(seq__66205_66338__$1);\nvar G__66342 = cljs.core.chunk_rest(seq__66205_66338__$1);\nvar G__66343 = c__4556__auto___66340;\nvar G__66344 = cljs.core.count(c__4556__auto___66340);\nvar G__66345 = (0);\nseq__66205_66327 = G__66342;\nchunk__66207_66328 = G__66343;\ncount__66208_66329 = G__66344;\ni__66209_66330 = G__66345;\ncontinue;\n} else {\nvar component_66346 = cljs.core.first(seq__66205_66338__$1);\nvar component_ident_66347 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_66346);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app,component_ident_66347,component_66346);\n\n\nvar G__66348 = cljs.core.next(seq__66205_66338__$1);\nvar G__66349 = null;\nvar G__66350 = (0);\nvar G__66351 = (0);\nseq__66205_66327 = G__66348;\nchunk__66207_66328 = G__66349;\ncount__66208_66329 = G__66350;\ni__66209_66330 = G__66351;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__66352 = seq__66177;\nvar G__66353 = chunk__66178;\nvar G__66354 = count__66179;\nvar G__66355 = (i__66180 + (1));\nseq__66177 = G__66352;\nchunk__66178 = G__66353;\ncount__66179 = G__66354;\ni__66180 = G__66355;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__66177);\nif(temp__5735__auto__){\nvar seq__66177__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__66177__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__66177__$1);\nvar G__66357 = cljs.core.chunk_rest(seq__66177__$1);\nvar G__66358 = c__4556__auto__;\nvar G__66359 = cljs.core.count(c__4556__auto__);\nvar G__66360 = (0);\nseq__66177 = G__66357;\nchunk__66178 = G__66358;\ncount__66179 = G__66359;\ni__66180 = G__66360;\ncontinue;\n} else {\nvar class$ = cljs.core.first(seq__66177__$1);\nvar seq__66211_66362 = cljs.core.seq((class__GT_components.cljs$core$IFn$_invoke$arity$1 ? class__GT_components.cljs$core$IFn$_invoke$arity$1(class$) : class__GT_components.call(null,class$)));\nvar chunk__66213_66363 = null;\nvar count__66214_66364 = (0);\nvar i__66215_66365 = (0);\nwhile(true){\nif((i__66215_66365 < count__66214_66364)){\nvar component_66368 = chunk__66213_66363.cljs$core$IIndexed$_nth$arity$2(null,i__66215_66365);\nvar component_ident_66370 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_66368);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app,component_ident_66370,component_66368);\n\n\nvar G__66373 = seq__66211_66362;\nvar G__66374 = chunk__66213_66363;\nvar G__66375 = count__66214_66364;\nvar G__66376 = (i__66215_66365 + (1));\nseq__66211_66362 = G__66373;\nchunk__66213_66363 = G__66374;\ncount__66214_66364 = G__66375;\ni__66215_66365 = G__66376;\ncontinue;\n} else {\nvar temp__5735__auto___66377__$1 = cljs.core.seq(seq__66211_66362);\nif(temp__5735__auto___66377__$1){\nvar seq__66211_66378__$1 = temp__5735__auto___66377__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__66211_66378__$1)){\nvar c__4556__auto___66379 = cljs.core.chunk_first(seq__66211_66378__$1);\nvar G__66380 = cljs.core.chunk_rest(seq__66211_66378__$1);\nvar G__66381 = c__4556__auto___66379;\nvar G__66382 = cljs.core.count(c__4556__auto___66379);\nvar G__66383 = (0);\nseq__66211_66362 = G__66380;\nchunk__66213_66363 = G__66381;\ncount__66214_66364 = G__66382;\ni__66215_66365 = G__66383;\ncontinue;\n} else {\nvar component_66384 = cljs.core.first(seq__66211_66378__$1);\nvar component_ident_66385 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_66384);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app,component_ident_66385,component_66384);\n\n\nvar G__66386 = cljs.core.next(seq__66211_66378__$1);\nvar G__66387 = null;\nvar G__66388 = (0);\nvar G__66389 = (0);\nseq__66211_66362 = G__66386;\nchunk__66213_66363 = G__66387;\ncount__66214_66364 = G__66388;\ni__66215_66365 = G__66389;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__66390 = cljs.core.next(seq__66177__$1);\nvar G__66391 = null;\nvar G__66392 = (0);\nvar G__66393 = (0);\nseq__66177 = G__66390;\nchunk__66178 = G__66391;\ncount__66179 = G__66392;\ni__66180 = G__66393;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given an app and a `property-set`: returns the components that query for the items in property-set.\n * \n *   The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n *   in a component query as a property or join key.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.props__GT_components = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$props__GT_components(app,property_set){\nif(cljs.core.seq(property_set)){\nvar map__66222 = app;\nvar map__66222__$1 = (((((!((map__66222 == null))))?(((((map__66222.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66222.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66222):map__66222);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66222__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__66223 = cljs.core.deref(runtime_atom);\nvar map__66223__$1 = (((((!((map__66223 == null))))?(((((map__66223.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66223.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66223):map__66223);\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66223__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nvar map__66224 = indexes;\nvar map__66224__$1 = (((((!((map__66224 == null))))?(((((map__66224.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66224.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66224):map__66224);\nvar prop__GT_classes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66224__$1,new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717));\nvar class__GT_components = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66224__$1,new cljs.core.Keyword(null,\"class->components\",\"class->components\",436435919));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,prop){\nvar classes = (prop__GT_classes.cljs$core$IFn$_invoke$arity$1 ? prop__GT_classes.cljs$core$IFn$_invoke$arity$1(prop) : prop__GT_classes.call(null,prop));\nvar components = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__66220_SHARP_,p2__66221_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(p1__66220_SHARP_,(class__GT_components.cljs$core$IFn$_invoke$arity$1 ? class__GT_components.cljs$core$IFn$_invoke$arity$1(p2__66221_SHARP_) : class__GT_components.call(null,p2__66221_SHARP_)));\n}),cljs.core.PersistentHashSet.EMPTY,classes);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(result,components);\n}),cljs.core.PersistentHashSet.EMPTY,property_set);\n} else {\nreturn null;\n}\n});\n/**\n * This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n * uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n * When it finds data that has changed it renders all of the components that depend on that data.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_stale_components_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_stale_components_BANG_(app){\nvar map__66233 = app;\nvar map__66233__$1 = (((((!((map__66233 == null))))?(((((map__66233.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66233.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66233):map__66233);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66233__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66233__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar map__66234 = cljs.core.deref(runtime_atom);\nvar map__66234__$1 = (((((!((map__66234 == null))))?(((((map__66234.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66234.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66234):map__66234);\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66234__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nvar last_rendered_state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66234__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"last-rendered-state\",\"com.fulcrologic.fulcro.application/last-rendered-state\",1438978441));\nvar to_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66234__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66234__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206));\nvar map__66235 = indexes;\nvar map__66235__$1 = (((((!((map__66235 == null))))?(((((map__66235.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66235.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66235):map__66235);\nvar linked_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66235__$1,new cljs.core.Keyword(null,\"linked-props\",\"linked-props\",1547374714));\nvar ident__GT_components = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66235__$1,new cljs.core.Keyword(null,\"ident->components\",\"ident->components\",-1952169224));\nvar prop__GT_classes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66235__$1,new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717));\nvar idents_in_joins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66235__$1,new cljs.core.Keyword(null,\"idents-in-joins\",\"idents-in-joins\",-1556962035));\nvar limited_refresh_QMARK_ = cljs.core.seq(only_refresh);\nif(limited_refresh_QMARK_){\nvar map__66241 = cljs.core.group_by(edn_query_language.core.ident_QMARK_,only_refresh);\nvar map__66241__$1 = (((((!((map__66241 == null))))?(((((map__66241.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66241.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66241):map__66241);\nvar limited_idents = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66241__$1,true);\nvar limited_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66241__$1,false);\nvar limited_to_render = com.fulcrologic.fulcro.rendering.ident_optimized_render.props__GT_components(app,limited_props);\nvar seq__66243_66407 = cljs.core.seq(limited_to_render);\nvar chunk__66245_66408 = null;\nvar count__66246_66409 = (0);\nvar i__66247_66410 = (0);\nwhile(true){\nif((i__66247_66410 < count__66246_66409)){\nvar c_66411 = chunk__66245_66408.cljs$core$IIndexed$_nth$arity$2(null,i__66247_66410);\nvar ident_66412 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c_66411);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app,ident_66412,c_66411);\n\n\nvar G__66413 = seq__66243_66407;\nvar G__66414 = chunk__66245_66408;\nvar G__66415 = count__66246_66409;\nvar G__66416 = (i__66247_66410 + (1));\nseq__66243_66407 = G__66413;\nchunk__66245_66408 = G__66414;\ncount__66246_66409 = G__66415;\ni__66247_66410 = G__66416;\ncontinue;\n} else {\nvar temp__5735__auto___66418 = cljs.core.seq(seq__66243_66407);\nif(temp__5735__auto___66418){\nvar seq__66243_66419__$1 = temp__5735__auto___66418;\nif(cljs.core.chunked_seq_QMARK_(seq__66243_66419__$1)){\nvar c__4556__auto___66420 = cljs.core.chunk_first(seq__66243_66419__$1);\nvar G__66421 = cljs.core.chunk_rest(seq__66243_66419__$1);\nvar G__66422 = c__4556__auto___66420;\nvar G__66423 = cljs.core.count(c__4556__auto___66420);\nvar G__66424 = (0);\nseq__66243_66407 = G__66421;\nchunk__66245_66408 = G__66422;\ncount__66246_66409 = G__66423;\ni__66247_66410 = G__66424;\ncontinue;\n} else {\nvar c_66425 = cljs.core.first(seq__66243_66419__$1);\nvar ident_66426 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c_66425);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app,ident_66426,c_66425);\n\n\nvar G__66427 = cljs.core.next(seq__66243_66419__$1);\nvar G__66428 = null;\nvar G__66429 = (0);\nvar G__66430 = (0);\nseq__66243_66407 = G__66427;\nchunk__66245_66408 = G__66428;\ncount__66246_66409 = G__66429;\ni__66247_66410 = G__66430;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar seq__66255 = cljs.core.seq(limited_idents);\nvar chunk__66256 = null;\nvar count__66257 = (0);\nvar i__66258 = (0);\nwhile(true){\nif((i__66258 < count__66257)){\nvar i = chunk__66256.cljs$core$IIndexed$_nth$arity$2(null,i__66258);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app,i);\n\n\nvar G__66431 = seq__66255;\nvar G__66432 = chunk__66256;\nvar G__66433 = count__66257;\nvar G__66434 = (i__66258 + (1));\nseq__66255 = G__66431;\nchunk__66256 = G__66432;\ncount__66257 = G__66433;\ni__66258 = G__66434;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__66255);\nif(temp__5735__auto__){\nvar seq__66255__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__66255__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__66255__$1);\nvar G__66435 = cljs.core.chunk_rest(seq__66255__$1);\nvar G__66436 = c__4556__auto__;\nvar G__66437 = cljs.core.count(c__4556__auto__);\nvar G__66438 = (0);\nseq__66255 = G__66435;\nchunk__66256 = G__66436;\ncount__66257 = G__66437;\ni__66258 = G__66438;\ncontinue;\n} else {\nvar i = cljs.core.first(seq__66255__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app,i);\n\n\nvar G__66440 = cljs.core.next(seq__66255__$1);\nvar G__66441 = null;\nvar G__66442 = (0);\nvar G__66443 = (0);\nseq__66255 = G__66440;\nchunk__66256 = G__66441;\ncount__66257 = G__66442;\ni__66258 = G__66443;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nvar state_map = cljs.core.deref(state_atom);\nvar idents_in_joins__$1 = (function (){var or__4126__auto__ = idents_in_joins;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n})();\nvar dirty_linked_props = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,p){\nif((!((cljs.core.get.cljs$core$IFn$_invoke$arity$2(state_map,p) === cljs.core.get.cljs$core$IFn$_invoke$arity$2(last_rendered_state,p))))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,p);\n} else {\nreturn acc;\n}\n}),cljs.core.PersistentHashSet.EMPTY,linked_props);\nvar map__66262 = cljs.core.group_by(edn_query_language.core.ident_QMARK_,to_refresh);\nvar map__66262__$1 = (((((!((map__66262 == null))))?(((((map__66262.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66262.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66262):map__66262);\nvar idents_to_force = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66262__$1,true);\nvar props_to_force = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66262__$1,false);\nvar props_to_force__$1 = clojure.set.union.cljs$core$IFn$_invoke$arity$2(props_to_force,dirty_linked_props);\nvar mounted_idents = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.keys(ident__GT_components),idents_in_joins__$1);\nvar stale_idents = com.fulcrologic.fulcro.rendering.ident_optimized_render.dirty_table_entries(last_rendered_state,state_map,mounted_idents);\nvar extra_to_force = com.fulcrologic.fulcro.rendering.ident_optimized_render.props__GT_components(app,props_to_force__$1);\nvar all_idents = clojure.set.union.cljs$core$IFn$_invoke$arity$2(cljs.core.set(idents_to_force),cljs.core.set(stale_idents));\nvar seq__66271_66450 = cljs.core.seq(all_idents);\nvar chunk__66272_66451 = null;\nvar count__66273_66452 = (0);\nvar i__66274_66453 = (0);\nwhile(true){\nif((i__66274_66453 < count__66273_66452)){\nvar i_66454 = chunk__66272_66451.cljs$core$IIndexed$_nth$arity$2(null,i__66274_66453);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app,i_66454);\n\n\nvar G__66455 = seq__66271_66450;\nvar G__66456 = chunk__66272_66451;\nvar G__66457 = count__66273_66452;\nvar G__66458 = (i__66274_66453 + (1));\nseq__66271_66450 = G__66455;\nchunk__66272_66451 = G__66456;\ncount__66273_66452 = G__66457;\ni__66274_66453 = G__66458;\ncontinue;\n} else {\nvar temp__5735__auto___66459 = cljs.core.seq(seq__66271_66450);\nif(temp__5735__auto___66459){\nvar seq__66271_66460__$1 = temp__5735__auto___66459;\nif(cljs.core.chunked_seq_QMARK_(seq__66271_66460__$1)){\nvar c__4556__auto___66461 = cljs.core.chunk_first(seq__66271_66460__$1);\nvar G__66462 = cljs.core.chunk_rest(seq__66271_66460__$1);\nvar G__66463 = c__4556__auto___66461;\nvar G__66464 = cljs.core.count(c__4556__auto___66461);\nvar G__66465 = (0);\nseq__66271_66450 = G__66462;\nchunk__66272_66451 = G__66463;\ncount__66273_66452 = G__66464;\ni__66274_66453 = G__66465;\ncontinue;\n} else {\nvar i_66466 = cljs.core.first(seq__66271_66460__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app,i_66466);\n\n\nvar G__66468 = cljs.core.next(seq__66271_66460__$1);\nvar G__66469 = null;\nvar G__66470 = (0);\nvar G__66471 = (0);\nseq__66271_66450 = G__66468;\nchunk__66272_66451 = G__66469;\ncount__66273_66452 = G__66470;\ni__66274_66453 = G__66471;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar seq__66282 = cljs.core.seq(extra_to_force);\nvar chunk__66283 = null;\nvar count__66284 = (0);\nvar i__66285 = (0);\nwhile(true){\nif((i__66285 < count__66284)){\nvar c = chunk__66283.cljs$core$IIndexed$_nth$arity$2(null,i__66285);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app,com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c),c);\n\n\nvar G__66474 = seq__66282;\nvar G__66475 = chunk__66283;\nvar G__66476 = count__66284;\nvar G__66477 = (i__66285 + (1));\nseq__66282 = G__66474;\nchunk__66283 = G__66475;\ncount__66284 = G__66476;\ni__66285 = G__66477;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__66282);\nif(temp__5735__auto__){\nvar seq__66282__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__66282__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__66282__$1);\nvar G__66481 = cljs.core.chunk_rest(seq__66282__$1);\nvar G__66482 = c__4556__auto__;\nvar G__66483 = cljs.core.count(c__4556__auto__);\nvar G__66484 = (0);\nseq__66282 = G__66481;\nchunk__66283 = G__66482;\ncount__66284 = G__66483;\ni__66285 = G__66484;\ncontinue;\n} else {\nvar c = cljs.core.first(seq__66282__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app,com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c),c);\n\n\nvar G__66487 = cljs.core.next(seq__66282__$1);\nvar G__66488 = null;\nvar G__66489 = (0);\nvar G__66490 = (0);\nseq__66282 = G__66487;\nchunk__66283 = G__66488;\ncount__66284 = G__66489;\ni__66285 = G__66490;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n});\n/**\n * The top-level call for using this optimized render in your application.\n * \n *   If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n *   it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n *   data that has changed.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_BANG_(var_args){\nvar G__66296 = arguments.length;\nswitch (G__66296) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app){\nreturn com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$2(app,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app,p__66297){\nvar map__66298 = p__66297;\nvar map__66298__$1 = (((((!((map__66298 == null))))?(((((map__66298.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66298.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66298):map__66298);\nvar options = map__66298__$1;\nvar force_root_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66298__$1,new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683));\nvar root_props_changed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66298__$1,new cljs.core.Keyword(null,\"root-props-changed?\",\"root-props-changed?\",1999614835));\nif(cljs.core.truth_((function (){var or__4126__auto__ = force_root_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn root_props_changed_QMARK_;\n}\n})())){\nreturn com.fulcrologic.fulcro.rendering.keyframe_render.render_BANG_(app,options);\n} else {\ntry{return com.fulcrologic.fulcro.rendering.ident_optimized_render.render_stale_components_BANG_(app);\n}catch (e66303){var e = e66303;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.rendering.ident-optimized-render\",null,145,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Optimized render failed. Falling back to root render.\"], null);\n}),null)),null,-1341535386);\n\nreturn com.fulcrologic.fulcro.rendering.keyframe_render.render_BANG_(app,options);\n}}\n}));\n\n(com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).","~:file","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",60],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async.interop","~$cljs.core.async.interop","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.rendering.ident-optimized-render","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$edn-query-language.core","^T","~$log","~$taoensso.timbre","~$kr","~$com.fulcrologic.fulcro.rendering.keyframe-render","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^T","~$com.fulcrologic.fulcro.algorithms.denormalize","^10","~$cljs.core","^11","~$goog","^12","^S","^S","^X","^X","^Z","^Z","^V","^V","~$fdn","^10"],"~:seen",["^K",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^11","^11","^U","^V","^Y","^Z","^Z","^Z","^V","^V"],"~:form",["~#list",["~$ns","^M","A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).",["^19",["^15",["^X","~:as","^W"],["^10","^1;","^13"],["^Z","^1;","^Y"],["^S","^1;","^R"],["^T","^1;","^["],["^V","^1;","^U"]]]]],"~:flags",["^ ","^15",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^12","^11","^X","^10","^Z","^S","^T","^V"]],"^O","^M","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],"~:compiled-at",1599160995647,"~:resource-name","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.rendering.ident-optimized-render\n  \"A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).\"\n  (:require\n    [com.fulcrologic.fulcro.rendering.keyframe-render :as kr]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.components :as comp]\n    [clojure.set :as set]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]))\n\n(defn dirty-table-entries\n  \"Checks the given `idents` and returns a subset of them where the data they refer to has changed\n   between `old-state` and `new-state`.\"\n  [old-state new-state idents]\n  (reduce\n    (fn [result ident]\n      (if (identical? (get-in old-state ident) (get-in new-state ident))\n        result\n        (cons ident result)))\n    (list)\n    idents))\n\n(defn render-component!\n  \"Uses the component's query and the current application state to query for the current value of that component's\n  props (subtree). It then sends those props to the component via \\\"props tunnelling\\\" (setting them on a well-known key in\n  component-local state).\"\n  [app ident c]\n  #?(:cljs\n     (if (and c ident)\n       (let [{:com.fulcrologic.fulcro.application/keys [state-atom]} app\n             state-map @state-atom\n             query     (comp/get-query c state-map)\n             q         [{ident query}]\n             data-tree (when query (fdn/db->tree q state-map state-map)) ; denormalize time is set by app render\n             new-props (get data-tree ident)]\n         (when-not query (log/error \"Query was empty. Refresh failed for \" (type c)))\n         (comp/tunnel-props! c new-props))\n       (let [root (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/app-root)]\n         (when (not= c root)\n           (log/info \"Failed to do optimized update. Component\" (-> c comp/react-type (comp/class->registry-key))\n             \"queries for data that changed, but does not have an ident.\"))\n         (throw (ex-info \"Targeted update failed\" {}))))))\n\n(defn render-components-with-ident!\n  \"Renders *only* components that *have* the given ident.\"\n  [app ident]\n  (doseq [c (comp/ident->components app ident)]\n    (render-component! app ident c)))\n\n(defn render-dependents-of-ident!\n  \"Renders components that have, or query for, the given ident.\"\n  [app ident]\n  (render-components-with-ident! app ident)\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [indexes]} @runtime-atom\n        {:keys [prop->classes idents-in-joins class->components]} indexes\n        idents-in-joins (or idents-in-joins #{})]\n    (when (contains? idents-in-joins ident)\n      (let [classes (prop->classes ident)]\n        (when (seq classes)\n          (doseq [class classes]\n            (doseq [component (class->components class)\n                    :let [component-ident (comp/get-ident component)]]\n              (render-component! app component-ident component))))))))\n\n(defn props->components\n  \"Given an app and a `property-set`: returns the components that query for the items in property-set.\n\n  The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n  in a component query as a property or join key.\"\n  [app property-set]\n  (when (seq property-set)\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [indexes]} @runtime-atom\n          {:keys [prop->classes class->components]} indexes]\n      (reduce\n        (fn [result prop]\n          (let [classes    (prop->classes prop)\n                components (reduce #(into %1 (class->components %2)) #{} classes)]\n            (into result components)))\n        #{}\n        property-set))))\n\n(defn render-stale-components!\n  \"This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data.\"\n  [app]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [indexes last-rendered-state\n                                                   to-refresh only-refresh]} @runtime-atom\n        {:keys [linked-props ident->components prop->classes idents-in-joins]} indexes\n        limited-refresh? (seq only-refresh)]\n    (if limited-refresh?\n      (let [{limited-idents true\n             limited-props  false} (group-by eql/ident? only-refresh)\n            limited-to-render (props->components app limited-props)]\n        (doseq [c limited-to-render\n                :let [ident (comp/get-ident c)]]\n          (render-component! app ident c))\n        (doseq [i limited-idents]\n          (render-dependents-of-ident! app i)))\n      (let [state-map          @state-atom\n            idents-in-joins    (or idents-in-joins #{})\n            dirty-linked-props (reduce\n                                 (fn [acc p]\n                                   (if (not (identical?\n                                              (get state-map p)\n                                              (get last-rendered-state p)))\n                                     (conj acc p)\n                                     acc))\n                                 #{}\n                                 linked-props)\n            {idents-to-force true\n             props-to-force  false} (group-by eql/ident? to-refresh)\n            props-to-force     (set/union props-to-force dirty-linked-props)\n            mounted-idents     (concat (keys ident->components) idents-in-joins)\n            stale-idents       (dirty-table-entries last-rendered-state state-map mounted-idents)\n            extra-to-force     (props->components app props-to-force)\n            all-idents         (set/union (set idents-to-force) (set stale-idents))]\n        (doseq [i all-idents]\n          (render-dependents-of-ident! app i))\n        (doseq [c extra-to-force]\n          (render-component! app (comp/get-ident c) c))))))\n\n(defn render!\n  \"The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n  it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n  data that has changed.\"\n  ([app]\n   (render! app {}))\n  ([app {:keys [force-root? root-props-changed?] :as options}]\n   (if (or force-root? root-props-changed?)\n     (kr/render! app options)\n     (try\n       (render-stale-components! app)\n       (catch #?(:clj Exception :cljs :default) e\n         (log/info \"Optimized render failed. Falling back to root render.\")\n         (kr/render! app options))))))\n\n","~:reader-features",["^K",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.rendering.ident-optimized-render/dirty-table-entries","old-state","new-state","idents","cljs.core.reduce","result","ident","cljs.core.get_in","cljs.core/cons","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-component!","app","c","and__4115__auto__","map__66157","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs.core/deref","state-atom","state-map","query","com.fulcrologic.fulcro.components.get_query","q","data-tree","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","new-props","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/type","com.fulcrologic.fulcro.components/tunnel-props!","root","cljs.core.not_EQ_","com.fulcrologic.fulcro.components/react-type","com.fulcrologic.fulcro.components/class->registry-key","cljs.core.ex_info","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","seq__66160","cljs.core/seq","chunk__66161","count__66162","i__66163","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","com.fulcrologic.fulcro.components/ident->components","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-dependents-of-ident!","map__66170","map__66171","map__66172","runtime-atom","indexes","prop->classes","idents-in-joins","class->components","or__4126__auto__","cljs.core/contains?","classes","seq__66177","chunk__66178","count__66179","i__66180","class","seq__66205","chunk__66207","count__66208","i__66209","seq__66211","chunk__66213","count__66214","i__66215","component","component-ident","com.fulcrologic.fulcro.components.get_ident","com.fulcrologic.fulcro.rendering.ident-optimized-render/props->components","property-set","map__66222","map__66223","map__66224","prop","components","p1__66220#","p2__66221#","cljs.core.into","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-stale-components!","map__66233","map__66234","map__66235","last-rendered-state","to-refresh","only-refresh","linked-props","ident->components","limited-refresh?","map__66241","limited-idents","limited-props","cljs.core/group-by","edn-query-language.core/ident?","limited-to-render","seq__66243","chunk__66245","count__66246","i__66247","seq__66255","chunk__66256","count__66257","i__66258","i","map__66262","dirty-linked-props","acc","p","cljs.core.conj","idents-to-force","props-to-force","clojure.set.union","mounted-idents","cljs.core.concat","cljs.core/keys","stale-idents","extra-to-force","all-idents","cljs.core/set","seq__66271","chunk__66272","count__66273","i__66274","seq__66282","chunk__66283","count__66284","i__66285","var_args","G__66296","com.fulcrologic.fulcro.rendering.ident-optimized-render/render!","js/Error","p__66297","map__66298","com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_","force-root?","root-props-changed?","options","com.fulcrologic.fulcro.rendering.keyframe-render/render!","e66303","e","cljs.core/List"]],"~:used-vars",["^K",["~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-component!","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/props->components","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.components/react-type","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/not=","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/dirty-table-entries","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-stale-components!","~$cljs.core/contains?","~$cljs.core/into","~$com.fulcrologic.fulcro.components/get-ident","~$taoensso.timbre/*config*","~$cljs.core/get-in","~$cljs.core/List","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render!","~$cljs.core/ex-info","~$com.fulcrologic.fulcro.components/tunnel-props!","~$cljs.core/next","~$com.fulcrologic.fulcro.rendering.keyframe-render/render!","~$cljs.core/cons","~$com.fulcrologic.fulcro.components/class->registry-key","~$js/Error","~$cljs.core/type","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-dependents-of-ident!"]]],"~:cache-keys",["~#cmap",[["^1@","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^12","~$goog.dom.HtmlElement"]]],["^1@","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.labs.userAgent.util","~$goog.string"]]],["^1@","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11"]]],["^1@","goog/crypt/crypt.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.array","~$goog.asserts"]]],["^1@","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.Promise","~$goog.events.EventTarget"]]],["^1@","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^V"]]],["^1@","cljs/spec/gen/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","~$goog.Uri"]]],["^1@","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","~$clojure.string","^2F"]]],["^1@","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2H"]]],["^1@","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2F"]]],["^1@","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1@","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2E","~$goog.object","~$goog.string.internal"]]],["^1@","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2P"]]],["^1@","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1@","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^V","^2L","^T","^2O","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1@","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","~$expound.paths","^@"]]],["^1@","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2E","~$goog.reflect","^2F"]]],["^1@","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1@","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1@","taoensso/encore.cljs"],["30c096c80ac45227d869087a80755500fca98346","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2L","^S","~$cljs.reader","~$cljs.tools.reader.edn","^2O","^2F","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1@","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","~$goog.async.FreeList"]]],["^1@","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2M","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1@","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2N"]]],["^1@","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2F","^3="]]],["^1@","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.structs.Heap"]]],["^1@","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.Timer","^2G","^2H","^3F","^2J","~$goog.json.hybrid","~$goog.log","^3C","^3B","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^2O","^2F","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^2N"]]],["^1@","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11"]]],["^1@","cljs/pprint.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2L","^2F","^3="]]],["^1@","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^3K","^3L","^3M","^3J","^2G","^2F","^3="]]],["^1@","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","~$expound.problems","^@","^2L","^S","~$clojure.walk","~$expound.printer","~$expound.util","~$expound.ansi","^D"]]],["^1@","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1@","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.Disposable","^2H","^3>","~$goog.events.Event","^3H","^3I","^2O"]]],["^1@","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2L","^V","^@","~$expound.alpha"]]],["^1@","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.disposable.IDisposable"]]],["^1@","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2L"]]],["^1@","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^2W","node_modules/react/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^2X","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1@","shadow/js.js"],["bc0862a18183110802758387126e17faaedc1895","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H"]]],["^1@","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^3U","~$goog.structs.Collection","^3V"]]],"~:SHADOW-TIMESTAMP",[1598567487000,1598567487000,1592012038000],["^2W","node_modules/react/cjs/react.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","ea9e9a66370bbe35b404f4de02d009d42a753e6d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^2X","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1@","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","^34"]]],["^1@","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.events.ListenableKey"]]],["^1@","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","~$goog.html.trustedtypes","^2S","^2T","^2U","^2V"]]],["^1@","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","~$goog.events.Listener","^2O"]]],["^1@","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","~$taoensso.truss.impl"]]],["^1@","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^@"]]],["^1@","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2H","~$goog.html.SafeUrl","^2U","^2V","^2P"]]],["^1@","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4A","^2R","~$goog.html.uncheckedconversions","^2U","^2P"]]],["^1@","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^@","^3["]]],["^1@","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^S"]]],["^1@","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11"]]],["^1@","goog/useragent/product.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^31","^33","^2N"]]],["^1@","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1@","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^3?","~$goog.structs.PriorityPool"]]],["^1@","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2H","~$goog.dom.TagName","~$goog.dom.tags","^4E","^4F","~$goog.html.SafeStyleSheet","^4A","^2R","^4>","^2S","^2T","^31","^2O","^2U","^2V","^2P"]]],["^1@","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2O"]]],["^1@","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G"]]],["^1@","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2E","^2F"]]],["^1@","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2L","~$taoensso.encore"]]],["^1@","cljs/reader.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2O","^3N","^3;","^3="]]],["^1@","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2H","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4K","~$goog.dom.safe","^4D","^4G","~$goog.math.Coordinate","~$goog.math.Size","^2O","^2F","~$goog.string.Unicode","^2N"]]],["^1@","com/fulcrologic/fulcro/components.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2O","~$cljsjs.react","^T","^@","^V","^3Y","^2L","~$com.fulcrologic.fulcro.algorithms.do-not-use","^10","~$com.fulcrologic.fulcro.algorithms.lookup","~$com.fulcrologic.guardrails.core","^S"]]],["^1@","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.debug.Error","^4P"]]],["^1@","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","~$goog.debug.LogRecord"]]],["^1@","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2H","^2F","^3U","^3V","^3W","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1@","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^2W","node_modules/object-assign/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","519ffd5a4c91b67302cc9947b794966d629860cd","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^2X"]]],["^1@","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.Thenable","^2H","^3E","~$goog.async.run","^39","^4Y","~$goog.promise.Resolver"]]],["^1@","cljs/spec/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2O","^3Y","^D","^2L"]]],["^1@","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",[]]],["^1@","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","~$goog.json"]]],["^1@","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2O"]]],["^1@","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^3K","^2L","~$cljs.tools.reader.impl.inspect"]]],["^1@","cljsjs/react.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","~$module$node_modules$react$index"]]],["^1@","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2F","^3="]]],["^1@","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^43","~$goog.structs.Queue","~$goog.structs.Set"]]],["^2W","node_modules/react/cjs/react.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","32f2924b22daf411bb2b61bc45a3540aca73e0b2","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^2X","^4;"]]],["^1@","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2O","~$goog.structs.Node"]]],["^1@","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H"]]],["^1@","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^4Q","^4G","^2U","^2P"]]],["^1@","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^10","^4W","^Z"]]],["^1@","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2P"]]],["^1@","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2L","^@","^H","^S","^3[","^40","^30","^3Y","^3<","^2F"]]],["^1@","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","~$goog.debug.errorcontext","^2N"]]],["^1@","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.math"]]],["^1@","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^3L","^2F","^3="]]],["^1@","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2H","^4C","^5;"]]],["^1@","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^3F","~$goog.dom","^4K","^4Q","^4C","^4D","^2R","^31","^32","^2U"]]],["^1@","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","^4D","^4E","^4F","^4M","^4A","^2R","^2U","^2P"]]],["^1@","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2H","~$goog.debug","~$goog.debug.LogBuffer","^4Z"]]],["^2W","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^2X"]]],["^1@","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^43","~$goog.events.EventId"]]],["^1@","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^3J","^3K","^3L"]]],["^1@","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","~$goog.math.Long","~$goog.math.Integer","^2F","^2O","^2G","^2K","^3="]]],["^1@","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","^4>","^2U","^2V"]]],["^1@","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^5=","~$goog.debug.LogManager","^4Z","~$goog.debug.Logger"]]],["^1@","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2H","^4F","^2O","^2U","^2V","^2P"]]],["^1@","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^5=","^2M","^44","~$goog.events.EventType","^34","^2N"]]],["^1@","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^34"]]],["^1@","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2N"]]],["^1@","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11"]]],["^1@","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2G","^2H","^2F"]]],["^1@","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","^2V"]]],["^1@","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^2L","^4N","~$taoensso.timbre.appenders.core"]]],["^1@","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^X","^10","^Z","^S","^T","^V"]]],["^1@","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^5?"]]],["^1@","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^41"]]],["^1@","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^11","^T"]]],["^1@","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","~$goog.net.WrapperXmlHttpFactory","^42"]]],["^1@","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12"]]],["^1@","goog/crypt/base64.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2@",["^ ","^2A",null,"^2B",["^K",[]],"^2C",["^12","^2H","^2Z","^2F","^2N","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1580742522000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1598567491000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1580246397000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1580742522000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/gen/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1592012038000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/gen/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1580245266000,"jar:file:/home/patro/.m2/repository/com/taoensso/encore/2.117.0/encore-2.117.0.jar!/taoensso/encore.clj",1597755175000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1580246397000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1580245266000,"jar:file:/home/patro/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1592144842000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/components.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1589469725000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/main.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/reader.clj",1592012038000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/pprint.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1580245266000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",1,"^9",5,"^:",1,"^;",60],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",[]],"^L","^M","^P",null,"^Q",["^ ","^R","^S","^T","^T","^U","^V","^W","^X","^Y","^Z","^[","^T","^10","^10","^11","^11","^12","^12","^S","^S","^X","^X","^Z","^Z","^V","^V","^13","^10"],"^14",["^K",["^15"]],"~:shadow/js-access-global",["^K",["Error"]],"^16",null,"~:defs",["^ ","~$dirty-table-entries",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",16,"^9",7,"^:",16,"^;",26,"~:arglists",["^19",["~$quote",["^19",[["~$old-state","~$new-state","~$idents"]]]]],"^6","Checks the given `idents` and returns a subset of them where the data they refer to has changed\n   between `old-state` and `new-state`."],"^L","^1W","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",26,"~:method-params",["^19",[["^72","^73","^74"]]],"~:protocol-impl",null,"~:arglists-meta",["^19",[null,null]],"^9",1,"~:variadic?",false,"^8",16,"~:ret-tag",["^K",[null,"~$any"]],"^:",16,"~:max-fixed-arity",3,"~:fn-var",true,"^70",["^19",["^71",["^19",[["^72","^73","^74"]]]]],"^6","Checks the given `idents` and returns a subset of them where the data they refer to has changed\n   between `old-state` and `new-state`."],"~$render-component!",["^ ","^6[",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",28,"^9",7,"^:",28,"^;",24,"^70",["^19",["^71",["^19",[["~$app","~$ident","~$c"]]]]],"^6","Uses the component's query and the current application state to query for the current value of that component's\n  props (subtree). It then sends those props to the component via \"props tunnelling\" (setting them on a well-known key in\n  component-local state)."],"^L","^1L","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",24,"^75",["^19",[["^7>","^7?","~$c"]]],"^76",null,"^77",["^19",[null,null]],"^9",1,"^78",false,"^8",28,"^79",["^K",["~$js","~$clj-nil"]],"^:",28,"^7;",3,"^7<",true,"^70",["^19",["^71",["^19",[["^7>","^7?","~$c"]]]]],"^6","Uses the component's query and the current application state to query for the current value of that component's\n  props (subtree). It then sends those props to the component via \"props tunnelling\" (setting them on a well-known key in\n  component-local state)."],"~$render-components-with-ident!",["^ ","^6[",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",49,"^9",7,"^:",49,"^;",36,"^70",["^19",["^71",["^19",[["^7>","^7?"]]]]],"^6","Renders *only* components that *have* the given ident."],"^L","^1N","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",36,"^75",["^19",[["^7>","^7?"]]],"^76",null,"^77",["^19",[null,null]],"^9",1,"^78",false,"^8",49,"^79","^7A","^:",49,"^7;",2,"^7<",true,"^70",["^19",["^71",["^19",[["^7>","^7?"]]]]],"^6","Renders *only* components that *have* the given ident."],"~$render-dependents-of-ident!",["^ ","^6[",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",55,"^9",7,"^:",55,"^;",34,"^70",["^19",["^71",["^19",[["^7>","^7?"]]]]],"^6","Renders components that have, or query for, the given ident."],"^L","^2=","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",34,"^75",["^19",[["^7>","^7?"]]],"^76",null,"^77",["^19",[null,null]],"^9",1,"^78",false,"^8",55,"^79","^7A","^:",55,"^7;",2,"^7<",true,"^70",["^19",["^71",["^19",[["^7>","^7?"]]]]],"^6","Renders components that have, or query for, the given ident."],"~$props->components",["^ ","^6[",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",71,"^9",7,"^:",71,"^;",24,"^70",["^19",["^71",["^19",[["^7>","~$property-set"]]]]],"^6","Given an app and a `property-set`: returns the components that query for the items in property-set.\n\n  The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n  in a component query as a property or join key."],"^L","^1M","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",24,"^75",["^19",[["^7>","^7E"]]],"^76",null,"^77",["^19",[null,null]],"^9",1,"^78",false,"^8",71,"^79",["^K",[null,"^7:","^7A"]],"^:",71,"^7;",2,"^7<",true,"^70",["^19",["^71",["^19",[["^7>","^7E"]]]]],"^6","Given an app and a `property-set`: returns the components that query for the items in property-set.\n\n  The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n  in a component query as a property or join key."],"~$render-stale-components!",["^ ","^6[",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",89,"^9",7,"^:",89,"^;",31,"^70",["^19",["^71",["^19",[["^7>"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"^L","^1X","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",31,"^75",["^19",[["^7>"]]],"^76",null,"^77",["^19",[null,null]],"^9",1,"^78",false,"^8",89,"^79","^7A","^:",89,"^7;",1,"^7<",true,"^70",["^19",["^71",["^19",[["^7>"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"~$render!",["^ ","^6[",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",131,"^9",7,"^:",131,"^;",14,"^70",["^19",["^71",["^19",[["^7>"],["^7>",["^ ","~:keys",["~$force-root?","~$root-props-changed?"],"^1;","~$options"]]]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n  it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n  data that has changed.","~:top-fn",["^ ","^78",false,"~:fixed-arity",2,"^7;",2,"^75",[["^7>"],["^7>",["^ ","^7H",["^7I","^7J"],"^1;","^7K"]]],"^70",["^19",[["^7>"],["^7>",["^ ","^7H",["^7I","^7J"],"^1;","^7K"]]]],"^77",["^19",[null,null]]]],"^L","^23","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",14,"^7L",["^ ","^78",false,"^7M",2,"^7;",2,"^75",[["^7>"],["^7>",["^ ","^7H",["^7I","^7J"],"^1;","^7K"]]],"^70",["^19",[["^7>"],["^7>",["^ ","^7H",["^7I","^7J"],"^1;","^7K"]]]],"^77",["^19",[null,null]]],"^75",[["^7>"],["^7>",["^ ","^7H",["^7I","^7J"],"^1;","^7K"]]],"^76",null,"^7M",2,"^77",["^19",[null,null]],"^9",1,"^78",false,"~:methods",[["^ ","^7M",1,"^78",false,"~:tag","^7:"],["^ ","^7M",2,"^78",false,"^7O",["^K",[null,"^7:"]]]],"^8",131,"^:",131,"^7;",2,"^7<",true,"^70",["^19",[["^7>"],["^7>",["^ ","^7H",["^7I","^7J"],"^1;","^7K"]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n  it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n  data that has changed."]],"^17",["^ ","^11","^11","^U","^V","^Y","^Z","^Z","^Z","^V","^V"],"~:cljs.analyzer/constants",["^ ","^14",["^K",["~:com.fulcrologic.fulcro.application/indexes","~:com.fulcrologic.fulcro.application/last-rendered-state","~:idents-in-joins","~:prop->classes","~:force-root?","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:class->components","~:com.fulcrologic.fulcro.application/to-refresh","~:root-props-changed?","~:com.fulcrologic.fulcro.application/runtime-atom","~:info","~:error","~:ident->components","~:linked-props","~:auto","~:p","~:com.fulcrologic.fulcro.application/app-root"]],"~:order",["^7V","^81","~:p","^84","^85","^7[","^80","^7Q","^7T","^7S","^7X","^7R","^7Y","^7W","^83","^82","^7U","^7Z"]],"^1<",["^ ","^15",["^K",[]]],"^1=",["^ "],"^1>",["^12","^11","^X","^10","^Z","^S","^T","^V"]],"^O","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^2?",[["^89","~:static-fns"],true,["^89","~:shadow-tweaks"],null,["^89","~:source-map-inline"],null,["^89","~:elide-asserts"],false,["^89","~:optimize-constants"],null,["^89","^1C"],null,["^89","~:external-config"],["^ ","~:fulcro",["^ ","~:wrap-inputs?",false]],["^89","~:tooling-config"],null,["^89","~:emit-constants"],null,["^89","~:load-tests"],null,["^89","~:form-size-threshold"],null,["^89","~:data-readers"],null,["^89","~:infer-externs"],"^84",["^89","^1E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^89","~:fn-invoke-direct"],null,["^89","~:source-map"],true]]]