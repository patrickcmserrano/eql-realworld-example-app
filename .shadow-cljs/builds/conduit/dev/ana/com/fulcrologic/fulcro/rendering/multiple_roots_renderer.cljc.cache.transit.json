["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.rendering.multiple_roots_renderer');\n/**\n * Register a mounted react component as a new root that should be managed. The\n *   options map can contain:\n * \n *   - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n *   to true, which causes it to happen once (on initial mount).\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$register_root_BANG_(var_args){\nvar G__66792 = arguments.length;\nswitch (G__66792) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (react_instance){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2(react_instance,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118),true], null));\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (react_instance,p__66793){\nvar map__66794 = p__66793;\nvar map__66794__$1 = (((((!((map__66794 == null))))?(((((map__66794.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66794.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66794):map__66794);\nvar app = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66794__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar initialize_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66794__$1,new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118));\nvar app__$1 = (function (){var or__4126__auto__ = app;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = com.fulcrologic.fulcro.components.any__GT_app(react_instance);\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn com.fulcrologic.fulcro.components._STAR_app_STAR_;\n}\n}\n})();\nif(cljs.core.map_QMARK_(app__$1)){\nvar class$ = com.fulcrologic.fulcro.components.react_type(react_instance);\nvar k = com.fulcrologic.fulcro.components.class__GT_registry_key(class$);\nvar initialize_state_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"initialize-state!\",\"initialize-state!\",-1114074844));\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\nvar known_roots = (function (){var G__66798 = app__$1;\nvar G__66798__$1 = (((G__66798 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__66798));\nvar G__66798__$2 = (((G__66798__$1 == null))?null:cljs.core.deref(G__66798__$1));\nif((G__66798__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853).cljs$core$IFn$_invoke$arity$1(G__66798__$2);\n}\n})();\nvar initialized_QMARK_ = cljs.core.contains_QMARK_(known_roots,k);\nif(cljs.core.truth_((function (){var and__4115__auto__ = initialize_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (!(initialized_QMARK_));\n} else {\nreturn and__4115__auto__;\n}\n})())){\n(initialize_state_BANG_.cljs$core$IFn$_invoke$arity$2 ? initialize_state_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,class$) : initialize_state_BANG_.call(null,app__$1,class$));\n\nvar G__66800_66942 = app__$1;\nvar G__66801_66943 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),true], null);\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2(G__66800_66942,G__66801_66943) : schedule_render_BANG_.call(null,G__66800_66942,G__66801_66943));\n} else {\n}\n\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,90,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Adding root of type \",k], null);\n}),null)),null,-198554057);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853),k], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentHashSet.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([react_instance], 0));\n} else {\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,92,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Register-root cannot find app. Pass your Fulcro app via options.\"], null);\n}),null)),null,1807983064);\n}\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Deregister a mounted root that should no longer be managed.\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$deregister_root_BANG_(var_args){\nvar G__66808 = arguments.length;\nswitch (G__66808) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (react_instance){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2(react_instance,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (react_instance,p__66809){\nvar map__66810 = p__66809;\nvar map__66810__$1 = (((((!((map__66810 == null))))?(((((map__66810.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66810.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66810):map__66810);\nvar options = map__66810__$1;\nvar app = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66810__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar app__$1 = (function (){var or__4126__auto__ = app;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = com.fulcrologic.fulcro.components.any__GT_app(react_instance);\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn com.fulcrologic.fulcro.components._STAR_app_STAR_;\n}\n}\n})();\nif(cljs.core.map_QMARK_(app__$1)){\nvar class$ = com.fulcrologic.fulcro.components.react_type(react_instance);\nvar k = com.fulcrologic.fulcro.components.class__GT_registry_key(class$);\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,103,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Adding root of type \",k], null);\n}),null)),null,125955255);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853),k], null),cljs.core.disj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([react_instance], 0));\n} else {\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,105,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Deregister-root cannot find app. Pass your Fulcro app via options.\"], null);\n}),null)),null,1817910618);\n}\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$lang$maxFixedArity = 2);\n\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_roots_BANG_(app,options){\nvar state_map = (function (){var G__66815 = app;\nvar G__66815__$1 = (((G__66815 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__66815));\nif((G__66815__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__66815__$1);\n}\n})();\nvar known_roots = (function (){var G__66816 = app;\nvar G__66816__$1 = (((G__66816 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__66816));\nvar G__66816__$2 = (((G__66816__$1 == null))?null:cljs.core.deref(G__66816__$1));\nif((G__66816__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853).cljs$core$IFn$_invoke$arity$1(G__66816__$2);\n}\n})();\ncom.fulcrologic.fulcro.rendering.keyframe_render.render_BANG_(app,options);\n\nvar seq__66820 = cljs.core.seq(cljs.core.keys(known_roots));\nvar chunk__66822 = null;\nvar count__66823 = (0);\nvar i__66824 = (0);\nwhile(true){\nif((i__66824 < count__66823)){\nvar k = chunk__66822.cljs$core$IIndexed$_nth$arity$2(null,i__66824);\nvar cls_66963 = com.fulcrologic.fulcro.components.registry_key__GT_class(k);\nvar query_66964 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(cls_66963,state_map);\nvar root_props_66965 = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query_66964,state_map,state_map);\nvar seq__66835_66967 = cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(known_roots,k));\nvar chunk__66836_66968 = null;\nvar count__66837_66969 = (0);\nvar i__66838_66970 = (0);\nwhile(true){\nif((i__66838_66970 < count__66837_66969)){\nvar root_66972 = chunk__66836_66968.cljs$core$IIndexed$_nth$arity$2(null,i__66838_66970);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_66972,root_props_66965);\n\n\nvar G__66973 = seq__66835_66967;\nvar G__66974 = chunk__66836_66968;\nvar G__66975 = count__66837_66969;\nvar G__66976 = (i__66838_66970 + (1));\nseq__66835_66967 = G__66973;\nchunk__66836_66968 = G__66974;\ncount__66837_66969 = G__66975;\ni__66838_66970 = G__66976;\ncontinue;\n} else {\nvar temp__5735__auto___66977 = cljs.core.seq(seq__66835_66967);\nif(temp__5735__auto___66977){\nvar seq__66835_66978__$1 = temp__5735__auto___66977;\nif(cljs.core.chunked_seq_QMARK_(seq__66835_66978__$1)){\nvar c__4556__auto___66979 = cljs.core.chunk_first(seq__66835_66978__$1);\nvar G__66980 = cljs.core.chunk_rest(seq__66835_66978__$1);\nvar G__66981 = c__4556__auto___66979;\nvar G__66982 = cljs.core.count(c__4556__auto___66979);\nvar G__66983 = (0);\nseq__66835_66967 = G__66980;\nchunk__66836_66968 = G__66981;\ncount__66837_66969 = G__66982;\ni__66838_66970 = G__66983;\ncontinue;\n} else {\nvar root_66984 = cljs.core.first(seq__66835_66978__$1);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_66984,root_props_66965);\n\n\nvar G__66985 = cljs.core.next(seq__66835_66978__$1);\nvar G__66986 = null;\nvar G__66987 = (0);\nvar G__66988 = (0);\nseq__66835_66967 = G__66985;\nchunk__66836_66968 = G__66986;\ncount__66837_66969 = G__66987;\ni__66838_66970 = G__66988;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__66989 = seq__66820;\nvar G__66990 = chunk__66822;\nvar G__66991 = count__66823;\nvar G__66992 = (i__66824 + (1));\nseq__66820 = G__66989;\nchunk__66822 = G__66990;\ncount__66823 = G__66991;\ni__66824 = G__66992;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__66820);\nif(temp__5735__auto__){\nvar seq__66820__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__66820__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__66820__$1);\nvar G__66995 = cljs.core.chunk_rest(seq__66820__$1);\nvar G__66996 = c__4556__auto__;\nvar G__66997 = cljs.core.count(c__4556__auto__);\nvar G__66998 = (0);\nseq__66820 = G__66995;\nchunk__66822 = G__66996;\ncount__66823 = G__66997;\ni__66824 = G__66998;\ncontinue;\n} else {\nvar k = cljs.core.first(seq__66820__$1);\nvar cls_67001 = com.fulcrologic.fulcro.components.registry_key__GT_class(k);\nvar query_67002 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(cls_67001,state_map);\nvar root_props_67003 = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query_67002,state_map,state_map);\nvar seq__66839_67004 = cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(known_roots,k));\nvar chunk__66840_67005 = null;\nvar count__66841_67006 = (0);\nvar i__66842_67007 = (0);\nwhile(true){\nif((i__66842_67007 < count__66841_67006)){\nvar root_67009 = chunk__66840_67005.cljs$core$IIndexed$_nth$arity$2(null,i__66842_67007);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_67009,root_props_67003);\n\n\nvar G__67010 = seq__66839_67004;\nvar G__67011 = chunk__66840_67005;\nvar G__67012 = count__66841_67006;\nvar G__67013 = (i__66842_67007 + (1));\nseq__66839_67004 = G__67010;\nchunk__66840_67005 = G__67011;\ncount__66841_67006 = G__67012;\ni__66842_67007 = G__67013;\ncontinue;\n} else {\nvar temp__5735__auto___67015__$1 = cljs.core.seq(seq__66839_67004);\nif(temp__5735__auto___67015__$1){\nvar seq__66839_67016__$1 = temp__5735__auto___67015__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__66839_67016__$1)){\nvar c__4556__auto___67017 = cljs.core.chunk_first(seq__66839_67016__$1);\nvar G__67018 = cljs.core.chunk_rest(seq__66839_67016__$1);\nvar G__67019 = c__4556__auto___67017;\nvar G__67020 = cljs.core.count(c__4556__auto___67017);\nvar G__67021 = (0);\nseq__66839_67004 = G__67018;\nchunk__66840_67005 = G__67019;\ncount__66841_67006 = G__67020;\ni__66842_67007 = G__67021;\ncontinue;\n} else {\nvar root_67022 = cljs.core.first(seq__66839_67016__$1);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_67022,root_props_67003);\n\n\nvar G__67023 = cljs.core.next(seq__66839_67016__$1);\nvar G__67024 = null;\nvar G__67025 = (0);\nvar G__67026 = (0);\nseq__66839_67004 = G__67023;\nchunk__66840_67005 = G__67024;\ncount__66841_67006 = G__67025;\ni__66842_67007 = G__67026;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__67027 = cljs.core.next(seq__66820__$1);\nvar G__67028 = null;\nvar G__67029 = (0);\nvar G__67030 = (0);\nseq__66820 = G__67027;\nchunk__66822 = G__67028;\ncount__66823 = G__67029;\ni__66824 = G__67030;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n * uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n * When it finds data that has changed it renders all of the components that depend on that data.\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_stale_components_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_stale_components_BANG_(app,options){\nvar map__66844 = app;\nvar map__66844__$1 = (((((!((map__66844 == null))))?(((((map__66844.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66844.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66844):map__66844);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66844__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__66845 = cljs.core.deref(runtime_atom);\nvar map__66845__$1 = (((((!((map__66845 == null))))?(((((map__66845.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66845.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66845):map__66845);\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66845__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206));\nvar limited_refresh_QMARK_ = cljs.core.seq(only_refresh);\nif(limited_refresh_QMARK_){\nvar map__66848 = cljs.core.group_by(edn_query_language.core.ident_QMARK_,only_refresh);\nvar map__66848__$1 = (((((!((map__66848 == null))))?(((((map__66848.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66848.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66848):map__66848);\nvar limited_idents = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66848__$1,true);\nvar seq__66850 = cljs.core.seq(limited_idents);\nvar chunk__66851 = null;\nvar count__66852 = (0);\nvar i__66853 = (0);\nwhile(true){\nif((i__66853 < count__66852)){\nvar i = chunk__66851.cljs$core$IIndexed$_nth$arity$2(null,i__66853);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app,i);\n\n\nvar G__67032 = seq__66850;\nvar G__67033 = chunk__66851;\nvar G__67034 = count__66852;\nvar G__67035 = (i__66853 + (1));\nseq__66850 = G__67032;\nchunk__66851 = G__67033;\ncount__66852 = G__67034;\ni__66853 = G__67035;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__66850);\nif(temp__5735__auto__){\nvar seq__66850__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__66850__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__66850__$1);\nvar G__67037 = cljs.core.chunk_rest(seq__66850__$1);\nvar G__67038 = c__4556__auto__;\nvar G__67039 = cljs.core.count(c__4556__auto__);\nvar G__67040 = (0);\nseq__66850 = G__67037;\nchunk__66851 = G__67038;\ncount__66852 = G__67039;\ni__66853 = G__67040;\ncontinue;\n} else {\nvar i = cljs.core.first(seq__66850__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app,i);\n\n\nvar G__67042 = cljs.core.next(seq__66850__$1);\nvar G__67043 = null;\nvar G__67044 = (0);\nvar G__67045 = (0);\nseq__66850 = G__67042;\nchunk__66851 = G__67043;\ncount__66852 = G__67044;\ni__66853 = G__67045;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app,options);\n}\n});\n/**\n * The top-level call for using this optimized render in your application.\n * \n *   If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n * \n *   This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n *   (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n *   will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n *   ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n *   events that should really only affect a known set of components (like the input field).\n * \n *   This option does *not* currently support using query keywords in the refresh set. Only idents.\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_BANG_(var_args){\nvar G__66857 = arguments.length;\nswitch (G__66857) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2(app,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app,p__66858){\nvar map__66861 = p__66858;\nvar map__66861__$1 = (((((!((map__66861 == null))))?(((((map__66861.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__66861.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__66861):map__66861);\nvar options = map__66861__$1;\nvar force_root_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66861__$1,new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683));\nvar root_props_changed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__66861__$1,new cljs.core.Keyword(null,\"root-props-changed?\",\"root-props-changed?\",1999614835));\nif(cljs.core.truth_((function (){var or__4126__auto__ = force_root_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn root_props_changed_QMARK_;\n}\n})())){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app,options);\n} else {\ntry{return com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_stale_components_BANG_(app,options);\n}catch (e66863){var e = e66863;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,152,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Optimized render failed. Falling back to root render.\"], null);\n}),null)),null,81289276);\n\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app,options);\n}}\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n *   in the component lifecycle:\n * \n *   ```\n *   (defsc UIRoot [this props]\n *  {:componentDidMount     (fn [this] (mroot/register-root! this))\n *   :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n *   :initial-state {}\n *   :query [root-like-query]}\n *  ...)\n *   ```\n * \n *   The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n *   one mounted app.\n *   \n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_react_class = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$floating_root_react_class(UIRoot,fulcro_app){\nvar cls = (function (){\nreturn null;\n});\nvar ui_root = com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1(UIRoot);\ngoog.object.extend(cls.prototype,React.Component.prototype,cljs.core.clj__GT_js(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960),(function (){\nreturn false;\n}),new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),(function (){\nvar this$ = this;\nvar js_props = this$.props;\nvar app__66769__auto__ = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn fulcro_app;\n}\n})();\nvar d__66770__auto__ = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (0);\n}\n})();\nvar _STAR_app_STAR__orig_val__66878 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nvar _STAR_shared_STAR__orig_val__66879 = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\nvar _STAR_depth_STAR__orig_val__66880 = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\nvar _STAR_app_STAR__temp_val__66881 = app__66769__auto__;\nvar _STAR_shared_STAR__temp_val__66882 = com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1(app__66769__auto__);\nvar _STAR_depth_STAR__temp_val__66883 = d__66770__auto__;\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__temp_val__66881);\n\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__temp_val__66882);\n\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__temp_val__66883);\n\ntry{var _STAR_denormalize_time_STAR__orig_val__66884 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\nvar _STAR_denormalize_time_STAR__temp_val__66885 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"basis-t\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t\",1789052925).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(fulcro_app)));\n(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__66885);\n\ntry{var query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1(UIRoot);\nvar state_map = (function (){var G__66896 = fulcro_app;\nvar G__66896__$1 = (((G__66896 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__66896));\nif((G__66896__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__66896__$1);\n}\n})();\nvar props = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,state_map,state_map);\nvar G__66900 = props;\nvar G__66901 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"js-props\",\"js-props\",1900369280),js_props], null);\nreturn (ui_root.cljs$core$IFn$_invoke$arity$2 ? ui_root.cljs$core$IFn$_invoke$arity$2(G__66900,G__66901) : ui_root.call(null,G__66900,G__66901));\n}finally {(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__66884);\n}}finally {(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__orig_val__66880);\n\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__orig_val__66879);\n\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__orig_val__66878);\n}})], null)));\n\nreturn cls;\n});\n/**\n * Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n * has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n * \n *   `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n *   to regsiter/deregister itself as a root.\n * \n *   `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n *   props, so a `:keyfn` would have to be based on something else.\n * \n *   You normally do not pass any props to this factory because it is controlling the component and feeding props from\n *   the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n *   have a bunch of sibling roots and need to set the react key for each.\n *   \n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$floating_root_factory(var_args){\nvar G__66921 = arguments.length;\nswitch (G__66921) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$1 = (function (UIClass){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2(UIClass,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2 = (function (UIClass,options){\nvar constructor$ = (function (){\nreturn null;\n});\nvar ui_factory = com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1(UIClass);\nvar render = (function (this$){\nvar _STAR_denormalize_time_STAR__orig_val__66927 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\nvar _STAR_denormalize_time_STAR__temp_val__66928 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"basis-t\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t\",1789052925).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components._STAR_app_STAR_)));\n(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__66928);\n\ntry{var state_map = (function (){var G__66929 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nvar G__66929__$1 = (((G__66929 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__66929));\nif((G__66929__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__66929__$1);\n}\n})();\nvar query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(UIClass,state_map);\nvar props = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,state_map,state_map);\nvar G__66932 = (function (){var or__4126__auto__ = props;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nvar G__66933 = com.fulcrologic.fulcro.components.props(this$);\nreturn (ui_factory.cljs$core$IFn$_invoke$arity$2 ? ui_factory.cljs$core$IFn$_invoke$arity$2(G__66932,G__66933) : ui_factory.call(null,G__66932,G__66933));\n}finally {(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__66927);\n}});\nvar wrapper_class = com.fulcrologic.fulcro.components.configure_component_BANG_(constructor$,new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"wrapper\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/wrapper\",-2035797237),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960),(function (_,___$1,___$2){\nreturn false;\n}),new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),render], null));\nvar wrapper_factory = com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2(wrapper_class,options);\nreturn wrapper_factory;\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ","~:file","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",61],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async.interop","~$cljs.core.async.interop","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$with-app-context","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer"],"~:excludes",["~#set",[]],"~:macros",["^ ","^J",["^ ","~:arglists",["~#list",[["~$fulcro-app","~$&","~$body"]]],"^6","Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     ","^8",156,"^9",4,"^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:name","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/with-app-context","~:ns","^K","~:macro",true]],"^S","^K","~:op","^U","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$edn-query-language.core","^10","~$log","~$taoensso.timbre","~$ior","~$com.fulcrologic.fulcro.rendering.ident-optimized-render","~$kr","~$com.fulcrologic.fulcro.rendering.keyframe-render","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^10","~$com.fulcrologic.fulcro.algorithms.denormalize","^1:","~$cljs.core","^1;","~$gobj","~$goog.object","~$goog","^1>","^1=","^1=","~$cljsjs.react","^1?","^16","^16","^[","^[","^14","^14","^18","^18","^12","^12","~$fdn","^1:"],"~:seen",["^M",["~:require","~:require-macros"]],"~:uses",null,"^1C",["^ ","^K","^K","^1;","^1;","^11","^12","^17","^18","^18","^18","^12","^12"],"~:form",["^P",["~$ns","^K","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ",["^P",["^1C",["^K","~:refer",["^J"]]]],["^P",["^1B",["^16","~:as","^15"],["^14","^1H","^13"],["^1:","^1H","^1@"],["^18","^1H","^17"],["^[","^1H","^Z"],["^10","^1H","^19"],["^12","^1H","^11"],"^1?",["^1=","^1H","^1<"]]]]],"~:flags",["^ ","^1C",["^M",[]],"^1B",["^M",[]]],"~:js-deps",["^ "],"~:deps",["^1>","^1;","^16","^14","^1:","^18","^[","^10","^12","^1?","^1="]],"^U","^K","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc"],"~:compiled-at",1599160995830,"~:resource-name","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.rendering.multiple-roots-renderer\n  \"Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  \"\n  #?(:cljs (:require-macros [com.fulcrologic.fulcro.rendering.multiple-roots-renderer :refer [with-app-context]]))\n  (:require\n    [com.fulcrologic.fulcro.rendering.keyframe-render :as kr]\n    [com.fulcrologic.fulcro.rendering.ident-optimized-render :as ior]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]\n    #?@(:cljs\n        [cljsjs.react\n         [goog.object :as gobj]])))\n\n(defn register-root!\n  \"Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount).\"\n  ([react-instance]\n   (register-root! react-instance {:initialize? true}))\n  ([react-instance {:keys [app initialize?]}]\n   (let [app (or app (comp/any->app react-instance) comp/*app*)]\n     (if (map? app)\n       (let [class             (comp/react-type react-instance)\n             k                 (comp/class->registry-key class)\n             initialize-state! (ah/app-algorithm app :initialize-state!)\n             schedule-render!  (ah/app-algorithm app :schedule-render!)\n             known-roots       (some-> app :com.fulcrologic.fulcro.application/runtime-atom deref ::known-roots)\n             initialized?      (contains? known-roots k)]\n         (when (and initialize? (not initialized?))\n           (initialize-state! app class)\n           ;; We've already rendered this frame, so if we need initialized, we need a refresh\n           (schedule-render! app {:force-root? true}))\n         (log/debug \"Adding root of type \" k)\n         (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update-in [::known-roots k] (fnil conj #{}) react-instance))\n       (log/error \"Register-root cannot find app. Pass your Fulcro app via options.\")))))\n\n(defn deregister-root!\n  \"Deregister a mounted root that should no longer be managed.\"\n  ([react-instance]\n   (deregister-root! react-instance {}))\n  ([react-instance {:keys [app] :as options}]\n   (let [app (or app (comp/any->app react-instance) comp/*app*)]\n     (if (map? app)\n       (let [class (comp/react-type react-instance)\n             k     (comp/class->registry-key class)]\n         (log/debug \"Adding root of type \" k)\n         (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update-in [::known-roots k] disj react-instance))\n       (log/error \"Deregister-root cannot find app. Pass your Fulcro app via options.\")))))\n\n(defn render-roots! [app options]\n  (let [state-map   (some-> app :com.fulcrologic.fulcro.application/state-atom deref)\n        known-roots (some-> app :com.fulcrologic.fulcro.application/runtime-atom deref ::known-roots)]\n    (kr/render! app options)\n    (doseq [k (keys known-roots)\n            :let [cls        (comp/registry-key->class k)\n                  query      (comp/get-query cls state-map)\n                  root-props (fdn/db->tree query state-map state-map)]]\n      (doseq [root (get known-roots k)]\n        (comp/tunnel-props! root root-props)))))\n\n(defn render-stale-components!\n  \"This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data.\"\n  [app options]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [only-refresh]} @runtime-atom\n        limited-refresh? (seq only-refresh)]\n    (if limited-refresh?\n      (let [{limited-idents true} (group-by eql/ident? only-refresh)]\n        (doseq [i limited-idents]\n          (ior/render-components-with-ident! app i)))\n      (render-roots! app options))))\n\n(defn render!\n  \"The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents.\"\n  ([app]\n   (render! app {}))\n  ([app {:keys [force-root? root-props-changed?] :as options}]\n   (if (or force-root? root-props-changed?)\n     (render-roots! app options)\n     (try\n       (render-stale-components! app options)\n       (catch #?(:clj Exception :cljs :default) e\n         (log/info \"Optimized render failed. Falling back to root render.\")\n         (render-roots! app options))))))\n\n#?(:clj\n   (defmacro with-app-context\n     \"Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     \"\n     [fulcro-app & body]\n     (if-not (:ns &env)\n       `(do ~@body)\n       `(let [app# (or comp/*app* ~fulcro-app)\n              d#   (or comp/*depth* 0)]\n          (binding [comp/*app*    app#\n                    comp/*shared* (comp/shared app#)\n                    comp/*depth*  d#]\n            ~@body)))))\n\n(defn floating-root-react-class\n  \"Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  \"\n  [UIRoot fulcro-app]\n  (let [cls     (fn [])\n        ui-root (comp/computed-factory UIRoot)]\n    #?(:cljs\n       (gobj/extend (.-prototype cls) js/React.Component.prototype\n         (clj->js\n           {:shouldComponentUpdate (fn [] false)\n            :render                (fn []\n                                     (this-as ^js this\n                                       (let [js-props (.-props this)]\n                                         (with-app-context fulcro-app\n                                           (binding [fdn/*denormalize-time* (-> fulcro-app :com.fulcrologic.fulcro.application/runtime-atom deref ::basis-t)]\n                                             (let [query     (comp/get-query UIRoot)\n                                                   state-map (some-> fulcro-app :com.fulcrologic.fulcro.application/state-atom deref)\n                                                   props     (fdn/db->tree query state-map state-map)]\n                                               (ui-root props {:js-props js-props})))))))})))\n    cls))\n\n(defn floating-root-factory\n  \"Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  \"\n  ([UIClass]\n   (floating-root-factory UIClass {}))\n  ([UIClass options]\n   (let [constructor     (fn [])\n         ui-factory      (comp/computed-factory UIClass)\n         render          (fn [this]\n                           (binding [fdn/*denormalize-time* (-> comp/*app* :com.fulcrologic.fulcro.application/runtime-atom deref ::basis-t)]\n                             (let [state-map (some-> comp/*app* :com.fulcrologic.fulcro.application/state-atom deref)\n                                   query     (comp/get-query UIClass state-map)\n                                   props     (fdn/db->tree query state-map state-map)]\n                               (ui-factory (or props {}) (comp/props this)))))\n         wrapper-class   (comp/configure-component! constructor ::wrapper\n                           {:shouldComponentUpdate (fn [_ _ _] false)\n                            :render                render})\n         wrapper-factory (comp/factory wrapper-class options)]\n     wrapper-factory)))\n","~:reader-features",["^M",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__66792","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/register-root!","js/Error","p__66793","map__66794","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","react-instance","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_","app","initialize?","or__4126__auto__","com.fulcrologic.fulcro.components/any->app","com.fulcrologic.fulcro.components/*app*","cljs.core/map?","class","com.fulcrologic.fulcro.components/react-type","k","com.fulcrologic.fulcro.components/class->registry-key","initialize-state!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","schedule-render!","known-roots","G__66798","cljs.core/deref","initialized?","cljs.core/contains?","and__4115__auto__","G__66800","G__66801","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core.fnil","cljs.core/conj","G__66808","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/deregister-root!","p__66809","map__66810","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_","options","cljs.core/disj","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-roots!","state-map","G__66815","G__66816","com.fulcrologic.fulcro.rendering.keyframe-render/render!","seq__66820","cljs.core/seq","chunk__66822","count__66823","i__66824","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/keys","cls","com.fulcrologic.fulcro.components/registry-key->class","query","com.fulcrologic.fulcro.components.get_query","root-props","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","seq__66835","chunk__66836","count__66837","i__66838","seq__66839","chunk__66840","count__66841","i__66842","root","com.fulcrologic.fulcro.components/tunnel-props!","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-stale-components!","map__66844","map__66845","runtime-atom","only-refresh","limited-refresh?","map__66848","limited-idents","cljs.core/group-by","edn-query-language.core/ident?","seq__66850","chunk__66851","count__66852","i__66853","i","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","G__66857","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render!","p__66858","map__66861","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_","force-root?","root-props-changed?","e66863","e","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-react-class","UIRoot","fulcro-app","ui-root","com.fulcrologic.fulcro.components.computed_factory","goog.object/extend","js/React.Component.prototype","cljs.core/clj->js","this","js-props","app__66769__auto__","d__66770__auto__","com.fulcrologic.fulcro.components/*depth*","*app*-orig-val__66878","*shared*-orig-val__66879","com.fulcrologic.fulcro.components/*shared*","*depth*-orig-val__66880","*app*-temp-val__66881","*shared*-temp-val__66882","com.fulcrologic.fulcro.components.shared","*depth*-temp-val__66883","*denormalize-time*-orig-val__66884","*denormalize-time*-temp-val__66885","com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","G__66896","props","G__66900","G__66901","G__66921","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-factory","UIClass","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory","constructor","ui-factory","render","*denormalize-time*-orig-val__66927","*denormalize-time*-temp-val__66928","G__66929","G__66932","G__66933","com.fulcrologic.fulcro.components/props","wrapper-class","com.fulcrologic.fulcro.components/configure-component!","_","wrapper-factory","com.fulcrologic.fulcro.components.factory"]],"~:used-vars",["^M",["~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","~$taoensso.timbre/-log!","~$cljs.core/count","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-react-class","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/register-root!","~$cljs.core/fnil","~$cljs.core/map?","~$cljs.core/conj","~$taoensso.timbre/*config*","~$cljs.core/swap!","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-roots!","~$com.fulcrologic.fulcro.components/*app*","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-stale-components!","~$com.fulcrologic.fulcro.components/*shared*","~$cljs.core/clj->js","~$com.fulcrologic.fulcro.components/tunnel-props!","~$com.fulcrologic.fulcro.components/*depth*","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/deregister-root!","~$cljs.core/next","~$com.fulcrologic.fulcro.rendering.keyframe-render/render!","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-factory","~$cljs.core/not","~$cljs.core/disj","~$goog.object/extend","~$com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","~$js/React.Component.prototype","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render!","~$cljs.core/update-in","~$js/Error","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^1M","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^M",[]],"~:deps-syms",["^1>","~$goog.dom.HtmlElement"]]],["^1M","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.labs.userAgent.util","~$goog.string"]]],["^1M","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;"]]],["^1M","goog/crypt/crypt.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.array","~$goog.asserts"]]],["^1M","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.Promise","~$goog.events.EventTarget"]]],["^1M","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^12"]]],["^1M","cljs/spec/gen/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","~$goog.Uri"]]],["^1M","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","~$clojure.string","^2U"]]],["^1M","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2W"]]],["^1M","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2U"]]],["^1M","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1M","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2T","^1=","~$goog.string.internal"]]],["^1M","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^32"]]],["^1M","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1M","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^12","^2[","^10","^1=","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1M","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","~$expound.paths","^@"]]],["^1M","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2T","~$goog.reflect","^2U"]]],["^1M","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1M","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1M","taoensso/encore.cljs"],["30c096c80ac45227d869087a80755500fca98346","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^2[","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^1=","^2U","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1M","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","~$goog.async.FreeList"]]],["^1M","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^30","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1M","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^31"]]],["^1M","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2U","^3L"]]],["^1M","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.structs.Heap"]]],["^1M","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.Timer","^2V","^2W","^3U","^2Y","~$goog.json.hybrid","~$goog.log","^3R","^3Q","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^1=","^2U","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^31"]]],["^1M","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;"]]],["^1M","cljs/pprint.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^2[","^2U","^3L"]]],["^1M","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^3Z","^3[","^40","^3Y","^2V","^2U","^3L"]]],["^1M","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","~$expound.problems","^@","^2[","^3H","~$clojure.walk","~$expound.printer","~$expound.util","~$expound.ansi","^D"]]],["^1M","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1M","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.Disposable","^2W","^3M","~$goog.events.Event","^3W","^3X","^1="]]],["^1M","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^2[","^12","^@","~$expound.alpha"]]],["^1M","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.disposable.IDisposable"]]],["^1M","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^2["]]],["^1M","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^39","node_modules/react/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^3:","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1M","shadow/js.js"],["bc0862a18183110802758387126e17faaedc1895","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W"]]],["^1M","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^48","~$goog.structs.Collection","^49"]]],"~:SHADOW-TIMESTAMP",[1598567487000,1598567487000,1592012038000],["^39","node_modules/react/cjs/react.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","ea9e9a66370bbe35b404f4de02d009d42a753e6d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^3:","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1M","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","^3B"]]],["^1M","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.events.ListenableKey"]]],["^1M","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","~$goog.html.trustedtypes","^35","^36","^37","^38"]]],["^1M","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","~$goog.events.Listener","^1="]]],["^1M","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","~$taoensso.truss.impl"]]],["^1M","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^@"]]],["^1M","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^16","^14","^1:","^18","^[","^10","^12","^1?","^1="]]],["^1M","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2W","~$goog.html.SafeUrl","^37","^38","^32"]]],["^1M","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4P","^34","~$goog.html.uncheckedconversions","^37","^32"]]],["^1M","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^@","^4>"]]],["^1M","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^3H"]]],["^1M","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;"]]],["^1M","goog/useragent/product.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^3?","^3A","^31"]]],["^1M","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1M","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^3N","~$goog.structs.PriorityPool"]]],["^1M","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2W","~$goog.dom.TagName","~$goog.dom.tags","^4T","^4U","~$goog.html.SafeStyleSheet","^4P","^34","^4M","^35","^36","^3?","^1=","^37","^38","^32"]]],["^1M","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1="]]],["^1M","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V"]]],["^1M","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2T","^2U"]]],["^1M","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^2[","~$taoensso.encore"]]],["^1M","cljs/reader.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^1=","^41","^3J","^3L"]]],["^1M","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2W","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4Z","~$goog.dom.safe","^4S","^4V","~$goog.math.Coordinate","~$goog.math.Size","^1=","^2U","~$goog.string.Unicode","^31"]]],["^1M","com/fulcrologic/fulcro/components.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^1=","^1?","^10","^@","^12","^4<","^2[","~$com.fulcrologic.fulcro.algorithms.do-not-use","^1:","^[","~$com.fulcrologic.guardrails.core","^3H"]]],["^1M","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.debug.Error","^53"]]],["^1M","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","~$goog.debug.LogRecord"]]],["^1M","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2W","^2U","^48","^49","^4:","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1M","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^39","node_modules/object-assign/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","519ffd5a4c91b67302cc9947b794966d629860cd","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^3:"]]],["^1M","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.Thenable","^2W","^3T","~$goog.async.run","^3G","^5:","~$goog.promise.Resolver"]]],["^1M","cljs/spec/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^1=","^4<","^D","^2["]]],["^1M","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",[]]],["^1M","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","~$goog.json"]]],["^1M","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^1="]]],["^1M","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^3Z","^2[","~$cljs.tools.reader.impl.inspect"]]],["^1M","cljsjs/react.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","~$module$node_modules$react$index"]]],["^1M","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^2U","^3L"]]],["^1M","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^4B","~$goog.structs.Queue","~$goog.structs.Set"]]],["^39","node_modules/react/cjs/react.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","32f2924b22daf411bb2b61bc45a3540aca73e0b2","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^3:","^4J"]]],["^1M","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^1=","~$goog.structs.Node"]]],["^1M","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W"]]],["^1M","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^54","^4V","^37","^32"]]],["^1M","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^1:","^[","^18"]]],["^1M","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^32"]]],["^1M","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^2[","^@","^H","^3H","^4>","^4?","^3>","^4<","^3K","^2U"]]],["^1M","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","~$goog.debug.errorcontext","^31"]]],["^1M","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.math"]]],["^1M","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^3[","^2U","^3L"]]],["^1M","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2W","^4R","^5H"]]],["^1M","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^3U","~$goog.dom","^4Z","^54","^4R","^4S","^34","^3?","^3@","^37"]]],["^1M","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","^4S","^4T","^4U","^50","^4P","^34","^37","^32"]]],["^1M","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2W","~$goog.debug","~$goog.debug.LogBuffer","^5;"]]],["^39","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","fab07a5b6a308df61709bbce28c682a0ca4672ed","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^3:"]]],["^1M","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^4B","~$goog.events.EventId"]]],["^1M","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^3Y","^3Z","^3["]]],["^1M","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","~$goog.math.Long","~$goog.math.Integer","^2U","^1=","^2V","^2Z","^3L"]]],["^1M","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","^4M","^37","^38"]]],["^1M","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^5J","~$goog.debug.LogManager","^5;","~$goog.debug.Logger"]]],["^1M","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2W","^4U","^1=","^37","^38","^32"]]],["^1M","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^5J","^30","^4C","~$goog.events.EventType","^3B","^31"]]],["^1M","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^3B"]]],["^1M","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^31"]]],["^1M","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;"]]],["^1M","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2V","^2W","^2U"]]],["^1M","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","^38"]]],["^1M","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^2[","^51","~$taoensso.timbre.appenders.core"]]],["^1M","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^16","^1:","^18","^3H","^10","^12"]]],["^1M","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^5L"]]],["^1M","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^4@"]]],["^1M","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["d8ebbe409b4452a8d547a22bfcc530522f1517dc","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^1;","^10"]]],["^1M","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","~$goog.net.WrapperXmlHttpFactory","^4A"]]],["^1M","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>"]]],["^1M","goog/crypt/base64.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^M",[]],"^2R",["^1>","^2W","^3<","^2U","^31","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1580742522000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/rendering/keyframe_render.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1598567491000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1580245266000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1580246397000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1580742522000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/gen/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1592012038000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/gen/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1580245266000,"jar:file:/home/patro/.m2/repository/com/taoensso/encore/2.117.0/encore-2.117.0.jar!/taoensso/encore.clj",1597755175000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1580246397000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1580245266000,"jar:file:/home/patro/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1592144842000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/fulcro/3.2.12/fulcro-3.2.12.jar!/com/fulcrologic/fulcro/components.cljc",1598567490000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1589469725000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/main.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/reader.clj",1592012038000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/pprint.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1580245266000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",1,"^9",5,"^:",1,"^;",61],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",["^ ","^J","^K"],"^L",["^M",[]],"^N",["^ ","^J",["^ ","^O",["^P",[["^Q","~$&","^R"]]],"^6","Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     ","^8",156,"^9",4,"^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^S","^T","^U","^K","^V",true]],"~:shadow/js-access-properties",["^M",["Component"]],"^S","^K","^X",null,"^Y",["^ ","^Z","^[","^10","^10","^11","^12","^13","^14","^15","^16","^17","^18","^19","^10","^1:","^1:","^1;","^1;","^1<","^1=","^1>","^1>","^1=","^1=","^1?","^1?","^16","^16","^[","^[","^14","^14","^18","^18","^12","^12","^1@","^1:"],"^1A",["^M",["^1B","^1C"]],"~:shadow/js-access-global",["^M",["React","Error"]],"^1D",null,"~:defs",["^ ","~$register-root!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",69,"^9",7,"^:",69,"^;",21,"^O",["^P",["~$quote",["^P",[["~$react-instance"],["^7B",["^ ","~:keys",["~$app","~$initialize?"]]]]]]],"^6","Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount).","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^7B"],["^7B",["^ ","^7C",["^7D","^7E"]]]],"^O",["^P",[["^7B"],["^7B",["^ ","^7C",["^7D","^7E"]]]]],"~:arglists-meta",["^P",[null,null]]]],"^S","^23","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",21,"^7F",["^ ","^7G",false,"^7H",2,"^7I",2,"^7J",[["^7B"],["^7B",["^ ","^7C",["^7D","^7E"]]]],"^O",["^P",[["^7B"],["^7B",["^ ","^7C",["^7D","^7E"]]]]],"^7K",["^P",[null,null]]],"^7J",[["^7B"],["^7B",["^ ","^7C",["^7D","^7E"]]]],"~:protocol-impl",null,"^7H",2,"^7K",["^P",[null,null]],"^9",1,"^7G",false,"~:methods",[["^ ","^7H",1,"^7G",false,"~:tag","~$any"],["^ ","^7H",2,"^7G",false,"^7N",["^M",[null,"^7O","~$clj-nil"]]]],"^8",69,"^:",69,"^7I",2,"~:fn-var",true,"^O",["^P",[["^7B"],["^7B",["^ ","^7C",["^7D","^7E"]]]]],"^6","Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount)."],"~$deregister-root!",["^ ","^7@",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",94,"^9",7,"^:",94,"^;",23,"^O",["^P",["^7A",["^P",[["^7B"],["^7B",["^ ","^7C",["^7D"],"^1H","~$options"]]]]]],"^6","Deregister a mounted root that should no longer be managed.","^7F",["^ ","^7G",false,"^7H",2,"^7I",2,"^7J",[["^7B"],["^7B",["^ ","^7C",["^7D"],"^1H","^7S"]]],"^O",["^P",[["^7B"],["^7B",["^ ","^7C",["^7D"],"^1H","^7S"]]]],"^7K",["^P",[null,null]]]],"^S","^2@","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",23,"^7F",["^ ","^7G",false,"^7H",2,"^7I",2,"^7J",[["^7B"],["^7B",["^ ","^7C",["^7D"],"^1H","^7S"]]],"^O",["^P",[["^7B"],["^7B",["^ ","^7C",["^7D"],"^1H","^7S"]]]],"^7K",["^P",[null,null]]],"^7J",[["^7B"],["^7B",["^ ","^7C",["^7D"],"^1H","^7S"]]],"^7L",null,"^7H",2,"^7K",["^P",[null,null]],"^9",1,"^7G",false,"^7M",[["^ ","^7H",1,"^7G",false,"^7N","^7O"],["^ ","^7H",2,"^7G",false,"^7N",["^M",[null,"^7O","^7P"]]]],"^8",94,"^:",94,"^7I",2,"^7Q",true,"^O",["^P",[["^7B"],["^7B",["^ ","^7C",["^7D"],"^1H","^7S"]]]],"^6","Deregister a mounted root that should no longer be managed."],"~$render-roots!",["^ ","^7@",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",107,"^9",7,"^:",107,"^;",20,"^O",["^P",["^7A",["^P",[["^7D","^7S"]]]]]],"^S","^29","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",20,"^7J",["^P",[["^7D","^7S"]]],"^7L",null,"^7K",["^P",[null,null]],"^9",1,"^7G",false,"^8",107,"~:ret-tag","^7P","^:",107,"^7I",2,"^7Q",true,"^O",["^P",["^7A",["^P",[["^7D","^7S"]]]]]],"~$render-stale-components!",["^ ","^7@",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",118,"^9",7,"^:",118,"^;",31,"^O",["^P",["^7A",["^P",[["^7D","^7S"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"^S","^2;","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",31,"^7J",["^P",[["^7D","^7S"]]],"^7L",null,"^7K",["^P",[null,null]],"^9",1,"^7G",false,"^8",118,"^7U","^7P","^:",118,"^7I",2,"^7Q",true,"^O",["^P",["^7A",["^P",[["^7D","^7S"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"~$render!",["^ ","^7@",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",132,"^9",7,"^:",132,"^;",14,"^O",["^P",["^7A",["^P",[["^7D"],["^7D",["^ ","^7C",["~$force-root?","~$root-props-changed?"],"^1H","^7S"]]]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents.","^7F",["^ ","^7G",false,"^7H",2,"^7I",2,"^7J",[["^7D"],["^7D",["^ ","^7C",["^7X","^7Y"],"^1H","^7S"]]],"^O",["^P",[["^7D"],["^7D",["^ ","^7C",["^7X","^7Y"],"^1H","^7S"]]]],"^7K",["^P",[null,null]]]],"^S","^2I","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",14,"^7F",["^ ","^7G",false,"^7H",2,"^7I",2,"^7J",[["^7D"],["^7D",["^ ","^7C",["^7X","^7Y"],"^1H","^7S"]]],"^O",["^P",[["^7D"],["^7D",["^ ","^7C",["^7X","^7Y"],"^1H","^7S"]]]],"^7K",["^P",[null,null]]],"^7J",[["^7D"],["^7D",["^ ","^7C",["^7X","^7Y"],"^1H","^7S"]]],"^7L",null,"^7H",2,"^7K",["^P",[null,null]],"^9",1,"^7G",false,"^7M",[["^ ","^7H",1,"^7G",false,"^7N","^7O"],["^ ","^7H",2,"^7G",false,"^7N",["^M",[null,"^7P"]]]],"^8",132,"^:",132,"^7I",2,"^7Q",true,"^O",["^P",[["^7D"],["^7D",["^ ","^7C",["^7X","^7Y"],"^1H","^7S"]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents."],"~$floating-root-react-class",["^ ","^7@",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",173,"^9",7,"^:",173,"^;",32,"^O",["^P",["^7A",["^P",[["~$UIRoot","^Q"]]]]],"^6","Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  "],"^S","^20","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",32,"^7J",["^P",[["^7[","^Q"]]],"^7L",null,"^7K",["^P",[null,null]],"^9",1,"^7G",false,"^8",173,"^7U","~$function","^:",173,"^7I",2,"^7Q",true,"^O",["^P",["^7A",["^P",[["^7[","^Q"]]]]],"^6","Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  "],"~$floating-root-factory",["^ ","^7@",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",207,"^9",7,"^:",207,"^;",28,"^O",["^P",["^7A",["^P",[["~$UIClass"],["^82","^7S"]]]]],"^6","Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  ","^7F",["^ ","^7G",false,"^7H",2,"^7I",2,"^7J",[["^82"],["^82","^7S"]],"^O",["^P",[["^82"],["^82","^7S"]]],"^7K",["^P",[null,null]]]],"^S","^2C","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",28,"^7F",["^ ","^7G",false,"^7H",2,"^7I",2,"^7J",[["^82"],["^82","^7S"]],"^O",["^P",[["^82"],["^82","^7S"]]],"^7K",["^P",[null,null]]],"^7J",[["^82"],["^82","^7S"]],"^7L",null,"^7H",2,"^7K",["^P",[null,null]],"^9",1,"^7G",false,"^7M",[["^ ","^7H",1,"^7G",false,"^7N","^7O"],["^ ","^7H",2,"^7G",false,"^7N",["^M",["~$clj","~$cljs.core/MetaFn","^7P"]]]],"^8",207,"^:",207,"^7I",2,"^7Q",true,"^O",["^P",[["^82"],["^82","^7S"]]],"^6","Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  "]],"^1C",["^ ","^K","^K","^1;","^1;","^11","^12","^17","^18","^18","^18","^12","^12"],"~:cljs.analyzer/constants",["^ ","^1A",["^M",["~:js-props","~:initialize-state!","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/wrapper","~:debug","~:force-root?","~:schedule-render!","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:shouldComponentUpdate","~:render","~:root-props-changed?","~:com.fulcrologic.fulcro.application/runtime-atom","~:app","~:info","~:error","~:initialize?","~:auto","~:p","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t"]],"~:order",["^8F","^8C","^87","^8<","^8B","^88","^8;","^8:","~:p","^8G","^8E","^8=","^8>","^8A","^8D","^8?","^8@","^8H","^86","^89"]],"^1I",["^ ","^1C",["^M",[]],"^1B",["^M",[]]],"^1J",["^ "],"^1K",["^1>","^1;","^16","^14","^1:","^18","^[","^10","^12","^1?","^1="]],"^U","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^M",[]],"~:compiler-options",["^2N",[["^8L","~:static-fns"],true,["^8L","~:shadow-tweaks"],null,["^8L","~:source-map-inline"],null,["^8L","~:elide-asserts"],false,["^8L","~:optimize-constants"],null,["^8L","^1P"],null,["^8L","~:external-config"],["^ ","~:fulcro",["^ ","~:wrap-inputs?",false]],["^8L","~:tooling-config"],null,["^8L","~:emit-constants"],null,["^8L","~:load-tests"],null,["^8L","~:form-size-threshold"],null,["^8L","~:data-readers"],null,["^8L","~:infer-externs"],"^8G",["^8L","^1R"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8L","~:fn-invoke-direct"],null,["^8L","~:source-map"],true]]]