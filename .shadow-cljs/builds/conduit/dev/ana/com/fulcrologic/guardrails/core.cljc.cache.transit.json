["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.guardrails.core');\ncom.fulcrologic.guardrails.core._EQ__GT_ = new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814);\ncom.fulcrologic.guardrails.core._BAR_ = new cljs.core.Keyword(null,\"st\",\"st\",1455255828);\ncom.fulcrologic.guardrails.core._LT__ = new cljs.core.Keyword(null,\"gen\",\"gen\",142575302);\ncom.fulcrologic.guardrails.core.output_fn = (function com$fulcrologic$guardrails$core$output_fn(data){\nvar map__62525 = data;\nvar map__62525__$1 = (((((!((map__62525 == null))))?(((((map__62525.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62525.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62525):map__62525);\nvar level = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62525__$1,new cljs.core.Keyword(null,\"level\",\"level\",1290497552));\nvar _QMARK_err = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62525__$1,new cljs.core.Keyword(null,\"?err\",\"?err\",549653299));\nvar msg_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62525__$1,new cljs.core.Keyword(null,\"msg_\",\"msg_\",-1925147000));\nvar _QMARK_ns_str = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62525__$1,new cljs.core.Keyword(null,\"?ns-str\",\"?ns-str\",2012733966));\nvar _QMARK_file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62525__$1,new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675));\nvar hostname_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62525__$1,new cljs.core.Keyword(null,\"hostname_\",\"hostname_\",-2091647379));\nvar timestamp_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62525__$1,new cljs.core.Keyword(null,\"timestamp_\",\"timestamp_\",-954533417));\nvar _QMARK_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62525__$1,new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385));\nreturn [clojure.string.upper_case(cljs.core.name(level)),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.force(msg_)),(function (){var temp__5735__auto__ = _QMARK_err;\nif(cljs.core.truth_(temp__5735__auto__)){\nvar err = temp__5735__auto__;\nreturn [\"\\n\",taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2(err,cljs.core.PersistentArrayMap.EMPTY)].join('');\n} else {\nreturn null;\n}\n})()].join('');\n});\ncom.fulcrologic.guardrails.core.run_check = (function com$fulcrologic$guardrails$core$run_check(args_QMARK_,p__62534,spec,value){\nvar map__62535 = p__62534;\nvar map__62535__$1 = (((((!((map__62535 == null))))?(((((map__62535.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62535.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62535):map__62535);\nvar log_level = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62535__$1,new cljs.core.Keyword(null,\"log-level\",\"log-level\",862121670));\nvar vararg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62535__$1,new cljs.core.Keyword(null,\"vararg?\",\"vararg?\",1908105777));\nvar throw_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62535__$1,new cljs.core.Keyword(null,\"throw?\",\"throw?\",-2036749118));\nvar fn_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62535__$1,new cljs.core.Keyword(null,\"fn-name\",\"fn-name\",-766594004));\nvar vargs_QMARK__62626 = (function (){var and__4115__auto__ = args_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn vararg_QMARK_;\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar varg_62627 = (cljs.core.truth_(vargs_QMARK__62626)?cljs.core.last(cljs.core.seq(value)):null);\nvar specable_args_62628 = (cljs.core.truth_(vargs_QMARK__62626)?((cljs.core.map_QMARK_(varg_62627))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(cljs.core.butlast(value)),cljs.core.flatten(cljs.core.seq(varg_62627))):cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(cljs.core.butlast(value)),cljs.core.seq(varg_62627))):value);\nvar valid_exception_62629 = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\ntry{if(cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2(spec,specable_args_62628)){\n} else {\nvar config_62630 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539),com.fulcrologic.guardrails.core.output_fn);\nvar problem_62631 = expound.alpha.expound_str.cljs$core$IFn$_invoke$arity$2(spec,specable_args_62628);\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(config_62630,(function (){var or__4126__auto__ = log_level;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"error\",\"error\",-978969032);\n}\n})(),\"com.fulcrologic.guardrails.core\",null,50,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(fn_name),(cljs.core.truth_(args_QMARK_)?\" argument list\":\" return type\"),\"\\n\"].join(''),problem_62631], null);\n}),null)),null,-868348437);\n\nif(cljs.core.truth_(throw_QMARK_)){\ncljs.core.reset_BANG_(valid_exception_62629,cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(problem_62631,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"fn-name\",\"fn-name\",-766594004),cljs.core.str.cljs$core$IFn$_invoke$arity$1(fn_name)], null)));\n} else {\n}\n}\n}catch (e62569){var e_62639 = e62569;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.guardrails.core\",null,54,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_62639,\"BUG: Internal error in expound or clojure spec.\"], null);\n}),null)),null,1882172857);\n}\nif(cljs.core.truth_(cljs.core.deref(valid_exception_62629))){\nthrow cljs.core.deref(valid_exception_62629);\n} else {\n}\n\nreturn null;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","com/fulcrologic/guardrails/core.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",36],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async.interop","~$cljs.core.async.interop","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:macros",["^ ","~$>defn-",["^ ","~:arglists",["~#list",[["~$name","~$doc-string?","~$attr-map?",["~$params*"],"~$gspec","~$prepost-map?","~$body?"],["^O","^P","^Q",["^N",[["^R"],"^S","^T","^U"]],"~$+","^Q"]]],"~:doc","Like defn-, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",679,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","~:name","~$com.fulcrologic.guardrails.core/>defn-","~:ns","~$com.fulcrologic.guardrails.core","~:macro",true],"~$emit-specs?",["^ ","^M",["^N",[[]]],"^7",646,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^W","~$com.fulcrologic.guardrails.core/emit-specs?","^Y","^Z","^[",true],"~$>fdef",["^ ","^M",["^N",[["^O",["^R"],"^S"],["^O",["^N",[["^R"],"^S"]],"~$+"]]],"^V","Defines an fspec using gspec syntax – pretty much a `>defn` without the body.\n\n       `name` can be a symbol or a qualified keyword, depending on whether the\n       fspec is meant to be registered as a top-level fspec (=> s/fdef fn-sym\n       ...) or used in other specs (=> s/def ::spec-keyword (s/fspec ...)). ","^7",715,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^W","~$com.fulcrologic.guardrails.core/>fdef","^Y","^Z","^[",true],"~$>def",["^ ","^M",["^N",[["~$k","~$spec-form"],["~$k","~$_doc","^15"]]],"^V","Simple pass-through to `s/def`, except it strips the\n       specs in production – use for data specs you don't need\n       in production when you want to minimise your build size.\n\n       You can optionally send a documentation string as the second parameter, this\n       is intended to be informational for the code reader, currently this is not stored\n       anywhere, meaning you can't access this string at runtime.","^7",694,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^W","~$com.fulcrologic.guardrails.core/>def","^Y","^Z","^[",true],"~$?",["^ ","^M",["^N",[["~$&","~$forms"]]],"^7",83,"^8",4,"^6","com/fulcrologic/guardrails/core.cljc","^W","~$com.fulcrologic.guardrails.core/?","^Y","^Z","^[",true],"~$>defn",["^ ","^M",["^N",[["^O","^P","^Q",["^R"],"^S","^T","^U"],["^O","^P","^Q",["^N",[["^R"],"^S","^T","^U"]],"~$+","^Q"]]],"^V","Like defn, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",662,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^W","~$com.fulcrologic.guardrails.core/>defn","^Y","^Z","^[",true]],"^W","^Z","~:op","^Y","~:imports",null,"~:requires",["^ ","^>","^?","~$log","~$taoensso.timbre","~$expound.alpha","^1A","~$cljs.core","^1B","~$goog","^1C","~$exp","^1A","~$s","^?","~$string","~$clojure.string","^1@","^1@","^1F","^1F","^?","^?"],"~:seen",["^J",["~:require","~:require-macros"]],"~:uses",null,"^1I",["^ ","^Z","^Z","^1B","^1B","^>","^?","^1?","^1@","~$s","^?","^1@","^1@","^?","^?"],"~:form",["^N",["~$ns","^Z",["^N",["^1I","^Z"]],["^N",["^1H",["^1F","~:as","^1E"],["^1@","^1M","^1?"],["^>","^1M","~$s"],["^1A","^1M","^1D"]]]]],"~:flags",["^ ","^1I",["^J",[]],"^1H",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^1C","^1B","^1F","^1@","^?","^1A"]],"^Y","^Z","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/guardrails/core.cljc"],"~:compiled-at",1599160993972,"~:resource-name","com/fulcrologic/guardrails/core.cljc","~:warnings",[],"~:source",";; Copyright (c) George Lipov. All rights reserved.\n;; Additional code Copyright Fulcrologic, LLC.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns com.fulcrologic.guardrails.core\n  #?(:cljs (:require-macros com.fulcrologic.guardrails.core))\n  (:require\n    #?@(:clj [[clojure.set :refer [union difference map-invert]]\n              [clojure.walk :as walk]\n              [com.fulcrologic.guardrails.utils :refer [cljs-env? clj->cljs]]\n              [com.fulcrologic.guardrails.config :as cfg]])\n    [clojure.string :as string]\n    [taoensso.timbre :as log]\n    [clojure.spec.alpha :as s]\n    [expound.alpha :as exp]))\n\n;; It doesn't actually matter what these are bound to, they are stripped by\n;; the macros they're used in and never end up in the final code. This is just\n;; so they can be used without '=> cannot be resolved' errors in the IDE.\n(def => :ret)\n(def | :st)\n(def <- :gen)\n\n;; runtime checking (both clj and cljs\n(defn- output-fn [data]\n  (let [{:keys [level ?err msg_ ?ns-str ?file hostname_\n                timestamp_ ?line]} data]\n    (str\n      (string/upper-case (name level)) \" \"\n      (force msg_)\n      (when-let [err ?err]\n        (str \"\\n\" (log/stacktrace err {}))))))\n\n(defn run-check [args? {:keys [log-level vararg? throw? fn-name]} spec value]\n  (let [vargs?          (and args? vararg?)\n        varg            (if vargs? (last (seq value)) nil)\n        specable-args   (if vargs?\n                          (if (map? varg) (into (vec (butlast value)) (flatten (seq varg))) (into (vec (butlast value)) (seq varg)))\n                          value)\n        valid-exception (atom nil)]\n    (try\n      (when-not (s/valid? spec specable-args)\n        (let [config  (assoc log/*config* :output-fn output-fn)\n              problem (exp/expound-str spec specable-args)]\n          (log/log* config (or log-level :error) (str fn-name (if args? \" argument list\" \" return type\") \"\\n\") problem)\n          (when throw?\n            (reset! valid-exception (ex-info problem {:fn-name (str fn-name)})))))\n      (catch #?(:cljs :default :clj Throwable) e\n        (log/error e \"BUG: Internal error in expound or clojure spec.\")))\n    (when @valid-exception\n      (throw @valid-exception)))\n  nil)\n\n\n#?(:clj\n   (defn clean-defn\n     \"This removes the gspec and returns a\n     clean defn for use in production builds.\"\n     [op forms]\n     (let [single-arity? (fn [fn-forms] (boolean (some vector? fn-forms)))\n           strip-gspec   (fn [body] (let [[args _gspec & more] body]\n                                      (cons args more)))]\n       (->> (if (single-arity? forms)\n              (let [[head-forms body-forms] (split-with (complement vector?) forms)]\n                `(~op ~@head-forms ~@(strip-gspec body-forms)))\n              (let [[head-forms body-forms tail-attr-map] (partition-by (complement seq?) forms)]\n                `(~op ~@head-forms ~@(map strip-gspec body-forms) ~@tail-attr-map)))\n         (remove nil?)))))\n\n#?(:clj\n   (defn- count-args\n     \"Returns a tuple with the number of regular and non-variadic arguments.\"\n     [conformed-args]\n     [(count (:args conformed-args))\n      (if (:varargs conformed-args) 1 0)]))\n\n#?(:clj\n   (defmacro ? [& forms]\n     (cond-> `(s/nilable ~@forms)\n       (cljs-env? &env) clj->cljs)))\n\n#?(:clj\n   (do\n     (s/def ::defn-macro string?)\n     (s/def ::expound (s/map-of keyword? any?))\n     (s/def ::throw? boolean?)\n     (s/def ::emit-spec? boolean?)\n     (s/def ::log-level #{:trace :debug :info :warn :error :fatal :report})\n\n     (s/def ::guardrails-config\n       (s/keys\n         :opt-un [::defn-macro\n                  ::expound\n                  ::throw?\n                  ::emit-spec?\n                  ::log-level]))\n\n     ;; These are lifted straight from clojure.core.specs.alpha, because it\n     ;; didn't seem possible to access them directly in the original namespace.\n     (s/def ::local-name (s/and simple-symbol? #(not= '& %)))\n\n     ;; sequential destructuring\n     (s/def ::seq-binding-form\n       (s/and vector?\n         (s/cat :elems (s/* ::binding-form)\n           :rest (s/? (s/cat :amp #{'&} :form ::binding-form))\n           :as (s/? (s/cat :as #{:as} :sym ::local-name)))))\n\n     ;; map destructuring\n     (s/def ::keys (s/coll-of ident? :kind vector?))\n     (s/def ::syms (s/coll-of symbol? :kind vector?))\n     (s/def ::strs (s/coll-of simple-symbol? :kind vector?))\n     (s/def ::or (s/map-of simple-symbol? any?))\n     (s/def ::as ::local-name)\n\n     (s/def ::map-special-binding\n       (s/keys :opt-un [::as ::or ::keys ::syms ::strs]))\n\n     (s/def ::map-binding (s/tuple ::binding-form any?))\n\n     (s/def ::ns-keys\n       (s/tuple\n         (s/and qualified-keyword? #(-> % name #{\"keys\" \"syms\"}))\n         (s/coll-of simple-symbol? :kind vector?)))\n\n     (s/def ::map-bindings\n       (s/every (s/or :mb ::map-binding\n                  :nsk ::ns-keys\n                  :msb (s/tuple #{:as :or :keys :syms :strs} any?))\n         :into {}))\n\n     (s/def ::map-binding-form (s/merge ::map-bindings ::map-special-binding))\n\n     (s/def ::binding-form\n       (s/or :sym ::local-name\n         :seq ::seq-binding-form\n         :map ::map-binding-form))\n\n     ;;; Function and >defn specs\n\n     (s/def ::arg-list\n       (s/and vector?\n         (s/cat :args (s/* ::binding-form)\n           :varargs (s/? (s/cat :amp #{'&} :form ::binding-form)))))\n\n     (s/def ::pred-arg-list\n       (s/and vector?\n         (s/cat :args (s/* (s/or :sym ::local-name)))))\n\n     (s/def ::anon-args+body\n       (s/cat :args ::arg-list\n         :body (s/* any?)))\n\n     (s/def ::anon-fn\n       (s/and seq?\n         (s/cat :op #{'fn* 'fn}\n           :name (s/? simple-symbol?)\n           :bs (s/alt :arity-1 ::anon-args+body\n                 :arity-n (s/+ (s/spec ::anon-args+body))))))\n\n     (s/def ::pred-fn\n       (s/and seq?\n         (s/cat :op #{'fn* 'fn}\n           :name (s/? simple-symbol?)\n           :args ::pred-arg-list\n           :body any?)))\n\n     (s/def ::spec-elem\n       (s/or :set set?\n         :pred-sym (s/and symbol?\n                     (complement #{'| '=>})\n                     ;; REVIEW: should the `?` be a requirement?\n                     #(string/ends-with? (str %) \"?\"))\n         :gspec (s/or :nilable-gspec ::nilable-gspec :gspec ::gspec)\n         :spec-key qualified-keyword?\n         :fun ::pred-fn\n         :list seq?))\n\n     (s/def ::such-that-op #{:st '|})\n     (s/def ::ret-op #{:ret '=>})\n     (s/def ::gen-op #{:gen '<-})\n\n     (s/def ::gspec\n       (s/and vector?\n         (s/cat :args (s/? (s/cat :args (s/+ ::spec-elem)\n                             :args-such-that (s/? (s/cat :op ::such-that-op\n                                                    :preds (s/+ ::pred-fn)))))\n           :ret-op ::ret-op\n           :ret ::spec-elem\n           :fn-such-that (s/? (s/cat :op ::such-that-op\n                                :preds (s/+ ::pred-fn)))\n           :gen (s/? (s/cat :op ::gen-op\n                       :gen-fn (s/? (some-fn seq? symbol?)))))))\n\n     (s/def ::nilable-gspec\n       (s/and vector?\n         (s/cat :maybe #{'? 's/nilable}\n           :gspec ::gspec)))\n\n     (s/def ::prepost (s/map-of #{:pre :post}\n                        (s/coll-of seq?\n                          :kind vector?\n                          :distinct true)))\n\n     (s/def ::args+body\n       (s/cat :args ::arg-list\n         :body (s/alt :prepost+body (s/cat :prepost ::prepost\n                                      :body (s/+ any?))\n                 :body (s/* any?))))\n\n     (s/def ::args+gspec+body\n       (s/&\n         (s/cat :args ::arg-list\n           :gspec (s/nilable ::gspec)\n           :body (s/alt :prepost+body (s/cat :prepost ::prepost\n                                        :body (s/+ any?))\n                   :body (s/* any?)))\n         (fn arg-specs-match-param-count? [{:keys [args gspec]}]\n           (if-not gspec\n             true\n             (let [argcount  (->> args count-args (apply +))\n                   spec-args (:args gspec)]\n               (if spec-args\n                 (-> spec-args :args count (= argcount))\n                 (= argcount 0)))))))\n\n\n     (s/def ::defn\n       (s/and seq?\n         (s/cat :op #{'defn 'defn-}\n           :name simple-symbol?\n           :docstring (s/? string?)\n           :meta (s/? map?)\n           :bs (s/alt :arity-1 ::args+body\n                 :arity-n (s/cat :bodies (s/+ (s/spec ::args+body))\n                            :attr (s/? map?))))))\n\n     ;;;; Main code generating functions\n\n     (defn- unscrew-vec-unform\n       \"Half-arsed workaround for spec bugs CLJ-2003 and CLJ-2021.\"\n       [unformed-arg]\n       (if-not (sequential? unformed-arg)\n         unformed-arg\n         (let [malformed-seq-destructuring? (every-pred seq? (comp #{:as '&} first))\n               [unformed malformed] (split-with (complement malformed-seq-destructuring?) unformed-arg)]\n           (vec (concat unformed (apply concat malformed))))))\n\n\n     (defn- gspec->fspec*\n       [conformed-arg-list conformed-gspec anon-fspec? multi-arity-args? nilable?]\n       (let [{argspec-def              :args\n              retspec                  :ret\n              fn-such-that             :fn-such-that\n              {:keys [gen-fn] :as gen} :gen}\n             conformed-gspec]\n         (if (and anon-fspec?\n               argspec-def\n               (not gen)\n               (some #{'any?} (-> argspec-def :args vals)))\n           (if nilable? `(s/nilable ifn?) `ifn?)\n           (let [extract-spec\n                 (fn extract-spec [[spec-type spec]]\n                   (if (= spec-type :gspec)\n                     (if (= (key spec) :nilable-gspec)\n                       (gspec->fspec* nil (-> spec val :gspec) true false true)\n                       (gspec->fspec* nil (val spec) true false false))\n                     spec))\n\n                 named-conformed-args\n                 (when argspec-def\n                   (let [all-args     (remove nil? (concat (:args conformed-arg-list)\n                                                     [(-> conformed-arg-list :varargs :form)]))\n                         gen-arg-name (fn [index] (str \"arg\" (inc index)))\n                         gen-name     (fn [index [arg-type arg :as full-arg]]\n                                        (let [arg-name (if-not arg-type\n                                                         (gen-arg-name index)\n                                                         (case arg-type\n                                                           :sym arg\n                                                           :seq (or (-> arg :as :sym)\n                                                                  (gen-arg-name index))\n                                                           :map (or (-> arg :as)\n                                                                  (gen-arg-name index))))]\n                                          [(keyword arg-name) full-arg]))]\n                     (map-indexed gen-name (or (seq all-args)\n                                             (-> argspec-def :args count (repeat nil))))))\n\n                 arg-binding-map\n                 (if-not conformed-arg-list\n                   {}\n                   (if (every? #(= (-> % second key) :sym) named-conformed-args)\n                     `{:keys ~(vec (map #(-> % first name symbol) named-conformed-args))}\n                     (->> named-conformed-args\n                       (map (fn [[arg-key conformed-arg]]\n                              [(->> conformed-arg (s/unform ::binding-form) unscrew-vec-unform)\n                               arg-key]))\n                       (into {}))))\n\n                 process-arg-pred\n                 (fn process-arg-pred [{:keys [name args body]}]\n                   (let [bindings (if-let [anon-arg (some-> args :args first second)]\n                                    (assoc arg-binding-map :as anon-arg)\n                                    arg-binding-map)]\n                     (remove nil? `(fn ~name [~bindings] ~body))))\n\n                 processed-args\n                 (if-not argspec-def\n                   `(s/cat)\n                   (let [wrapped-params (->> argspec-def\n                                          :args\n                                          (map extract-spec)\n                                          (interleave (map first named-conformed-args))\n                                          (cons `s/cat))]\n                     (if-let [args-such-that (:args-such-that argspec-def)]\n                       (->> args-such-that\n                         :preds\n                         (map process-arg-pred)\n                         (list* `s/and wrapped-params))\n                       wrapped-params)))\n\n                 process-ret-pred\n                 (fn process-ret-pred [{:keys [name args body]}]\n                   (let [anon-arg       (some-> args :args first second)\n                         ret-sym        (gensym \"ret__\")\n                         bindings       [{(if multi-arity-args?\n                                            ['_ arg-binding-map]\n                                            arg-binding-map) :args\n                                          ret-sym            :ret}]\n                         processed-body (if anon-arg\n                                          (walk/postwalk-replace {anon-arg ret-sym} body)\n                                          body)]\n                     (remove nil? `(fn ~name ~bindings ~processed-body))))\n\n                 fn-spec\n                 (when fn-such-that\n                   (let [processed-ret-preds (map process-ret-pred (:preds fn-such-that))]\n                     (if (next processed-ret-preds)\n                       (cons `s/and processed-ret-preds)\n                       (first processed-ret-preds))))\n\n                 final-fspec\n                 (concat (when anon-fspec? [`s/fspec])\n                   [:args processed-args]\n                   [:ret (extract-spec retspec)]\n                   (when fn-spec [:fn fn-spec])\n                   (when gen-fn [:gen gen-fn]))]\n             (if nilable? `(s/nilable ~final-fspec) final-fspec)))))\n\n\n\n     ;; TODO make sure we check whether the variadic bodies are legit\n     ;; Can not have more than one\n     ;; Can not have one with more regular args than the variadic one\n     ;; To what extent does the compiler already check this?\n     (let [get-fspecs    (fn [fn-body]\n                           (let [[param-count variadic] (-> fn-body :args count-args)\n                                 gspec (or (:gspec fn-body)\n                                         (s/conform ::gspec\n                                           (vec (concat (repeat param-count 'any?)\n                                                  (when (> variadic 0)\n                                                    `[(s/* any?)])\n                                                  '[=> any?]))))]\n                             [(->> (if (> variadic 0) \"n\" param-count)\n                                (str \"arity-\")\n                                keyword)\n                              (gspec->fspec* (:args fn-body) gspec false true false)]))\n           get-spec-part (fn [part spec]\n                           (->> spec\n                             (drop-while (complement #{part}))\n                             second))]\n       (defn- generate-fspec-body [fn-bodies]\n         (case (key fn-bodies)\n           :arity-1\n           (when-let [gspec (-> fn-bodies val :gspec)]\n             (gspec->fspec* (-> fn-bodies val :args) gspec false false false))\n\n           :arity-n\n           (when (some :gspec (val fn-bodies))\n             (let [fspecs           (map get-fspecs (val fn-bodies))\n                   arg-specs        (mapcat (fn [[arity spec]]\n                                              [arity (or (get-spec-part :args spec) `empty?)])\n                                      fspecs)\n                   fn-param         (gensym \"p1__\")\n                   multi-ret-specs  (when (->> fspecs\n                                            (map #(get-spec-part :ret (second %)))\n                                            distinct\n                                            count\n                                            (not= 1))\n                                      (mapcat (fn [[arity spec]]\n                                                [arity `(s/valid? ~(get-spec-part :ret spec)\n                                                          (:ret ~fn-param))])\n                                        fspecs))\n                   get-fn-clause    (partial get-spec-part :fn)\n                   fn-specs         (when (->> fspecs (map second) (some get-fn-clause))\n                                      (mapcat (fn [[arity spec]]\n                                                [arity (if-let [fn-spec (get-fn-clause spec)]\n                                                         `(s/valid? ~fn-spec ~fn-param)\n                                                         true)])\n                                        fspecs))\n                   ;; NOTE: destructure args and ret in the arg vec\n                   multi-ret-clause (when multi-ret-specs\n                                      `(fn ~'valid-multi-arity-ret? [~fn-param]\n                                         (case (-> ~fn-param :args key)\n                                           ~@multi-ret-specs)))\n                   multi-fn-clause  (when fn-specs\n                                      `(fn ~'valid-multi-arity-fn? [~fn-param]\n                                         (case (-> ~fn-param :args key)\n                                           ~@fn-specs)))]\n               ;; Using s/or here even though s/alt seems to be more common\n               ;; for multi-arity specs in the wild. The spec error reporting\n               ;; is much better and it's immediately clear what didn't match.\n               (concat [:args `(s/or ~@arg-specs)]\n                 (when-not multi-ret-clause\n                   [:ret (get-spec-part :ret (-> fspecs first second))])\n                 (when (or multi-ret-clause multi-fn-clause)\n                   [:fn (if multi-fn-clause\n                          (if multi-ret-clause\n                            `(s/and ~multi-ret-clause ~multi-fn-clause)\n                            multi-fn-clause)\n                          multi-ret-clause)])))))))\n\n     (def ^:private spec-op->type\n       (let [map-prot     \"cljs.core.IMap\"\n             coll-prot    \"cljs.core.ICollection\"\n             ;; Needed because Closure compiler/JS doesn't consider strings seqable\n             seqable-prot \"(cljs.core.ISeqable|string)\"]\n         {'number?      \"number\"\n          'integer?     \"number\"\n          'int?         \"number\"\n          'nat-int?     \"number\"\n          'pos-int?     \"number\"\n          'neg-int?     \"number\"\n          'float?       \"number\"\n          'double?      \"number\"\n          'int-in       \"number\"\n          'double-in    \"number\"\n\n          'string?      \"string\"\n\n          'boolean?     \"boolean\"\n\n          'keys         map-prot\n          'map-of       map-prot\n          'map?         map-prot\n          'merge        map-prot\n\n          'set?         \"cljs.core.ISet\"\n          'vector?      \"cljs.core.IVector\"\n          'tuple        \"cljs.core.IVector\"\n          'seq?         \"cljs.core.ISeq\"\n          'seqable?     seqable-prot\n          'associative? \"cljs.core.IAssociative\"\n          'atom?        \"cljs.core.IAtom\"\n\n          'coll-of      coll-prot\n          'every        coll-prot\n\n          'keyword?     \"cljs.core.Keyword\"\n          'ifn?         \"cljs.core.IFn\"\n          'fn?          \"Function\"}))\n\n     (declare get-gspec-type)\n\n     (defn- get-type [recursive-call conformed-spec-elem]\n       (let [[spec-type spec-def] conformed-spec-elem\n             spec-op\n             ;; REVIEW: This kinda wants to be a multi-method when it grows up.\n             (case spec-type\n               :list (let [op (-> spec-def first name symbol)]\n                       (cond\n                         (#{'nilable '?} op) (concat (->> spec-def\n                                                       second\n                                                       (s/conform ::spec-elem)\n                                                       (get-type true))\n                                               [::nilable])\n                         (#{'* '+} op) (concat (->> spec-def\n                                                 second\n                                                 (s/conform ::spec-elem)\n                                                 (get-type true))\n                                         [::variadic])\n                         (#{'and} op) [(-> spec-def second)] ; TODO\n                         (#{'coll-of 'every} op) [(or (->> spec-def\n                                                        (drop-while (complement #{:kind}))\n                                                        second)\n                                                    op)]\n                         :else [op]))\n               ;;TODO support (some-fn and (s/or\n               :gspec (let [gspec-def (val spec-def)]\n                        (if (= (key spec-def) :nilable-gspec)\n                          [(get-gspec-type (:gspec gspec-def)) ::nilable]\n                          [(get-gspec-type gspec-def)]))\n               :pred-sym [spec-def]\n               [nil])]\n         (if recursive-call\n           spec-op\n           (if-let [js-type (spec-op->type (first spec-op))]\n             (let [modifiers (set (rest spec-op))]\n               (as-> js-type t\n                 (str (if (::nilable modifiers) \"?\" \"!\") t)\n                 (str (when (::variadic modifiers) \"...\") t)))\n             \"*\"))))\n\n\n     (defn- get-gspec-type [conformed-gspec]\n       (let [argspec-def (:args conformed-gspec)\n             args-jstype (if-not argspec-def\n                           \"\"\n                           (->> (-> conformed-gspec :args :args)\n                             (map (partial get-type false))\n                             (string/join \", \")))\n             ret-jstype  (get-type false (:ret conformed-gspec))]\n         (str \"function(\" args-jstype \"): \" ret-jstype)))\n\n     (defn- generate-type-annotations [env conformed-bs]\n       (when (cljs-env? env)\n         (case (key conformed-bs)\n           :arity-1 (when-let [gspec (-> conformed-bs val :gspec)]\n                      {:jsdoc [(str \"@type {\" (get-gspec-type gspec) \"}\")]})\n           ;; REVIEW: There doesn't seem to be a way to get valid annotations for args of\n           ;; multi-arity functions and attempts to just annotate the return value(s) failed\n           ;; as well. It wasn't possible to put together an annotation which was both\n           ;; considered valid and resulted in a successful type check.\n           :arity-n nil #_(when-let [ret-types (as-> (val conformed-bs) x\n                                                 (map #(get-type false (-> % :gspec :ret)) x)\n                                                 (distinct x)\n                                                 (when (not-any? #{\"*\" \"?\"} x) x))]\n                            {:jsdoc [(str \"@return {\" (string/join \"|\" ret-types) \"}\")]}))))\n\n     (defn- generate-fdef\n       [env forms]\n       (let [{[type fn-name] :name bs :bs} (s/conform ::>fdef-args forms)]\n         (case type\n           :sym (let [fdef `(s/fdef ~fn-name ~@(generate-fspec-body bs))]\n                  fdef)\n           :key `(s/def ~fn-name (s/fspec ~@(generate-fspec-body bs))))))))\n\n#?(:clj\n   (do\n     (defn- process-defn-body\n       [cfg fspec args+gspec+body]\n       (let [{:keys                                 [env fn-name]\n              {:keys [throw? emit-spec? log-level]} :config} cfg\n             {:keys [args body]} args+gspec+body\n             [prepost orig-body-forms] (case (key body)\n                                         :prepost+body [(-> body val :prepost)\n                                                        (-> body val :body)]\n                                         :body [nil (val body)])\n             process-arg   (fn [[arg-type arg]]\n                             (as-> arg arg\n                               (case arg-type\n                                 :sym [arg-type arg]\n                                 :seq [arg-type (update arg :as #(or % {:as :as :sym (gensym \"arg_\")}))]\n                                 :map [arg-type (update arg :as #(or % (gensym \"arg_\")))])))\n             ;; NOTE: usage of extract-arg isn't elegant, there's duplication, refactor\n             extract-arg   (fn [[arg-type arg]]\n                             (case arg-type\n                               :sym arg\n                               :seq (get-in arg [:as :sym])\n                               :map (:as arg)\n                               nil))\n             {:keys [file line]} (if (cljs-env? env)\n                                   (meta fn-name)\n                                   {:file #?(:clj *file* :cljs \"N/A\")\n                                    :line (some-> env :form meta :line)})\n             unform-arg    #(->> % (s/unform ::binding-form) unscrew-vec-unform)\n             reg-args      (->> args :args (mapv process-arg))\n             arg->sym      #(let [f (into {} [%])]\n                              (or\n                                (:sym f)\n                                (some-> f :seq :as :sym)\n                                (some-> f :map :as)))\n             reg-arg-names (mapv arg->sym reg-args)\n             var-arg       (some-> args :varargs :form process-arg)\n             arg-list      (vec (concat (map unform-arg reg-args)\n                                  (when var-arg ['& (unform-arg var-arg)])))\n             sym-arg-list  (if var-arg\n                             (conj reg-arg-names (arg->sym var-arg))\n                             reg-arg-names)\n             body-forms    orig-body-forms\n             where         (str file \":\" line \" \" fn-name \"'s\")\n             argspec       (gensym \"argspec\")\n             opts          {:fn-name   where :emit-spec? emit-spec?\n                            :log-level log-level :throw? throw? :vararg? (boolean var-arg)}\n             args-check    `(when ~argspec (run-check true ~opts ~argspec ~sym-arg-list))\n             retspec       (gensym \"retspec\")\n             ret           (gensym \"ret\")\n             ret-check     `(when ~retspec (run-check false ~opts ~retspec ~ret))\n             real-function `(fn ~arg-list ~@body-forms)\n             f             (gensym \"f\")\n             call          (if (boolean var-arg)\n                             `(cond\n                                (map? ~(last sym-arg-list)) (apply ~f ~@(butlast sym-arg-list) (apply concat (last ~sym-arg-list)))\n                                (seq ~(last sym-arg-list)) (apply ~f ~@sym-arg-list)\n                                :else (~f ~@(butlast sym-arg-list)))\n                             `(~f ~@sym-arg-list))]\n         `(~@(remove nil? [arg-list prepost])\n            (let [{~argspec :args ~retspec :ret} ~fspec]\n              ~args-check\n              (let [~f ~real-function\n                    ~ret ~call]\n                ~ret-check\n                ~ret)))))\n\n     (defn- generate-defn\n       [forms private env]\n       (let [conformed-gdefn   (s/conform ::>defn-args forms)\n             fn-bodies         (:bs conformed-gdefn)\n             arity             (key fn-bodies)\n             fn-name           (:name conformed-gdefn)\n             docstring         (:docstring conformed-gdefn)\n             meta-map          (merge (:meta conformed-gdefn)\n                                 (generate-type-annotations env fn-bodies)\n                                 {::guardrails true})\n             ;;; Assemble the config\n             {:keys [defn-macro emit-spec?] :as config} (cfg/merge-config env (meta fn-name) meta-map)\n             defn-sym          (cond defn-macro (with-meta (symbol defn-macro) {:private private})\n                                     private 'defn-\n                                     :else 'defn)\n             ;;; Code generation\n             fdef-body         (generate-fspec-body fn-bodies)\n             fdef              (when (and fdef-body emit-spec?) `(s/fdef ~fn-name ~@fdef-body))\n             individual-arity-fspecs\n                               (map (fn [{:keys [args gspec]}]\n                                      (when gspec\n                                        (gspec->fspec* args gspec true false false)))\n                                 (val fn-bodies))\n\n             process-fn-bodies (fn []\n                                 (let [process-cfg {:env     env\n                                                    :config  config\n                                                    :fn-name fn-name}]\n                                   (case arity\n                                     :arity-1 (->> fn-bodies val (process-defn-body process-cfg `(s/fspec ~@fdef-body)))\n                                     :arity-n (map (partial process-defn-body process-cfg)\n                                                individual-arity-fspecs\n                                                (val fn-bodies)))))\n             main-defn         `(~@(remove nil? [defn-sym fn-name docstring meta-map])\n                                  ~@(process-fn-bodies))]\n         `(do ~fdef (declare ~fn-name) ~main-defn)))\n\n     (defmacro emit-specs? []\n       (get (cfg/get-env-config) :emit-spec? true))\n\n     ;;;; Main macros and public API\n\n     (s/def ::>defn-args\n       (s/and seq?                                          ; REVIEW\n         (s/cat :name simple-symbol?\n           :docstring (s/? string?)\n           :meta (s/? map?)\n           :bs (s/alt :arity-1 ::args+gspec+body\n                 ;; TODO: add tail-attr-map support after this\n                 :arity-n (s/+ (s/and seq? ::args+gspec+body))))))\n\n\n\n     (defmacro >defn\n       \"Like defn, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.\"\n       {:arglists '([name doc-string? attr-map? [params*] gspec prepost-map? body?]\n                    [name doc-string? attr-map? ([params*] gspec prepost-map? body?) + attr-map?])}\n       [& forms]\n       (if (cfg/get-env-config)\n         (cond-> (remove nil? (generate-defn forms false (assoc &env :form &form)))\n           (cljs-env? &env) clj->cljs)\n         (clean-defn 'defn forms)))\n\n     (s/fdef >defn :args ::>defn-args)\n\n\n     ;; NOTE: lots of duplication - refactor this to set/pass ^:private differently and call >defn\n     (defmacro >defn-\n       \"Like defn-, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.\"\n       {:arglists '([name doc-string? attr-map? [params*] gspec prepost-map? body?]\n                    [name doc-string? attr-map? ([params*] gspec prepost-map? body?) + attr-map?])}\n       [& forms]\n       (if (cfg/get-env-config)\n         (cond-> (remove nil? (generate-defn forms true &env))\n           (cljs-env? &env) clj->cljs)\n         (clean-defn 'defn- forms)))\n\n     (s/fdef >defn- :args ::>defn-args)\n\n     (defmacro >def\n       \"Simple pass-through to `s/def`, except it strips the\n       specs in production – use for data specs you don't need\n       in production when you want to minimise your build size.\n\n       You can optionally send a documentation string as the second parameter, this\n       is intended to be informational for the code reader, currently this is not stored\n       anywhere, meaning you can't access this string at runtime.\"\n       ([k spec-form]\n        (when (emit-specs?)\n          (cond-> `(s/def ~k ~spec-form)\n            (cljs-env? &env) clj->cljs)))\n       ([k _doc spec-form]\n        `(>def ~k ~spec-form)))\n\n     (s/def ::>fdef-args\n       (s/and seq?                                          ;REVIEW\n         (s/cat :name (s/or :sym symbol? :key qualified-keyword?)\n           :bs (s/alt :arity-1 ::args+gspec+body\n                 :arity-n (s/+ (s/and seq? ::args+gspec+body))))))\n\n     (defmacro >fdef\n       \"Defines an fspec using gspec syntax – pretty much a `>defn` without the body.\n\n       `name` can be a symbol or a qualified keyword, depending on whether the\n       fspec is meant to be registered as a top-level fspec (=> s/fdef fn-sym\n       ...) or used in other specs (=> s/def ::spec-keyword (s/fspec ...)). \"\n       {:arglists '([name [params*] gspec]\n                    [name ([params*] gspec) +])}\n       [& forms]\n       (when (emit-specs?)\n         (cond-> (remove nil? (generate-fdef &env forms))\n           (cljs-env? &env) clj->cljs)))\n\n     (s/fdef >fdef :args ::>fdef-args)))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAwBA,AAAA,AAAKA;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AAGL,AAAA,AAAOC,AAAWC;AAAlB,AACE,AAAAC,AACiCD;AADjCC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAoBM;AAApB,AAAAF,AAAAJ,AAAA,AAAyBO;AAAzB,AAAAH,AAAAJ,AAAA,AAA8BQ;AAA9B,AAAAJ,AAAAJ,AAAA,AAAsCS;AAAtC,AAAAL,AAAAJ,AAAA,AAA4CU;AAA5C,AAAAN,AAAAJ,AAAA,AACcW;AADd,AAAAP,AAAAJ,AAAA,AACyBY;AADzB,AAEE,AAAA,AACE,AAACC,AAAkB,AAACC,AAAKT,AACzB,AAACU,AAAMR,AACP,AAAAS,AAAeV;AAAf,AAAA,AAAAU;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAA,AAAU,AAAA,AAACC,AAAeD;;AAD5B;;;;AAGN,AAAA,AAAAE,AAAME,AAAWC,AAAiDK,AAAKC;AAAvE,AAAA,AAAAR,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAA,AAAAhB,AAAAgB,AAAA,AAA+BG;AAA/B,AAAAnB,AAAAgB,AAAA,AAAyCI;AAAzC,AAAApB,AAAAgB,AAAA,AAAiDK;AAAjD,AAAArB,AAAAgB,AAAA,AAAwDM;AAAxD,AACE,AAAMG,AAAgB,AAAAC,AAAKR;AAAL,AAAA,AAAAQ;AAAWN;;AAAXM;;;AAChBC,AAAgB,AAAA,AAAIF,AAAO,AAACG,AAAK,AAACC,AAAIL;AACtCM,AAAgB,AAAIL,AACF,AAAI,AAACM,AAAKJ,AAAM,AAACK,AAAK,AAACC,AAAI,AAACC,AAAQV,AAAQ,AAACW,AAAQ,AAACN,AAAIF,AAAQ,AAACK,AAAK,AAACC,AAAI,AAACC,AAAQV,AAAQ,AAACK,AAAIF,AACnGH;AAClBY,AAAgB,AAAA,AAACC;AALvB,AAME,AAAA,AACE,AAAU,AAACE,AAAShB,AAAKO;AAAzB;AAAA,AACE,AAAMU,AAAQ,AAAA,AAACC,AAAMC,AAAwBhD;AACvCiD,AAAQ,AAACC,AAAgBrB,AAAKO;AADpC,AAEE,AAAAe,AAAUL,AAAO,AAAAO,AAAI5B;AAAJ,AAAA,AAAA4B;AAAAA;;AAAA;;AAAjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAuC,AAAA,AAAKxB,AAAQ,AAAA,AAAA,AAAIJ,AAA6CyB;AAArG,AAAA,AAAA;;AACA,AAAMtB;AAAN,AACE,AAAC2B,AAAOZ,AAAgB,AAAA,AAAA,AAACa,AAAQN,AAAkB,AAAKrB;;AAD1D;;AALN,AAAAgB,AAO2CY;AAP3C,AAQI,AAAAL,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAA,AAAWI;AAAX,AAAA,AAAA;;AACJ,AAAA,AAAAC,AAAOf;AAAP,AACE,AAAA,AAAAe,AAAQf;;AADV;;AAhBJ","names",["com.fulcrologic.guardrails.core/=>","com.fulcrologic.guardrails.core/|","com.fulcrologic.guardrails.core/<-","com.fulcrologic.guardrails.core/output-fn","data","map__62525","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","level","?err","msg_","?ns-str","?file","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","cljs.core/force","temp__5735__auto__","err","taoensso.timbre.stacktrace","p__62534","map__62535","com.fulcrologic.guardrails.core/run-check","args?","log-level","vararg?","throw?","fn-name","spec","value","vargs?","and__4115__auto__","varg","cljs.core/last","cljs.core/seq","specable-args","cljs.core/map?","cljs.core.into","cljs.core/vec","cljs.core/butlast","cljs.core/flatten","valid-exception","cljs.core.atom","e62569","cljs.spec.alpha.valid_QMARK_","config","cljs.core.assoc","taoensso.timbre/*config*","problem","expound.alpha.expound_str","taoensso.timbre._log_BANG_","cljs.core/Delay","or__4126__auto__","cljs.core/reset!","cljs.core.ex_info","e","cljs.core/deref"]],"~:used-vars",["^J",["~$clojure.string/upper-case","~$taoensso.timbre/stacktrace","~$taoensso.timbre/-log!","~$com.fulcrologic.guardrails.core/=>","~$cljs.core/deref","~$cljs.core/Delay","~$com.fulcrologic.guardrails.core/output-fn","~$cljs.core/reset!","~$taoensso.timbre/*config*","~$cljs.spec.alpha/valid?","~$cljs.core/ex-info","~$cljs.core/force","~$com.fulcrologic.guardrails.core/<-","~$com.fulcrologic.guardrails.core/run-check","~$cljs.core/name","~$com.fulcrologic.guardrails.core/|"]]],"~:cache-keys",["~#cmap",[["^1R","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^1C","~$goog.dom.HtmlElement"]]],["^1R","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.labs.userAgent.util","~$goog.string"]]],["^1R","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B"]]],["^1R","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.Promise","~$goog.events.EventTarget"]]],["^1R","cljs/spec/gen/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","~$goog.Uri"]]],["^1R","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^1F","^2J"]]],["^1R","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.array","~$goog.asserts"]]],["^1R","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2J"]]],["^1R","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1R","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2I","~$goog.object","~$goog.string.internal"]]],["^1R","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2S"]]],["^1R","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O"]]],["^1R","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","~$expound.paths","^?"]]],["^1R","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2I","~$goog.reflect","^2J"]]],["^1R","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1R","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1R","taoensso/encore.cljs"],["30c096c80ac45227d869087a80755500fca98346","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^1F","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^2R","^2J","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1R","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","~$goog.async.FreeList"]]],["^1R","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2P","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1R","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2Q"]]],["^1R","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2J","^3<"]]],["^1R","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.structs.Heap"]]],["^1R","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.Timer","^2N","^2O","^3E","^2L","~$goog.json.hybrid","~$goog.log","^3B","^3A","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^2R","^2J","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^2Q"]]],["^1R","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B"]]],["^1R","cljs/pprint.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^1F","^2J","^3<"]]],["^1R","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^3J","^3K","^3L","^3I","^2N","^2J","^3<"]]],["^1R","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","~$expound.problems","^?","^1F","^38","~$clojure.walk","~$expound.printer","~$expound.util","~$expound.ansi","^C"]]],["^1R","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1R","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.Disposable","^2O","^3=","~$goog.events.Event","^3G","^3H","^2R"]]],["^1R","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^1F","^1@","^?","^1A"]]],["^1R","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.disposable.IDisposable"]]],["^1R","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^1F"]]],["^1R","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O"]]],["^1R","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^3T","~$goog.structs.Collection","^3U"]]],"~:SHADOW-TIMESTAMP",[1598567487000,1598567487000,1592012038000],["^1R","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","^32"]]],["^1R","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.events.ListenableKey"]]],["^1R","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","~$goog.html.trustedtypes","^2V","^2W","^2X","^2Y"]]],["^1R","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","~$goog.events.Listener","^2R"]]],["^1R","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","~$taoensso.truss.impl"]]],["^1R","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2O","~$goog.html.SafeUrl","^2X","^2Y","^2S"]]],["^1R","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4;","^2U","~$goog.html.uncheckedconversions","^2X","^2S"]]],["^1R","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^?","^3Z"]]],["^1R","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^38"]]],["^1R","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B"]]],["^1R","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1R","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^3>","~$goog.structs.PriorityPool"]]],["^1R","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2O","~$goog.dom.TagName","~$goog.dom.tags","^4?","^4@","~$goog.html.SafeStyleSheet","^4;","^2U","^48","^2V","^2W","^2[","^2R","^2X","^2Y","^2S"]]],["^1R","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2R"]]],["^1R","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N"]]],["^1R","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2I","^2J"]]],["^1R","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^1F","~$taoensso.encore"]]],["^1R","cljs/reader.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^2R","^3M","^3:","^3<"]]],["^1R","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2O","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4E","~$goog.dom.safe","^4>","^4A","~$goog.math.Coordinate","~$goog.math.Size","^2R","^2J","~$goog.string.Unicode","^2Q"]]],["^1R","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.debug.Error","^4J"]]],["^1R","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","~$goog.debug.LogRecord"]]],["^1R","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2O","^2J","^3T","^3U","^3V","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1R","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.Thenable","^2O","^3D","~$goog.async.run","^37","^4O","~$goog.promise.Resolver"]]],["^1R","cljs/spec/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^2R","^3X","^C","^1F"]]],["^1R","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",[]]],["^1R","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","~$goog.json"]]],["^1R","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2R"]]],["^1R","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^3J","^1F","~$cljs.tools.reader.impl.inspect"]]],["^1R","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^2J","^3<"]]],["^1R","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^42","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1R","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2R","~$goog.structs.Node"]]],["^1R","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O"]]],["^1R","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^4K","^4A","^2X","^2S"]]],["^1R","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2S"]]],["^1R","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^1F","^?","^G","^38","^3Z","^3[","^2Z","^3X","^3;","^2J"]]],["^1R","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","~$goog.debug.errorcontext","^2Q"]]],["^1R","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.math"]]],["^1R","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^3K","^2J","^3<"]]],["^1R","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2O","^4=","^50"]]],["^1R","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^3E","~$goog.dom","^4E","^4K","^4=","^4>","^2U","^2[","^30","^2X"]]],["^1R","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","^4>","^4?","^4@","^4G","^4;","^2U","^2X","^2S"]]],["^1R","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2O","~$goog.debug","~$goog.debug.LogBuffer","^4P"]]],["^1R","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^42","~$goog.events.EventId"]]],["^1R","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^3I","^3J","^3K"]]],["^1R","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","~$goog.math.Long","~$goog.math.Integer","^2J","^2R","^2N","^2M","^3<"]]],["^1R","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","^48","^2X","^2Y"]]],["^1R","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^52","~$goog.debug.LogManager","^4P","~$goog.debug.Logger"]]],["^1R","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2O","^4@","^2R","^2X","^2Y","^2S"]]],["^1R","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^52","^2P","^43","~$goog.events.EventType","^32","^2Q"]]],["^1R","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^32"]]],["^1R","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2Q"]]],["^1R","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B"]]],["^1R","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2N","^2O","^2J"]]],["^1R","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","^2Y"]]],["^1R","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^1B","^1F","^4H","~$taoensso.timbre.appenders.core"]]],["^1R","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]],["^1R","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^54"]]],["^1R","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^40"]]],["^1R","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C","^2O","~$goog.net.WrapperXmlHttpFactory","^41"]]],["^1R","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2D",["^ ","^2E",null,"^2F",["^J",[]],"^2G",["^1C"]]]]],"~:clj-info",["^ ","jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1580742522000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1598567491000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1580246397000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1580742522000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/gen/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1592012038000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/gen/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1580245266000,"jar:file:/home/patro/.m2/repository/com/taoensso/encore/2.117.0/encore-2.117.0.jar!/taoensso/encore.clj",1597755175000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1580246397000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1581097609000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1580246694000,"jar:file:/home/patro/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1598567482000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1581097609000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/alpha.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1589469725000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/main.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1580246694000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/reader.clj",1592012038000,"jar:file:/home/patro/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/spec/alpha.clj",1597755174000,"jar:file:/home/patro/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1580742522000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/pprint.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1586366410000,"jar:file:/home/patro/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1592012038000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1580245266000,"jar:file:/home/patro/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1580245266000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",10,"^8",5,"^9",10,"^:",36],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K",["^ ","^L",["^ ","^M",["^N",[["^O","^P","^Q",["^R"],"^S","^T","^U"],["^O","^P","^Q",["^N",[["^R"],"^S","^T","^U"]],"~$+","^Q"]]],"^V","Like defn-, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",679,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^W","^X","^Y","^Z","^[",true],"^10",["^ ","^M",["^N",[[]]],"^7",646,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^W","^11","^Y","^Z","^[",true],"^12",["^ ","^M",["^N",[["^O",["^R"],"^S"],["^O",["^N",[["^R"],"^S"]],"~$+"]]],"^V","Defines an fspec using gspec syntax – pretty much a `>defn` without the body.\n\n       `name` can be a symbol or a qualified keyword, depending on whether the\n       fspec is meant to be registered as a top-level fspec (=> s/fdef fn-sym\n       ...) or used in other specs (=> s/def ::spec-keyword (s/fspec ...)). ","^7",715,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^W","^13","^Y","^Z","^[",true],"^14",["^ ","^M",["^N",[["~$k","^15"],["~$k","^16","^15"]]],"^V","Simple pass-through to `s/def`, except it strips the\n       specs in production – use for data specs you don't need\n       in production when you want to minimise your build size.\n\n       You can optionally send a documentation string as the second parameter, this\n       is intended to be informational for the code reader, currently this is not stored\n       anywhere, meaning you can't access this string at runtime.","^7",694,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^W","^17","^Y","^Z","^[",true],"~$?",["^ ","^M",["^N",[["~$&","^18"]]],"^7",83,"^8",4,"^6","com/fulcrologic/guardrails/core.cljc","^W","^19","^Y","^Z","^[",true],"^1:",["^ ","^M",["^N",[["^O","^P","^Q",["^R"],"^S","^T","^U"],["^O","^P","^Q",["^N",[["^R"],"^S","^T","^U"]],"~$+","^Q"]]],"^V","Like defn, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",662,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^W","^1;","^Y","^Z","^[",true]],"^W","^Z","^1=",null,"^1>",["^ ","^>","^?","^1?","^1@","^1A","^1A","^1B","^1B","^1C","^1C","^1D","^1A","~$s","^?","^1E","^1F","^1@","^1@","^1F","^1F","^?","^?"],"^1G",["^J",["^1H","^1I"]],"^1J",null,"~:defs",["^ ","~$=>",["^ ","^W","^25","^6","com/fulcrologic/guardrails/core.cljc","^7",25,"^8",1,"^9",25,"^:",8,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",25,"^8",6,"^9",25,"^:",8],"~:tag","~$cljs.core/Keyword"],"~$|",["^ ","^W","^2A","^6","com/fulcrologic/guardrails/core.cljc","^7",26,"^8",1,"^9",26,"^:",7,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",26,"^8",6,"^9",26,"^:",7],"^6I","^6J"],"~$<-",["^ ","^W","^2>","^6","com/fulcrologic/guardrails/core.cljc","^7",27,"^8",1,"^9",27,"^:",8,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",27,"^8",6,"^9",27,"^:",8],"^6I","^6J"],"~$output-fn",["^ ","~:protocol-inline",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",30,"^8",8,"^9",30,"^:",17,"~:private",true,"^M",["^N",["~$quote",["^N",[["~$data"]]]]]],"^6N",true,"^W","^28","^6","com/fulcrologic/guardrails/core.cljc","^:",17,"~:method-params",["^N",[["^6P"]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^8",1,"~:variadic?",false,"^7",30,"~:ret-tag","^1E","^9",30,"~:max-fixed-arity",1,"~:fn-var",true,"^M",["^N",["^6O",["^N",[["^6P"]]]]]],"~$run-check",["^ ","^6M",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",39,"^8",7,"^9",39,"^:",16,"^M",["^N",["^6O",["^N",[["~$args?",["^ ","~:keys",["~$log-level","~$vararg?","~$throw?","~$fn-name"]],"~$spec","~$value"]]]]]],"^W","^2?","^6","com/fulcrologic/guardrails/core.cljc","^:",16,"^6Q",["^N",[["^6Y","~$p__62534","^73","^74"]]],"^6R",null,"^6S",["^N",[null,null]],"^8",1,"^6T",false,"^7",39,"^6U","~$clj-nil","^9",39,"^6V",4,"^6W",true,"^M",["^N",["^6O",["^N",[["^6Y",["^ ","^6Z",["^6[","^70","^71","^72"]],"^73","^74"]]]]]]],"^1I",["^ ","^Z","^Z","^1B","^1B","^>","^?","^1?","^1@","~$s","^?","^1@","^1@","^?","^?"],"~:cljs.analyzer/constants",["^ ","^1G",["^J",["~:ret","~:throw?","~:gen","~:log-level","~:msg_","~:?file","~:fn-name","~:hostname_","~:?ns-str","~:level","~:vararg?","~:output-fn","~:?err","~:st","~:timestamp_","~:?line","~:error","~:auto","~:p"]],"~:order",["^78","^7E","^7:","^7A","^7D","^7<","^7@","^7=","^7?","^7F","^7G","^7;","^7B","^79","^7>","^7H","~:p","^7I","^7C"]],"^1N",["^ ","^1I",["^J",[]],"^1H",["^J",[]]],"^1O",["^ "],"^1P",["^1C","^1B","^1F","^1@","^?","^1A"]],"^Y","^Z","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^2C",[["^7M","~:static-fns"],true,["^7M","~:shadow-tweaks"],null,["^7M","~:source-map-inline"],null,["^7M","~:elide-asserts"],false,["^7M","~:optimize-constants"],null,["^7M","^1U"],null,["^7M","~:external-config"],["^ ","~:fulcro",["^ ","~:wrap-inputs?",false]],["^7M","~:tooling-config"],null,["^7M","~:emit-constants"],null,["^7M","~:load-tests"],null,["^7M","~:form-size-threshold"],null,["^7M","~:data-readers"],null,["^7M","~:infer-externs"],"^7I",["^7M","^1W"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7M","~:fn-invoke-direct"],null,["^7M","~:source-map"],true]]]